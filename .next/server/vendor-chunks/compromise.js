"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/compromise";
exports.ids = ["vendor-chunks/compromise"];
exports.modules = {

/***/ "(rsc)/./node_modules/compromise/builds/compromise.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/compromise/builds/compromise.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\".split(\"\");\nvar t = function(t) {\n    let r = (t = t || \"_\") + \"-\";\n    for(let t = 0; t < 7; t++)r += e[Math.floor(Math.random() * e.length)];\n    return r;\n};\nlet r = {\n    \"!\": \"\\xa1\",\n    \"?\": \"\\xbfɁ\",\n    '\"': '“”\"❝❞',\n    \"'\": \"‘‛❛❜\",\n    \"-\": \"—–\",\n    a: \"\\xaa\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5ĀāĂăĄąǍǎǞǟǠǡǺǻȀȁȂȃȦȧȺΆΑΔΛάαλАадѦѧӐӑӒӓƛɅ\\xe6\",\n    b: \"\\xdf\\xfeƀƁƂƃƄƅɃΒβϐϦБВЪЬвъьѢѣҌҍ\",\n    c: \"\\xa2\\xa9\\xc7\\xe7ĆćĈĉĊċČčƆƇƈȻȼͻͼͽϲϹϽϾСсєҀҁҪҫ\",\n    d: \"\\xd0ĎďĐđƉƊȡƋƌǷ\",\n    e: \"\\xc8\\xc9\\xca\\xcb\\xe8\\xe9\\xea\\xebĒēĔĕĖėĘęĚěƎƏƐǝȄȅȆȇȨȩɆɇΈΕΞΣέεξϱϵ϶ЀЁЕЭеѐёҼҽҾҿӖӗӘәӚӛӬӭ\",\n    f: \"ƑƒϜϝӺӻҒғſ\",\n    g: \"ĜĝĞğĠġĢģƓǤǥǦǧǴǵ\",\n    h: \"ĤĥĦħƕǶȞȟΉΗЂЊЋНнђћҢңҤҥҺһӉӊ\",\n    I: \"\\xcc\\xcd\\xce\\xcf\",\n    i: \"\\xec\\xed\\xee\\xefĨĩĪīĬĭĮįİıƖƗȈȉȊȋΊΐΪίιϊІЇії\",\n    j: \"ĴĵǰȷɈɉϳЈј\",\n    k: \"ĶķĸƘƙǨǩΚκЌЖКжкќҚқҜҝҞҟҠҡ\",\n    l: \"ĹĺĻļĽľĿŀŁłƚƪǀǏǐȴȽΙӀӏ\",\n    m: \"ΜϺϻМмӍӎ\",\n    n: \"\\xd1\\xf1ŃńŅņŇňŉŊŋƝƞǸǹȠȵΝΠήηϞЍИЙЛПийлпѝҊҋӅӆӢӣӤӥπ\",\n    o: \"\\xd2\\xd3\\xd4\\xd5\\xd6\\xd8\\xf0\\xf2\\xf3\\xf4\\xf5\\xf6\\xf8ŌōŎŏŐőƟƠơǑǒǪǫǬǭǾǿȌȍȎȏȪȫȬȭȮȯȰȱΌΘΟθοσόϕϘϙϬϭϴОФоѲѳӦӧӨөӪӫ\",\n    p: \"ƤƿΡρϷϸϼРрҎҏ\\xde\",\n    q: \"Ɋɋ\",\n    r: \"ŔŕŖŗŘřƦȐȑȒȓɌɍЃГЯгяѓҐґ\",\n    s: \"ŚśŜŝŞşŠšƧƨȘșȿЅѕ\",\n    t: \"ŢţŤťŦŧƫƬƭƮȚțȶȾΓΤτϮТт\",\n    u: \"\\xb5\\xd9\\xda\\xdb\\xdc\\xf9\\xfa\\xfb\\xfcŨũŪūŬŭŮůŰűŲųƯưƱƲǓǔǕǖǗǘǙǚǛǜȔȕȖȗɄΰμυϋύ\",\n    v: \"νѴѵѶѷ\",\n    w: \"ŴŵƜωώϖϢϣШЩшщѡѿ\",\n    x: \"\\xd7ΧχϗϰХхҲҳӼӽӾӿ\",\n    y: \"\\xdd\\xfd\\xffŶŷŸƳƴȲȳɎɏΎΥΫγψϒϓϔЎУучўѰѱҮүҰұӮӯӰӱӲӳ\",\n    z: \"ŹźŻżŽžƩƵƶȤȥɀΖζ\"\n}, a = {};\nObject.keys(r).forEach(function(e) {\n    r[e].split(\"\").forEach(function(t) {\n        a[t] = e;\n    });\n});\nvar n = (e)=>{\n    let t = e.split(\"\");\n    return t.forEach((e, r)=>{\n        a[e] && (t[r] = a[e]);\n    }), t.join(\"\");\n};\nconst i = /([A-Z]\\.)+[A-Z]?,?$/, o = /^[A-Z]\\.,?$/, s = /[A-Z]{2,}('s|,)?$/, l = /([a-z]\\.)+[a-z]\\.?$/;\nvar u = function(e) {\n    return !0 === i.test(e) || !0 === l.test(e) || !0 === o.test(e) || !0 === s.test(e);\n};\nconst c = n, h = u, d = /[a-z\\u00C0-\\u00FF] ?\\/ ?[a-z\\u00C0-\\u00FF]/;\nconst g = function(e) {\n    let t = e = (e = (e = e || \"\").toLowerCase()).trim();\n    return e = c(e), !0 === d.test(e) && (e = e.replace(/\\/.*/, \"\")), e = (e = (e = (e = (e = (e = (e = e.replace(/^[#@]/, \"\")).replace(/[,;.!?]+$/, \"\")).replace(/[\\u0027\\u0060\\u00B4\\u2018\\u2019\\u201A\\u201B\\u2032\\u2035\\u2039\\u203A]+/g, \"'\")).replace(/[\\u0022\\u00AB\\u00BB\\u201C\\u201D\\u201E\\u201F\\u2033\\u2034\\u2036\\u2037\\u2E42\\u301D\\u301E\\u301F\\uFF02]+/g, '\"')).replace(/\\u2026/g, \"...\")).replace(/\\u2013/g, \"-\")).replace(/([aeiou][ktrp])in$/, \"$1ing\"), !0 === /^(re|un)-?[^aeiou]./.test(e) && (e = e.replace(\"-\", \"\")), h(e) && (e = e.replace(/\\./g, \"\")), !1 === /^[:;]/.test(e) && (e = (e = (e = e.replace(/\\.{3,}$/g, \"\")).replace(/[\",\\.!:;\\?\\)]+$/g, \"\")).replace(/^['\"\\(]+/g, \"\")), \"\" === (e = (e = e.replace(/[\\u200B-\\u200D\\uFEFF]/g, \"\")).trim()) && (e = t), e = e.replace(/([0-9]),([0-9])/g, \"$1$2\");\n}, p = function(e) {\n    return e = (e = e.replace(/['’]s$/, \"\")).replace(/s['’]$/, \"s\");\n}, m = /^[ \\n\\t\\.\\[\\](){}⟨⟩:,،、‒–—―…!‹›«»‐\\-?‘’;\\/⁄·&*•^†‡°¡¿※№÷×ºª%‰+−=‱¶′″‴§~\\|‖¦©℗®℠™¤₳฿\\u0022\\uFF02\\u0027\\u201C\\u201F\\u201B\\u201E\\u2E42\\u201A\\u2035\\u2036\\u2037\\u301D\\u0060\\u301F]+/, f = /[ \\n\\t\\.'\\[\\](){}⟨⟩:,،、‒–—―…!‹›«»‐\\-?‘’;\\/⁄·&*@•^†‡°¡¿※#№÷×ºª‰+−=‱¶′″‴§~\\|‖¦©℗®℠™¤₳฿\\u0022\\uFF02\\u201D\\u00B4\\u301E]+$/, b = /\\//, y = /['’]/, v = /^[a-z]\\.([a-z]\\.)+/i, w = /^[-+\\.][0-9]/, k = /^'[0-9]{2}/;\nvar A = (e)=>{\n    let t = e, r = \"\", a = \"\";\n    \"\" === (e = (e = e.replace(m, (t)=>(r = t, \"-\" !== r && \"+\" !== r && \".\" !== r || !w.test(e) ? \"'\" === r && k.test(e) ? (r = \"\", t) : \"\" : (r = \"\", t)))).replace(f, (n)=>(a = n, y.test(n) && /[sn]['’]$/.test(t) && !1 === y.test(r) ? (a = a.replace(y, \"\"), \"'\") : !0 === v.test(e) ? (a = a.replace(/\\./, \"\"), \".\") : \"\"))) && (t = t.replace(/ *$/, (e)=>(a = e || \"\", \"\")), e = t, r = \"\", a = a);\n    let n = g(e);\n    const i = {\n        text: e,\n        clean: n,\n        reduced: p(n),\n        pre: r,\n        post: a\n    };\n    return b.test(e) && e.split(b).forEach((e)=>{\n        i.alias = i.alias || {}, i.alias[e.trim()] = !0;\n    }), i;\n}, D = {};\n!function(e) {\n    const t = /^[A-Z][a-z'\\u00C0-\\u00FF]/, r = /^[A-Z]+s?$/;\n    e.toUpperCase = function() {\n        return this.text = this.text.toUpperCase(), this;\n    }, e.toLowerCase = function() {\n        return this.text = this.text.toLowerCase(), this;\n    }, e.toTitleCase = function() {\n        return this.text = this.text.replace(/^ *[a-z\\u00C0-\\u00FF]/, (e)=>e.toUpperCase()), this;\n    }, e.isUpperCase = function() {\n        return r.test(this.text);\n    }, e.isTitleCase = function() {\n        return t.test(this.text);\n    }, e.titleCase = e.isTitleCase;\n}(D);\nvar $ = {};\n!function(e) {\n    const t = /(\\u0022|\\uFF02|\\u0027|\\u201C|\\u2018|\\u201F|\\u201B|\\u201E|\\u2E42|\\u201A|\\u00AB|\\u2039|\\u2035|\\u2036|\\u2037|\\u301D|\\u0060|\\u301F)/, r = /(\\u0022|\\uFF02|\\u0027|\\u201D|\\u2019|\\u201D|\\u2019|\\u201D|\\u201D|\\u2019|\\u00BB|\\u203A|\\u2032|\\u2033|\\u2034|\\u301E|\\u00B4|\\u301E)/;\n    e.hasPost = function(e) {\n        return -1 !== this.post.indexOf(e);\n    }, e.hasPre = function(e) {\n        return -1 !== this.pre.indexOf(e);\n    }, e.hasQuote = function() {\n        return t.test(this.pre) || r.test(this.post);\n    }, e.hasQuotation = e.hasQuote, e.hasComma = function() {\n        return this.hasPost(\",\");\n    }, e.hasPeriod = function() {\n        return !0 === this.hasPost(\".\") && !1 === this.hasPost(\"...\");\n    }, e.hasExclamation = function() {\n        return this.hasPost(\"!\");\n    }, e.hasQuestionMark = function() {\n        return this.hasPost(\"?\") || this.hasPost(\"\\xbf\");\n    }, e.hasEllipses = function() {\n        return this.hasPost(\"..\") || this.hasPost(\"…\") || this.hasPre(\"..\") || this.hasPre(\"…\");\n    }, e.hasSemicolon = function() {\n        return this.hasPost(\";\");\n    }, e.hasSlash = function() {\n        return /\\//.test(this.text);\n    }, e.hasHyphen = function() {\n        const e = /^(-|–|—)$/;\n        return e.test(this.post) || e.test(this.pre);\n    }, e.hasDash = function() {\n        const e = / (-|–|—) /;\n        return e.test(this.post) || e.test(this.pre);\n    }, e.hasContraction = function() {\n        return Boolean(this.implicit);\n    }, e.addPunctuation = function(e) {\n        return \",\" !== e && \";\" !== e || (this.post = this.post.replace(e, \"\")), this.post = e + this.post, this;\n    };\n}($);\nvar P = {};\nconst E = function(e, t, r = 3) {\n    if (e === t) return 1;\n    if (e.length < r || t.length < r) return 0;\n    const a = function(e, t) {\n        let r = e.length, a = t.length;\n        if (0 === r) return a;\n        if (0 === a) return r;\n        let n = (a > r ? a : r) + 1;\n        if (Math.abs(r - a) > (n || 100)) return n || 100;\n        let i, o, s, l, u, c, h = [];\n        for(let e = 0; e < n; e++)h[e] = [\n            e\n        ], h[e].length = n;\n        for(let e = 0; e < n; e++)h[0][e] = e;\n        for(let n = 1; n <= r; ++n)for(o = e[n - 1], i = 1; i <= a; ++i){\n            if (n === i && h[n][i] > 4) return r;\n            s = t[i - 1], l = o === s ? 0 : 1, u = h[n - 1][i] + 1, (c = h[n][i - 1] + 1) < u && (u = c), (c = h[n - 1][i - 1] + l) < u && (u = c);\n            let a = n > 1 && i > 1 && o === t[i - 2] && e[n - 2] === s && (c = h[n - 2][i - 2] + l) < u;\n            h[n][i] = a ? c : u;\n        }\n        return h[r][a];\n    }(e, t);\n    let n = Math.max(e.length, t.length);\n    return 1 - (0 === n ? 0 : a / n);\n};\nlet H = function() {};\nH = function(e, t, r, a) {\n    let n = function(e, t, r, a) {\n        if (t.id === e.id) return !0;\n        if (!0 === t.anything) return !0;\n        if (!0 === t.start && 0 !== r) return !1;\n        if (!0 === t.end && r !== a - 1) return !1;\n        if (void 0 !== t.word) {\n            if (null !== e.implicit && e.implicit === t.word) return !0;\n            if (void 0 !== e.alias && e.alias.hasOwnProperty(t.word)) return !0;\n            if (!0 === t.soft && t.word === e.root) return !0;\n            if (void 0 !== t.fuzzy) {\n                let r = E(t.word, e.reduced);\n                if (r > t.fuzzy) return !0;\n                if (!0 === t.soft && (r = E(t.word, e.root), r > t.fuzzy)) return !0;\n            }\n            return t.word === e.clean || t.word === e.text || t.word === e.reduced;\n        }\n        return void 0 !== t.tag ? !0 === e.tags[t.tag] : void 0 !== t.method ? \"function\" == typeof e[t.method] && !0 === e[t.method]() : void 0 !== t.regex ? t.regex.test(e.clean) : void 0 !== t.fastOr ? !(!e.implicit || !0 !== t.fastOr.hasOwnProperty(e.implicit)) || t.fastOr.hasOwnProperty(e.reduced) || t.fastOr.hasOwnProperty(e.text) : void 0 !== t.choices && (\"and\" === t.operator ? t.choices.every((t)=>H(e, t, r, a)) : t.choices.some((t)=>H(e, t, r, a)));\n    }(e, t, r, a);\n    return !0 === t.negative ? !n : n;\n};\nconst j = H, N = u, x = {};\nP.doesMatch = function(e, t, r) {\n    return j(this, e, t, r);\n}, P.isAcronym = function() {\n    return N(this.text);\n}, P.isImplicit = function() {\n    return \"\" === this.text && Boolean(this.implicit);\n}, P.isKnown = function() {\n    return Object.keys(this.tags).some((e)=>!0 !== x[e]);\n}, P.setRoot = function(e) {\n    let t = e.transforms, r = this.implicit || this.clean;\n    if (this.tags.Plural && (r = t.toSingular(r, e)), this.tags.Verb && !this.tags.Negative && !this.tags.Infinitive) {\n        let a = null;\n        this.tags.PastTense ? a = \"PastTense\" : this.tags.Gerund ? a = \"Gerund\" : this.tags.PresentTense ? a = \"PresentTense\" : this.tags.Participle ? a = \"Participle\" : this.tags.Actor && (a = \"Actor\"), r = t.toInfinitive(r, e, a);\n    }\n    this.root = r;\n};\nvar F = {};\nconst C = n, B = /[\\s-]/, G = /^[A-Z-]+$/;\nF.textOut = function(e, t, r) {\n    e = e || {};\n    let a = this.text, n = this.pre, i = this.post;\n    return !0 === e.reduced && (a = this.reduced || \"\"), !0 === e.root && (a = this.root || \"\"), !0 === e.implicit && this.implicit && (a = this.implicit || \"\"), !0 === e.normal && (a = this.clean || this.text || \"\"), !0 === e.root && (a = this.root || this.reduced || \"\"), !0 === e.unicode && (a = C(a)), !0 === e.titlecase && (this.tags.ProperNoun && !this.titleCase() || (this.tags.Acronym ? a = a.toUpperCase() : G.test(a) && !this.tags.Acronym && (a = a.toLowerCase()))), !0 === e.lowercase && (a = a.toLowerCase()), !0 === e.acronyms && this.tags.Acronym && (a = a.replace(/\\./g, \"\")), !0 !== e.whitespace && !0 !== e.root || (n = \"\", i = \" \", !1 !== B.test(this.post) && !e.last || this.implicit || (i = \"\")), !0 !== e.punctuation || e.root || (!0 === this.hasPost(\".\") ? i = \".\" + i : !0 === this.hasPost(\"?\") ? i = \"?\" + i : !0 === this.hasPost(\"!\") ? i = \"!\" + i : !0 === this.hasPost(\",\") ? i = \",\" + i : !0 === this.hasEllipses() && (i = \"...\" + i)), !0 !== t && (n = \"\"), !0 !== r && (i = \"\"), !0 === e.abbreviations && this.tags.Abbreviation && (i = i.replace(/^\\./, \"\")), n + a + i;\n};\nvar z = {};\nconst I = {\n    Auxiliary: 1,\n    Possessive: 1\n};\nconst O = function(e, t) {\n    let r = Object.keys(e.tags);\n    const a = t.tags;\n    return r = r.sort((e, t)=>I[t] || !a[t] ? -1 : a[t] ? a[e] ? a[e].lineage.length > a[t].lineage.length ? 1 : a[e].isA.length > a[t].isA.length ? -1 : 0 : 0 : 1), r;\n}, T = {\n    text: !0,\n    tags: !0,\n    implicit: !0,\n    whitespace: !0,\n    clean: !1,\n    id: !1,\n    index: !1,\n    offset: !1,\n    bestTag: !1\n};\nz.json = function(e, t) {\n    e = e || {};\n    let r = {};\n    return (e = Object.assign({}, T, e)).text && (r.text = this.text), e.normal && (r.normal = this.clean), e.tags && (r.tags = Object.keys(this.tags)), e.clean && (r.clean = this.clean), (e.id || e.offset) && (r.id = this.id), e.implicit && null !== this.implicit && (r.implicit = this.implicit), e.whitespace && (r.pre = this.pre, r.post = this.post), e.bestTag && (r.bestTag = O(this, t)[0]), r;\n};\nvar V = Object.assign({}, D, $, P, F, z), M = {}, J = {};\nfunction L() {\n    return  false && 0;\n}\nconst S = function(e, t) {\n    for(e = e.toString(); e.length < t;)e += \" \";\n    return e;\n};\nJ.logTag = function(e, t, r) {\n    if (L()) return void console.log(\"%c\" + S(e.clean, 3) + \"  + \" + t + \" \", \"color: #6accb2;\");\n    let a = \"\\x1b[33m\" + S(e.clean, 15) + \"\\x1b[0m + \\x1b[32m\" + t + \"\\x1b[0m \";\n    r && (a = S(a, 35) + \" \" + r), console.log(a);\n}, J.logUntag = function(e, t, r) {\n    if (L()) return void console.log(\"%c\" + S(e.clean, 3) + \"  - \" + t + \" \", \"color: #AB5850;\");\n    let a = \"\\x1b[33m\" + S(e.clean, 3) + \" \\x1b[31m - #\" + t + \"\\x1b[0m \";\n    r && (a = S(a, 35) + \" \" + r), console.log(a);\n}, J.isArray = function(e) {\n    return \"[object Array]\" === Object.prototype.toString.call(e);\n}, J.titleCase = (e)=>e.charAt(0).toUpperCase() + e.substr(1);\nconst _ = J, K = function(e, t, r, a) {\n    let n = a.tags;\n    if (\"\" === t || \".\" === t || \"-\" === t) return;\n    if (\"#\" === t[0] && (t = t.replace(/^#/, \"\")), t = _.titleCase(t), !0 === e.tags[t]) return;\n    const i = a.isVerbose();\n    !0 === i && _.logTag(e, t, r), e.tags[t] = !0, !0 === n.hasOwnProperty(t) && (n[t].isA.forEach((t)=>{\n        e.tags[t] = !0, !0 === i && _.logTag(e, \"→ \" + t);\n    }), e.unTag(n[t].notA, \"←\", a));\n};\nconst q = J, W = /^[a-z]/, R = function(e, t, r, a) {\n    const n = a.isVerbose();\n    if (\"*\" === t) return e.tags = {}, e;\n    var i;\n    t = t.replace(/^#/, \"\"), !0 === W.test(t) && (t = (i = t).charAt(0).toUpperCase() + i.substr(1)), !0 === e.tags[t] && (delete e.tags[t], !0 === n && q.logUntag(e, t, r));\n    const o = a.tags;\n    if (o[t]) {\n        let r = o[t].lineage;\n        for(let t = 0; t < r.length; t++)!0 === e.tags[r[t]] && (delete e.tags[r[t]], !0 === n && q.logUntag(e, \" - \" + r[t]));\n    }\n    return e;\n};\nconst U = function(e, t, r) {\n    const a = r.tags;\n    if (\"#\" === t[0] && (t = t.replace(/^#/, \"\")), void 0 === a[t]) return !0;\n    let n = a[t].notA || [];\n    for(let t = 0; t < n.length; t++)if (!0 === e.tags[n[t]]) return !1;\n    return void 0 === a[t].isA || U(e, a[t].isA, r);\n};\nconst Q = function(e, t, r, a) {\n    if (\"string\" != typeof t) for(let n = 0; n < t.length; n++)K(e, t[n], r, a);\n    else K(e, t, r, a);\n}, Z = function(e, t, r, a) {\n    if (\"string\" != typeof t && t) for(let n = 0; n < t.length; n++)R(e, t[n], r, a);\n    else R(e, t, r, a);\n}, X = U;\nM.tag = function(e, t, r) {\n    return Q(this, e, t, r), this;\n}, M.tagSafe = function(e, t, r) {\n    return X(this, e, r) && Q(this, e, t, r), this;\n}, M.unTag = function(e, t, r) {\n    return Z(this, e, t, r), this;\n}, M.canBe = function(e, t) {\n    return X(this, e, t);\n};\nconst Y = t, ee = A, te = V, re = M;\nclass ae {\n    constructor(e = \"\"){\n        e = String(e);\n        let t = ee(e);\n        this.text = t.text || \"\", this.clean = t.clean, this.reduced = t.reduced, this.root = null, this.implicit = null, this.pre = t.pre || \"\", this.post = t.post || \"\", this.tags = {}, this.prev = null, this.next = null, this.id = Y(t.clean), this.isA = \"Term\", t.alias && (this.alias = t.alias);\n    }\n    set(e) {\n        let t = ee(e);\n        return this.text = t.text, this.clean = t.clean, this.reduced = t.reduced, this.root = null, this.implicit = null, this;\n    }\n}\nae.prototype.clone = function() {\n    let e = new ae(this.text);\n    return e.pre = this.pre, e.post = this.post, e.clean = this.clean, e.reduced = this.reduced, e.root = this.root, e.implicit = this.implicit, e.tags = Object.assign({}, this.tags), e;\n}, Object.assign(ae.prototype, te), Object.assign(ae.prototype, re);\nvar ne = ae, ie = {\n    terms: function(e) {\n        if (0 === this.length) return [];\n        if (this.cache.terms) return void 0 !== e ? this.cache.terms[e] : this.cache.terms;\n        let t = [\n            this.pool.get(this.start)\n        ];\n        for(let r = 0; r < this.length - 1; r += 1){\n            let a = t[t.length - 1].next;\n            if (null === a) {\n                console.error(\"Compromise error: Linked list broken in phrase '\" + this.start + \"'\");\n                break;\n            }\n            let n = this.pool.get(a);\n            if (t.push(n), void 0 !== e && e === r) return t[e];\n        }\n        return void 0 === e && (this.cache.terms = t), void 0 !== e ? t[e] : t;\n    },\n    clone: function(e) {\n        if (e) {\n            let e = this.buildFrom(this.start, this.length);\n            return e.cache = this.cache, e;\n        }\n        let t = this.terms().map((e)=>e.clone());\n        return t.forEach((e, r)=>{\n            this.pool.add(e), t[r + 1] && (e.next = t[r + 1].id), t[r - 1] && (e.prev = t[r - 1].id);\n        }), this.buildFrom(t[0].id, t.length);\n    },\n    lastTerm: function() {\n        let e = this.terms();\n        return e[e.length - 1];\n    },\n    hasId: function(e) {\n        if (0 === this.length || !e) return !1;\n        if (this.start === e) return !0;\n        if (this.cache.terms) {\n            let t = this.cache.terms;\n            for(let r = 0; r < t.length; r++)if (t[r].id === e) return !0;\n            return !1;\n        }\n        let t = this.start;\n        for(let r = 0; r < this.length - 1; r += 1){\n            let r = this.pool.get(t);\n            if (void 0 === r) return console.error(`Compromise error: Linked list broken. Missing term '${t}' in phrase '${this.start}'\\n`), !1;\n            if (r.next === e) return !0;\n            t = r.next;\n        }\n        return !1;\n    },\n    wordCount: function() {\n        return this.terms().filter((e)=>\"\" !== e.text).length;\n    },\n    fullSentence: function() {\n        let e = this.terms(0);\n        for(; e.prev;)e = this.pool.get(e.prev);\n        let t = e.id, r = 1;\n        for(; e.next;)e = this.pool.get(e.next), r += 1;\n        return this.buildFrom(t, r);\n    }\n}, oe = {};\noe.text = function(e = {}, t, r) {\n    \"string\" == typeof e && (e = \"normal\" === e ? {\n        whitespace: !0,\n        unicode: !0,\n        lowercase: !0,\n        punctuation: !0,\n        acronyms: !0,\n        abbreviations: !0,\n        implicit: !0,\n        normal: !0\n    } : \"clean\" === e ? {\n        titlecase: !1,\n        lowercase: !0,\n        punctuation: !0,\n        whitespace: !0,\n        unicode: !0,\n        implicit: !0,\n        normal: !0\n    } : \"reduced\" === e ? {\n        punctuation: !1,\n        titlecase: !1,\n        lowercase: !0,\n        whitespace: !0,\n        unicode: !0,\n        implicit: !0,\n        reduced: !0\n    } : \"implicit\" === e ? {\n        punctuation: !0,\n        implicit: !0,\n        whitespace: !0,\n        trim: !0\n    } : \"root\" === e ? {\n        titlecase: !1,\n        lowercase: !0,\n        punctuation: !0,\n        whitespace: !0,\n        unicode: !0,\n        implicit: !0,\n        root: !0\n    } : {});\n    let a = this.terms(), n = !1;\n    a[0] && null === a[0].prev && null === a[a.length - 1].next && (n = !0);\n    let i = a.reduce((i, o, s)=>{\n        if (0 === s && \"\" === o.text && null !== o.implicit && !e.implicit) return i;\n        e.last = r && s === a.length - 1;\n        let l = !0, u = !0;\n        return !1 === n && (0 === s && t && (l = !1), s === a.length - 1 && r && (u = !1)), i + o.textOut(e, l, u);\n    }, \"\");\n    return !0 === n && r && (i = i.replace(/ +$/, \"\")), !0 === e.trim && (i = i.trim()), i;\n};\nvar se = {\n    trim: function() {\n        let e = this.terms();\n        if (e.length > 0) {\n            e[0].pre = e[0].pre.replace(/^\\s+/, \"\");\n            let t = e[e.length - 1];\n            t.post = t.post.replace(/\\s+$/, \"\");\n        }\n        return this;\n    }\n}, le = {};\nconst ue = /[.?!]\\s*$/, ce = function(e, t) {\n    t[0].pre = e[0].pre;\n    let r = e[e.length - 1], a = t[t.length - 1];\n    a.post = function(e, t) {\n        if (ue.test(t)) return t + e.match(/\\s*$/);\n        return e;\n    }(r.post, a.post), r.post = \"\", \"\" === r.post && (r.post += \" \");\n};\nconst he = / /;\nconst de = function(e, t, r) {\n    let a = e.terms(), n = t.terms();\n    ce(a, n), function(e, t, r) {\n        let a = e[e.length - 1], n = t[t.length - 1], i = a.next;\n        a.next = t[0].id, n.next = i, i && (r.get(i).prev = n.id);\n        let o = e[0].id;\n        o && (t[0].prev = o);\n    }(a, n, e.pool);\n    let i = [\n        e\n    ], o = e.start, s = [\n        r\n    ];\n    return s = s.concat(r.parents()), s.forEach((e)=>{\n        let t = e.list.filter((e)=>e.hasId(o));\n        i = i.concat(t);\n    }), i = function(e) {\n        return e.filter((t, r)=>e.indexOf(t) === r);\n    }(i), i.forEach((e)=>{\n        e.length += t.length;\n    }), e.cache = {}, e;\n}, ge = function(e, t, r) {\n    const a = e.start;\n    let n = t.terms();\n    !function(e) {\n        let t = e[e.length - 1];\n        !1 === he.test(t.post) && (t.post += \" \");\n    }(n), function(e, t, r) {\n        let a = r[r.length - 1];\n        a.next = e.start;\n        let n = e.pool, i = n.get(e.start);\n        i.prev && (n.get(i.prev).next = t.start);\n        r[0].prev = e.terms(0).prev, e.terms(0).prev = a.id;\n    }(e, t, n);\n    let i = [\n        e\n    ], o = [\n        r\n    ];\n    return o = o.concat(r.parents()), o.forEach((e)=>{\n        let r = e.list.filter((e)=>e.hasId(a) || e.hasId(t.start));\n        i = i.concat(r);\n    }), i = function(e) {\n        return e.filter((t, r)=>e.indexOf(t) === r);\n    }(i), i.forEach((e)=>{\n        e.length += t.length, e.start === a && (e.start = t.start), e.cache = {};\n    }), e;\n}, pe = function(e, t) {\n    let r = t.pool(), a = e.terms(), n = r.get(a[0].prev) || {}, i = r.get(a[a.length - 1].next) || {};\n    a[0].implicit && n.implicit && (n.set(n.implicit), n.post += \" \"), function(e, t, r, a) {\n        let n = e.parents();\n        n.push(e), n.forEach((e)=>{\n            let n = e.list.find((e)=>e.hasId(t));\n            n && (n.length -= r, n.start === t && (n.start = a.id), n.cache = {});\n        }), e.list = e.list.filter((e)=>!(!e.start || !e.length));\n    }(t, e.start, e.length, i), n && (n.next = i.id), i && (i.prev = n.id);\n};\nle.append = function(e, t) {\n    return de(this, e, t), this;\n}, le.prepend = function(e, t) {\n    return ge(this, e, t), this;\n}, le.delete = function(e) {\n    return pe(this, e), this;\n}, le.replace = function(e, t) {\n    let r = this.length;\n    de(this, e, t);\n    let a = this.buildFrom(this.start, this.length);\n    a.length = r, pe(a, t);\n}, le.splitOn = function(e) {\n    let t = this.terms(), r = {\n        before: null,\n        match: null,\n        after: null\n    }, a = t.findIndex((t)=>t.id === e.start);\n    if (-1 === a) return r;\n    let n = t.slice(0, a);\n    n.length > 0 && (r.before = this.buildFrom(n[0].id, n.length));\n    let i = t.slice(a, a + e.length);\n    i.length > 0 && (r.match = this.buildFrom(i[0].id, i.length));\n    let o = t.slice(a + e.length, t.length);\n    return o.length > 0 && (r.after = this.buildFrom(o[0].id, o.length, this.pool)), r;\n};\nvar me = {\n    json: function(e = {}, t) {\n        let r = {};\n        return e.text && (r.text = this.text()), e.normal && (r.normal = this.text(\"normal\")), e.clean && (r.clean = this.text(\"clean\")), e.reduced && (r.reduced = this.text(\"reduced\")), e.implicit && (r.implicit = this.text(\"implicit\")), e.root && (r.root = this.text(\"root\")), e.trim && (r.text && (r.text = r.text.trim()), r.normal && (r.normal = r.normal.trim()), r.reduced && (r.reduced = r.reduced.trim())), e.terms && (!0 === e.terms && (e.terms = {}), r.terms = this.terms().map((r)=>r.json(e.terms, t))), r;\n    }\n}, fe = {\n    lookAhead: function(e) {\n        e || (e = \".*\");\n        let t = this.pool, r = [];\n        const a = function(e) {\n            let n = t.get(e);\n            n && (r.push(n), n.prev && a(n.next));\n        };\n        let n = this.terms(), i = n[n.length - 1];\n        return a(i.next), 0 === r.length ? [] : this.buildFrom(r[0].id, r.length).match(e);\n    },\n    lookBehind: function(e) {\n        e || (e = \".*\");\n        let t = this.pool, r = [];\n        const a = function(e) {\n            let n = t.get(e);\n            n && (r.push(n), n.prev && a(n.prev));\n        };\n        let n = t.get(this.start);\n        return a(n.prev), 0 === r.length ? [] : this.buildFrom(r[r.length - 1].id, r.length).match(e);\n    }\n}, be = Object.assign({}, ie, oe, se, le, me, fe), ye = {};\nvar ve, we = function(e, t) {\n    if (0 === t.length) return !0;\n    for(let e = 0; e < t.length; e += 1){\n        let r = t[e];\n        if (!0 !== r.optional && !0 !== r.negative && !0 === r.start && e > 0) return !0;\n        if (!0 === r.anything && !0 === r.negative) return !0;\n    }\n    return !1;\n}, ke = {};\n(ve = ke).getGreedy = function(e, t) {\n    let r = Object.assign({}, e.regs[e.r], {\n        start: !1,\n        end: !1\n    }), a = e.t;\n    for(; e.t < e.terms.length; e.t += 1){\n        if (t && e.terms[e.t].doesMatch(t, e.start_i + e.t, e.phrase_length)) return e.t;\n        let n = e.t - a + 1;\n        if (void 0 !== r.max && n === r.max) return e.t;\n        if (!1 === e.terms[e.t].doesMatch(r, e.start_i + e.t, e.phrase_length)) return void 0 !== r.min && n < r.min ? null : e.t;\n    }\n    return e.t;\n}, ve.greedyTo = function(e, t) {\n    let r = e.t;\n    if (!t) return e.terms.length;\n    for(; r < e.terms.length; r += 1)if (!0 === e.terms[r].doesMatch(t, e.start_i + r, e.phrase_length)) return r;\n    return null;\n}, ve.isEndGreedy = function(e, t) {\n    if (!0 === e.end && !0 === e.greedy && t.start_i + t.t < t.phrase_length - 1) {\n        let r = Object.assign({}, e, {\n            end: !1\n        });\n        if (!0 === t.terms[t.t].doesMatch(r, t.start_i + t.t, t.phrase_length)) return !0;\n    }\n    return !1;\n}, ve.doOrBlock = function(e, t = 0) {\n    let r = e.regs[e.r], a = !1;\n    for(let n = 0; n < r.choices.length; n += 1){\n        let i = r.choices[n];\n        if (a = i.every((r, a)=>{\n            let n = 0, i = e.t + a + t + n;\n            if (void 0 === e.terms[i]) return !1;\n            let o = e.terms[i].doesMatch(r, i + e.start_i, e.phrase_length);\n            if (!0 === o && !0 === r.greedy) for(let t = 1; t < e.terms.length; t += 1){\n                let a = e.terms[i + t];\n                if (a) {\n                    if (!0 !== a.doesMatch(r, e.start_i + t, e.phrase_length)) break;\n                    n += 1;\n                }\n            }\n            return t += n, o;\n        }), a) {\n            t += i.length;\n            break;\n        }\n    }\n    return a && !0 === r.greedy ? ve.doOrBlock(e, t) : t;\n}, ve.doAndBlock = function(e) {\n    let t = 0;\n    return !0 === e.regs[e.r].choices.every((r)=>{\n        let a = r.every((t, r)=>{\n            let a = e.t + r;\n            return void 0 !== e.terms[a] && e.terms[a].doesMatch(t, a, e.phrase_length);\n        });\n        return !0 === a && r.length > t && (t = r.length), a;\n    }) && t;\n}, ve.getGroup = function(e, t, r) {\n    if (e.groups[e.groupId]) return e.groups[e.groupId];\n    const a = e.terms[t].id;\n    return e.groups[e.groupId] = {\n        group: String(r),\n        start: a,\n        length: 0\n    }, e.groups[e.groupId];\n};\nconst Ae = t, De = ke;\nvar $e = function(e, t, r, a) {\n    let n = {\n        t: 0,\n        terms: e,\n        r: 0,\n        regs: t,\n        groups: {},\n        start_i: r,\n        phrase_length: a,\n        hasGroup: !1,\n        groupId: null,\n        previousGroup: null\n    };\n    for(; n.r < t.length; n.r += 1){\n        let e = t[n.r];\n        if (n.hasGroup = \"string\" == typeof e.named || \"number\" == typeof e.named, !0 === n.hasGroup) {\n            const r = t[n.r - 1];\n            r && r.named === e.named && n.previousGroup ? n.groupId = n.previousGroup : (n.groupId = Ae(e.named), n.previousGroup = n.groupId);\n        }\n        if (!n.terms[n.t]) {\n            if (!1 === t.slice(n.r).some((e)=>!e.optional)) break;\n            return null;\n        }\n        if (!0 === e.anything && !0 === e.greedy) {\n            let r = De.greedyTo(n, t[n.r + 1]);\n            if (null === r || 0 === r) return null;\n            if (void 0 !== e.min && r - n.t < e.min) return null;\n            if (void 0 !== e.max && r - n.t > e.max) {\n                n.t = n.t + e.max;\n                continue;\n            }\n            if (!0 === n.hasGroup) {\n                De.getGroup(n, n.t, e.named).length = r - n.t;\n            }\n            n.t = r;\n            continue;\n        }\n        if (void 0 !== e.choices && \"or\" === e.operator) {\n            let t = De.doOrBlock(n);\n            if (t) {\n                if (!0 === e.negative) return null;\n                if (!0 === n.hasGroup) {\n                    De.getGroup(n, n.t, e.named).length += t;\n                }\n                n.t += t;\n                continue;\n            }\n            if (!e.optional) return null;\n        }\n        if (void 0 !== e.choices && \"and\" === e.operator) {\n            let t = De.doAndBlock(n);\n            if (t) {\n                if (!0 === e.negative) return null;\n                if (!0 === n.hasGroup) {\n                    De.getGroup(n, n.t, e.named).length += t;\n                }\n                n.t += t;\n                continue;\n            }\n            if (!e.optional) return null;\n        }\n        let r = n.terms[n.t], i = r.doesMatch(e, n.start_i + n.t, n.phrase_length);\n        if (!0 === e.anything || !0 === i || De.isEndGreedy(e, n)) {\n            let i = n.t;\n            if (e.optional && t[n.r + 1] && e.negative) continue;\n            if (e.optional && t[n.r + 1]) {\n                let a = r.doesMatch(t[n.r + 1], n.start_i + n.t, n.phrase_length);\n                if (e.negative || a) {\n                    let e = n.terms[n.t + 1];\n                    e && e.doesMatch(t[n.r + 1], n.start_i + n.t, n.phrase_length) || (n.r += 1);\n                }\n            }\n            if (n.t += 1, !0 === e.end && n.t !== n.terms.length && !0 !== e.greedy) return null;\n            if (!0 === e.greedy) {\n                if (n.t = De.getGreedy(n, t[n.r + 1]), null === n.t) return null;\n                if (e.min && e.min > n.t) return null;\n                if (!0 === e.end && n.start_i + n.t !== a) return null;\n            }\n            if (!0 === n.hasGroup) {\n                const t = De.getGroup(n, i, e.named);\n                n.t > 1 && e.greedy ? t.length += n.t - i : t.length++;\n            }\n        } else {\n            if (e.negative) {\n                let t = Object.assign({}, e);\n                if (t.negative = !1, !0 === n.terms[n.t].doesMatch(t, n.start_i + n.t, n.phrase_length)) return null;\n            }\n            if (!0 !== e.optional) {\n                if (n.terms[n.t].isImplicit() && t[n.r - 1] && n.terms[n.t + 1]) {\n                    if (n.terms[n.t - 1] && n.terms[n.t - 1].implicit === t[n.r - 1].word) return null;\n                    if (n.terms[n.t + 1].doesMatch(e, n.start_i + n.t, n.phrase_length)) {\n                        n.t += 2;\n                        continue;\n                    }\n                }\n                return null;\n            }\n        }\n    }\n    return {\n        match: n.terms.slice(0, n.t),\n        groups: n.groups\n    };\n};\nvar Pe = function(e, t, r) {\n    if (!r || 0 === r.length) return r;\n    if (t.some((e)=>e.end)) {\n        let t = e[e.length - 1];\n        r = r.filter(({ match: e })=>-1 !== e.indexOf(t));\n    }\n    return r;\n};\nconst Ee = /(?:^|\\s)([\\!\\[\\^]*(?:<[^<]*>)?\\/.*?[^\\\\\\/]\\/[\\?\\]\\+\\*\\$~]*)(?:\\s|$)/, He = /([\\!\\[\\^]*(?:<[^<]*>)?\\([^\\)]+[^\\\\\\)]\\)[\\?\\]\\+\\*\\$~]*)(?:\\s|$)/, je = / /g, Ne = (e)=>/^[\\!\\[\\^]*(<[^<]*>)?\\//.test(e) && /\\/[\\?\\]\\+\\*\\$~]*$/.test(e), xe = function(e) {\n    return e = (e = e.map((e)=>e.trim())).filter((e)=>e);\n};\nvar Fe = function(e) {\n    let t = e.split(Ee), r = [];\n    t.forEach((e)=>{\n        Ne(e) ? r.push(e) : r = r.concat(e.split(He));\n    }), r = xe(r);\n    let a = [];\n    return r.forEach((e)=>{\n        ((e)=>/^[\\!\\[\\^]*(<[^<]*>)?\\(/.test(e) && /\\)[\\?\\]\\+\\*\\$~]*$/.test(e))(e) || Ne(e) ? a.push(e) : a = a.concat(e.split(je));\n    }), a = xe(a), a;\n};\nconst Ce = /\\{([0-9]+,?[0-9]*)\\}/, Be = /&&/, Ge = new RegExp(/^<\\s*?(\\S+)\\s*?>/), ze = function(e) {\n    return e[e.length - 1];\n}, Ie = function(e) {\n    return e[0];\n}, Oe = function(e) {\n    return e.substr(1);\n}, Te = function(e) {\n    return e.substr(0, e.length - 1);\n}, Ve = function(e) {\n    return e = Oe(e), e = Te(e);\n}, Me = function(e) {\n    let t = {};\n    for(let r = 0; r < 2; r += 1){\n        if (\"$\" === ze(e) && (t.end = !0, e = Te(e)), \"^\" === Ie(e) && (t.start = !0, e = Oe(e)), (\"[\" === Ie(e) || \"]\" === ze(e)) && (t.named = !0, \"[\" === Ie(e) ? t.groupType = \"]\" === ze(e) ? \"single\" : \"start\" : t.groupType = \"end\", e = (e = e.replace(/^\\[/, \"\")).replace(/\\]$/, \"\"), \"<\" === Ie(e))) {\n            const r = Ge.exec(e);\n            r.length >= 2 && (t.named = r[1], e = e.replace(r[0], \"\"));\n        }\n        if (\"+\" === ze(e) && (t.greedy = !0, e = Te(e)), \"*\" !== e && \"*\" === ze(e) && \"\\\\*\" !== e && (t.greedy = !0, e = Te(e)), \"?\" === ze(e) && (t.optional = !0, e = Te(e)), \"!\" === Ie(e) && (t.negative = !0, e = Oe(e)), \"(\" === Ie(e) && \")\" === ze(e)) {\n            Be.test(e) ? (t.choices = e.split(Be), t.operator = \"and\") : (t.choices = e.split(\"|\"), t.operator = \"or\"), t.choices[0] = Oe(t.choices[0]);\n            let r = t.choices.length - 1;\n            t.choices[r] = Te(t.choices[r]), t.choices = t.choices.map((e)=>e.trim()), t.choices = t.choices.filter((e)=>e), t.choices = t.choices.map((e)=>e.split(/ /g).map(Me)), e = \"\";\n        }\n        if (\"/\" === Ie(e) && \"/\" === ze(e)) return e = Ve(e), t.regex = new RegExp(e), t;\n        if (\"~\" === Ie(e) && \"~\" === ze(e)) return e = Ve(e), t.soft = !0, t.word = e, t;\n    }\n    return !0 === Ce.test(e) && (e = e.replace(Ce, (e, r)=>{\n        let a = r.split(/,/g);\n        return 1 === a.length ? (t.min = Number(a[0]), t.max = Number(a[0])) : (t.min = Number(a[0]), t.max = Number(a[1] || 999)), t.greedy = !0, t.optional = !0, \"\";\n    })), \"#\" === Ie(e) ? (t.tag = Oe(e), t.tag = (r = t.tag).charAt(0).toUpperCase() + r.substr(1), t) : \"@\" === Ie(e) ? (t.method = Oe(e), t) : \".\" === e ? (t.anything = !0, t) : \"*\" === e ? (t.anything = !0, t.greedy = !0, t.optional = !0, t) : (e && (e = (e = e.replace(\"\\\\*\", \"*\")).replace(\"\\\\.\", \".\"), t.word = e.toLowerCase()), t);\n    var r;\n};\nconst Je = Fe, Le = Me, Se = function(e, t = {}) {\n    return e.filter((e)=>e.groupType).length > 0 && (e = function(e) {\n        let t, r = !1, a = -1;\n        for(let n = 0; n < e.length; n++){\n            const i = e[n];\n            \"single\" !== i.groupType || !0 !== i.named ? (\"start\" === i.groupType && (r = !0, \"string\" == typeof i.named || \"number\" == typeof i.named ? t = i.named : (a += 1, t = a)), r && (i.named = t), \"end\" === i.groupType && (r = !1)) : (a += 1, i.named = a);\n        }\n        return e;\n    }(e)), t.fuzzy || (e = function(e) {\n        return e.map((e)=>{\n            if (void 0 !== e.choices && !0 === e.choices.every((e)=>{\n                if (1 !== e.length) return !1;\n                let t = e[0];\n                return void 0 !== t.word && !0 !== t.negative && !0 !== t.optional && !0 !== t.method;\n            })) {\n                let t = {};\n                e.choices.forEach((e)=>{\n                    t[e[0].word] = !0;\n                }), e.fastOr = t, delete e.choices;\n            }\n            return e;\n        });\n    }(e)), e;\n};\nvar _e = function(e, t = {}) {\n    if (null == e || \"\" === e) return [];\n    if (\"object\" == typeof e) {\n        if (function(e) {\n            return \"[object Array]\" === Object.prototype.toString.call(e);\n        }(e)) {\n            if (0 === e.length || !e[0]) return [];\n            if (\"object\" == typeof e[0]) return e;\n            if (\"string\" == typeof e[0]) return function(e) {\n                return [\n                    {\n                        choices: e.map((e)=>[\n                                {\n                                    word: e\n                                }\n                            ]),\n                        operator: \"or\"\n                    }\n                ];\n            }(e);\n        }\n        return e && \"Doc\" === e.isA ? function(e) {\n            if (!e || !e.list || !e.list[0]) return [];\n            let t = [];\n            return e.list.forEach((e)=>{\n                let r = [];\n                e.terms().forEach((e)=>{\n                    r.push(e.id);\n                }), t.push(r);\n            }), [\n                {\n                    idBlocks: t\n                }\n            ];\n        }(e) : [];\n    }\n    \"number\" == typeof e && (e = String(e));\n    let r = Je(e);\n    return r = r.map((e)=>Le(e)), r = Se(r, t), r = function(e, t) {\n        return !0 === t.fuzzy && (t.fuzzy = .85), \"number\" == typeof t.fuzzy && (e = e.map((e)=>(t.fuzzy > 0 && e.word && (e.fuzzy = t.fuzzy), e.choices && e.choices.forEach((e)=>{\n                e.forEach((e)=>{\n                    e.fuzzy = t.fuzzy;\n                });\n            }), e))), e;\n    }(r, t), r;\n};\nconst Ke = we, qe = $e, We = Pe, Re = _e, Ue = function(e, t) {\n    let r = [], a = t[0].idBlocks;\n    for(let t = 0; t < e.length; t += 1)a.forEach((a)=>{\n        if (0 === a.length) return;\n        a.every((r, a)=>e[t + a].id === r) && (r.push({\n            match: e.slice(t, t + a.length)\n        }), t += a.length - 1);\n    });\n    return r;\n};\nvar Qe = function(e, t, r = !1) {\n    if (\"string\" == typeof t && (t = Re(t)), !0 === Ke(e, t)) return [];\n    const a = t.filter((e)=>!0 !== e.optional && !0 !== e.negative).length;\n    let n = e.terms(), i = [];\n    if (t[0].idBlocks) {\n        let e = Ue(n, t);\n        if (e && e.length > 0) return We(n, t, e);\n    }\n    if (!0 === t[0].start) {\n        let e = qe(n, t, 0, n.length);\n        return e && e.match && e.match.length > 0 && (e.match = e.match.filter((e)=>e), i.push(e)), We(n, t, i);\n    }\n    for(let e = 0; e < n.length && !(e + a > n.length); e += 1){\n        let a = qe(n.slice(e), t, e, n.length);\n        if (a && a.match && a.match.length > 0 && (e += a.match.length - 1, a.match = a.match.filter((e)=>e), i.push(a), !0 === r)) return We(n, t, i);\n    }\n    return We(n, t, i);\n};\nconst Ze = Qe;\nconst Xe = Qe, Ye = function(e, t) {\n    let r = {};\n    Ze(e, t).forEach(({ match: e })=>{\n        e.forEach((e)=>{\n            r[e.id] = !0;\n        });\n    });\n    let a = e.terms(), n = [], i = [];\n    return a.forEach((e)=>{\n        !0 !== r[e.id] ? i.push(e) : i.length > 0 && (n.push(i), i = []);\n    }), i.length > 0 && n.push(i), n;\n};\nye.match = function(e, t = !1) {\n    let r = Xe(this, e, t);\n    return r = r.map(({ match: e, groups: t })=>{\n        let r = this.buildFrom(e[0].id, e.length, t);\n        return r.cache.terms = e, r;\n    }), r;\n}, ye.has = function(e) {\n    return Xe(this, e, !0).length > 0;\n}, ye.not = function(e) {\n    let t = Ye(this, e);\n    return t = t.map((e)=>this.buildFrom(e[0].id, e.length)), t;\n}, ye.canBe = function(e, t) {\n    let r = [], a = this.terms(), n = !1;\n    for(let i = 0; i < a.length; i += 1){\n        let o = a[i].canBe(e, t);\n        !0 === o && (!0 === n ? r[r.length - 1].push(a[i]) : r.push([\n            a[i]\n        ]), n = o);\n    }\n    return r = r.filter((e)=>e.length > 0).map((e)=>this.buildFrom(e[0].id, e.length)), r;\n};\nconst et = be, tt = ye;\nclass rt {\n    constructor(e, t, r){\n        this.start = e, this.length = t, this.isA = \"Phrase\", Object.defineProperty(this, \"pool\", {\n            enumerable: !1,\n            writable: !0,\n            value: r\n        }), Object.defineProperty(this, \"cache\", {\n            enumerable: !1,\n            writable: !0,\n            value: {}\n        }), Object.defineProperty(this, \"groups\", {\n            enumerable: !1,\n            writable: !0,\n            value: {}\n        });\n    }\n}\nrt.prototype.buildFrom = function(e, t, r) {\n    let a = new rt(e, t, this.pool);\n    return r && Object.keys(r).length > 0 ? a.groups = r : a.groups = this.groups, a;\n}, Object.assign(rt.prototype, tt), Object.assign(rt.prototype, et);\nconst at = {\n    term: \"terms\"\n};\nObject.keys(at).forEach((e)=>rt.prototype[e] = rt.prototype[at[e]]);\nvar nt = rt;\nclass it {\n    constructor(e = {}){\n        Object.defineProperty(this, \"words\", {\n            enumerable: !1,\n            value: e\n        });\n    }\n    add(e) {\n        return this.words[e.id] = e, this;\n    }\n    get(e) {\n        return this.words[e];\n    }\n    remove(e) {\n        delete this.words[e];\n    }\n    merge(e) {\n        return Object.assign(this.words, e.words), this;\n    }\n    stats() {\n        return {\n            words: Object.keys(this.words).length\n        };\n    }\n}\nit.prototype.clone = function() {\n    let e = Object.keys(this.words).reduce((e, t)=>{\n        let r = this.words[t].clone();\n        return e[r.id] = r, e;\n    }, {});\n    return new it(e);\n};\nvar ot = it;\nvar st = (e)=>{\n    e.forEach((t, r)=>{\n        r > 0 && (t.prev = e[r - 1].id), e[r + 1] && (t.next = e[r + 1].id);\n    });\n};\nconst lt = /(\\S.+?[.!?\\u203D\\u2E18\\u203C\\u2047-\\u2049])(?=\\s+|$)/g, ut = /\\S/, ct = /[ .][A-Z]\\.? *$/i, ht = /(?:\\u2026|\\.{2,}) *$/, dt = /((?:\\r?\\n|\\r)+)/, gt = /[a-z0-9\\u00C0-\\u00FF\\u00a9\\u00ae\\u2000-\\u3300\\ud000-\\udfff]/i, pt = /^\\s+/, mt = function(e, t, r, a) {\n    if (a.hasLetter = function(e, t) {\n        return t || gt.test(e);\n    }(t, a.hasLetter), !a.hasLetter) return !1;\n    if (function(e, t) {\n        return -1 !== t.indexOf(\".\") && ct.test(e);\n    }(e, t)) return !1;\n    if (function(e, t) {\n        return -1 !== t.indexOf(\".\") && ht.test(e);\n    }(e, t)) return !1;\n    let n = e.replace(/[.!?\\u203D\\u2E18\\u203C\\u2047-\\u2049] *$/, \"\").split(\" \"), i = n[n.length - 1].toLowerCase();\n    return !r.hasOwnProperty(i);\n};\nvar ft = function(e, t) {\n    let r = t.cache.abbreviations;\n    e = e || \"\";\n    let a = [], n = [];\n    if (!(e = String(e)) || \"string\" != typeof e || !1 === ut.test(e)) return a;\n    let i = function(e) {\n        let t = [], r = e.split(dt);\n        for(let e = 0; e < r.length; e++){\n            let a = r[e].split(lt);\n            for(let e = 0; e < a.length; e++)t.push(a[e]);\n        }\n        return t;\n    }(e = e.replace(\"\\xa0\", \" \"));\n    for(let e = 0; e < i.length; e++){\n        let t = i[e];\n        if (void 0 !== t && \"\" !== t) {\n            if (!1 === ut.test(t)) {\n                if (n[n.length - 1]) {\n                    n[n.length - 1] += t;\n                    continue;\n                }\n                if (i[e + 1]) {\n                    i[e + 1] = t + i[e + 1];\n                    continue;\n                }\n            }\n            n.push(t);\n        }\n    }\n    let o = n[0] || \"\";\n    const s = {\n        hasLetter: !1\n    };\n    for(let e = 0; e < n.length; e++){\n        let t = n[e];\n        n[e + 1] && !1 === mt(t, o, r, s) ? (o = n[e + 1] || \"\", n[e + 1] = t + o) : t && t.length > 0 && (a.push(t), o = n[e + 1] || \"\", s.hasLetter = !1), n[e] = \"\";\n    }\n    if (0 === a.length) return [\n        e\n    ];\n    for(let e = 1; e < a.length; e += 1){\n        let t = a[e].match(pt);\n        null !== t && (a[e - 1] += t[0], a[e] = a[e].replace(pt, \"\"));\n    }\n    return a;\n};\nconst bt = /\\S/, yt = /^[!?.]+$/, vt = /(\\S+)/, wt = /[a-z] ?\\/ ?[a-z]*$/;\nlet kt = [\n    \".\",\n    \"?\",\n    \"!\",\n    \":\",\n    \";\",\n    \"-\",\n    \"–\",\n    \"—\",\n    \"--\",\n    \"...\",\n    \"(\",\n    \")\",\n    \"[\",\n    \"]\",\n    '\"',\n    \"'\",\n    \"`\"\n];\nkt = kt.reduce((e, t)=>(e[t] = !0, e), {});\nconst At = function(e) {\n    if (!0 === /^(re|un|micro|macro|trans|bi|mono|over)-?[^aeiou]./.test(e)) return !1;\n    if (!0 === /^([a-z\\u00C0-\\u00FF/]+)(-|–|—)(like|ish|less|able)/i.test(e)) return !1;\n    if (!0 === /^([a-z\\u00C0-\\u00FF`\"'/]+)(-|–|—)([a-z0-9\\u00C0-\\u00FF].*)/i.test(e)) return !0;\n    return !0 === /^([0-9]{1,4})(-|–|—)([a-z\\u00C0-\\u00FF`\"'/-]+$)/i.test(e);\n}, Dt = function(e) {\n    let t = [];\n    const r = e.split(/[-–—]/);\n    let a = \"-\", n = e.match(/[-–—]/);\n    n && n[0] && (a = n);\n    for(let e = 0; e < r.length; e++)e === r.length - 1 ? t.push(r[e]) : t.push(r[e] + a);\n    return t;\n};\nconst $t = ne, Pt = nt, Et = ot, Ht = st, jt = ft, Nt = function(e) {\n    let t = [], r = [];\n    if (\"number\" == typeof (e = e || \"\") && (e = String(e)), function(e) {\n        return \"[object Array]\" === Object.prototype.toString.call(e);\n    }(e)) return e;\n    const a = e.split(vt);\n    for(let e = 0; e < a.length; e++)!0 !== At(a[e]) ? r.push(a[e]) : r = r.concat(Dt(a[e]));\n    let n = \"\";\n    for(let e = 0; e < r.length; e++){\n        let a = r[e];\n        !0 === bt.test(a) && !1 === kt.hasOwnProperty(a) && !1 === yt.test(a) ? (t.length > 0 ? (t[t.length - 1] += n, t.push(a)) : t.push(n + a), n = \"\") : n += a;\n    }\n    return n && (0 === t.length && (t[0] = \"\"), t[t.length - 1] += n), t = function(e) {\n        for(let t = 1; t < e.length - 1; t++)wt.test(e[t]) && (e[t - 1] += e[t] + e[t + 1], e[t] = null, e[t + 1] = null);\n        return e;\n    }(t), t = function(e) {\n        const t = /^[0-9]{1,4}(:[0-9][0-9])?([a-z]{1,2})? ?(-|–|—) ?$/, r = /^[0-9]{1,4}([a-z]{1,2})? ?$/;\n        for(let a = 0; a < e.length - 1; a += 1)e[a + 1] && t.test(e[a]) && r.test(e[a + 1]) && (e[a] = e[a] + e[a + 1], e[a + 1] = null);\n        return e;\n    }(t), t = t.filter((e)=>e), t;\n};\nvar xt = function(e = \"\", t, r) {\n    let a = null;\n    return \"string\" != typeof e && (\"number\" == typeof e ? e = String(e) : function(e) {\n        return \"[object Array]\" === Object.prototype.toString.call(e);\n    }(e) && (a = e)), a = a || jt(e, t), a = a.map((e)=>Nt(e)), r = r || new Et, a.map((e)=>{\n        e = e.map((e)=>{\n            let t = new $t(e);\n            return r.add(t), t;\n        }), Ht(e);\n        let t = new Pt(e[0].id, e.length, r);\n        return t.cache.terms = e, t;\n    });\n};\nconst Ft = ne, Ct = nt, Bt = ot, Gt = st;\nvar zt = function(e, t) {\n    let r = new Bt;\n    return e.map((e, a)=>{\n        let n = e.terms.map((n, i)=>{\n            let o = new Ft(n.text);\n            return o.pre = void 0 !== n.pre ? n.pre : \"\", void 0 === n.post && (n.post = \" \", i >= e.terms.length - 1 && (n.post = \". \", a >= e.terms.length - 1 && (n.post = \".\"))), o.post = void 0 !== n.post ? n.post : \" \", n.tags && n.tags.forEach((e)=>o.tag(e, \"\", t)), r.add(o), o;\n        });\n        return Gt(n), new Ct(n[0].id, n.length, r);\n    });\n};\nconst It = [\n    \"Person\",\n    \"Place\",\n    \"Organization\"\n];\nconst Ot = [\n    \"Noun\",\n    \"Verb\",\n    \"Adjective\",\n    \"Adverb\",\n    \"Value\",\n    \"QuestionWord\"\n];\nconst Tt = {\n    Noun: \"blue\",\n    Verb: \"green\",\n    Negative: \"green\",\n    Date: \"red\",\n    Value: \"red\",\n    Adjective: \"magenta\",\n    Preposition: \"cyan\",\n    Conjunction: \"cyan\",\n    Determiner: \"cyan\",\n    Adverb: \"cyan\"\n};\nconst Vt = function(e) {\n    return Object.keys(e).forEach((t)=>{\n        e[t].color ? e[t].color = e[t].color : Tt[t] ? e[t].color = Tt[t] : e[t].isA.some((r)=>!!Tt[r] && (e[t].color = Tt[r], !0));\n    }), e;\n}, Mt = function(e) {\n    return Object.keys(e).forEach((t)=>{\n        let r = e[t], a = r.isA.length;\n        for(let t = 0; t < a; t++){\n            let a = r.isA[t];\n            e[a] && (r.isA = r.isA.concat(e[a].isA));\n        }\n        r.isA = function(e) {\n            return e.filter((e, t, r)=>r.indexOf(e) === t);\n        }(r.isA);\n    }), e;\n}, Jt = function(e) {\n    let t = Object.keys(e);\n    return t.forEach((r)=>{\n        let a = e[r];\n        a.notA = a.notA || [], a.isA.forEach((t)=>{\n            if (e[t] && e[t].notA) {\n                let r = \"string\" == typeof e[t].notA ? [\n                    e[t].isA\n                ] : e[t].notA || [];\n                a.notA = a.notA.concat(r);\n            }\n        });\n        for(let n = 0; n < t.length; n++){\n            const i = t[n];\n            -1 !== e[i].notA.indexOf(r) && a.notA.push(i);\n        }\n        a.notA = function(e) {\n            return e.filter((e, t, r)=>r.indexOf(e) === t);\n        }(a.notA);\n    }), e;\n}, Lt = function(e) {\n    let t = Object.keys(e);\n    return t.forEach((r)=>{\n        let a = e[r];\n        a.lineage = [];\n        for(let n = 0; n < t.length; n++)-1 !== e[t[n]].isA.indexOf(r) && a.lineage.push(t[n]);\n    }), e;\n};\nvar St = function(e) {\n    return e = function(e) {\n        return Object.keys(e).forEach((t)=>{\n            let r = e[t];\n            r.isA = r.isA || [], \"string\" == typeof r.isA && (r.isA = [\n                r.isA\n            ]), r.notA = r.notA || [], \"string\" == typeof r.notA && (r.notA = [\n                r.notA\n            ]);\n        }), e;\n    }(e), e = Mt(e), e = Jt(e), e = Vt(e), e = Lt(e);\n};\nconst _t = {\n    Noun: {\n        notA: [\n            \"Verb\",\n            \"Adjective\",\n            \"Adverb\"\n        ]\n    },\n    Singular: {\n        isA: \"Noun\",\n        notA: \"Plural\"\n    },\n    ProperNoun: {\n        isA: \"Noun\"\n    },\n    Person: {\n        isA: [\n            \"ProperNoun\",\n            \"Singular\"\n        ],\n        notA: [\n            \"Place\",\n            \"Organization\",\n            \"Date\"\n        ]\n    },\n    FirstName: {\n        isA: \"Person\"\n    },\n    MaleName: {\n        isA: \"FirstName\",\n        notA: [\n            \"FemaleName\",\n            \"LastName\"\n        ]\n    },\n    FemaleName: {\n        isA: \"FirstName\",\n        notA: [\n            \"MaleName\",\n            \"LastName\"\n        ]\n    },\n    LastName: {\n        isA: \"Person\",\n        notA: [\n            \"FirstName\"\n        ]\n    },\n    NickName: {\n        isA: \"Person\",\n        notA: [\n            \"FirstName\",\n            \"LastName\"\n        ]\n    },\n    Honorific: {\n        isA: \"Noun\",\n        notA: [\n            \"FirstName\",\n            \"LastName\",\n            \"Value\"\n        ]\n    },\n    Place: {\n        isA: \"Singular\",\n        notA: [\n            \"Person\",\n            \"Organization\"\n        ]\n    },\n    Country: {\n        isA: [\n            \"Place\",\n            \"ProperNoun\"\n        ],\n        notA: [\n            \"City\"\n        ]\n    },\n    City: {\n        isA: [\n            \"Place\",\n            \"ProperNoun\"\n        ],\n        notA: [\n            \"Country\"\n        ]\n    },\n    Region: {\n        isA: [\n            \"Place\",\n            \"ProperNoun\"\n        ]\n    },\n    Address: {\n        isA: \"Place\"\n    },\n    Organization: {\n        isA: [\n            \"Singular\",\n            \"ProperNoun\"\n        ],\n        notA: [\n            \"Person\",\n            \"Place\"\n        ]\n    },\n    SportsTeam: {\n        isA: \"Organization\"\n    },\n    School: {\n        isA: \"Organization\"\n    },\n    Company: {\n        isA: \"Organization\"\n    },\n    Plural: {\n        isA: \"Noun\",\n        notA: [\n            \"Singular\"\n        ]\n    },\n    Uncountable: {\n        isA: \"Noun\"\n    },\n    Pronoun: {\n        isA: \"Noun\",\n        notA: It\n    },\n    Actor: {\n        isA: \"Noun\",\n        notA: It\n    },\n    Activity: {\n        isA: \"Noun\",\n        notA: [\n            \"Person\",\n            \"Place\"\n        ]\n    },\n    Unit: {\n        isA: \"Noun\",\n        notA: It\n    },\n    Demonym: {\n        isA: [\n            \"Noun\",\n            \"ProperNoun\"\n        ],\n        notA: It\n    },\n    Possessive: {\n        isA: \"Noun\"\n    }\n}, Kt = {\n    Verb: {\n        notA: [\n            \"Noun\",\n            \"Adjective\",\n            \"Adverb\",\n            \"Value\",\n            \"Expression\"\n        ]\n    },\n    PresentTense: {\n        isA: \"Verb\",\n        notA: [\n            \"PastTense\",\n            \"FutureTense\"\n        ]\n    },\n    Infinitive: {\n        isA: \"PresentTense\",\n        notA: [\n            \"PastTense\",\n            \"Gerund\"\n        ]\n    },\n    Imperative: {\n        isA: \"Infinitive\"\n    },\n    Gerund: {\n        isA: \"PresentTense\",\n        notA: [\n            \"PastTense\",\n            \"Copula\",\n            \"FutureTense\"\n        ]\n    },\n    PastTense: {\n        isA: \"Verb\",\n        notA: [\n            \"FutureTense\"\n        ]\n    },\n    FutureTense: {\n        isA: \"Verb\"\n    },\n    Copula: {\n        isA: \"Verb\"\n    },\n    Modal: {\n        isA: \"Verb\",\n        notA: [\n            \"Infinitive\"\n        ]\n    },\n    PerfectTense: {\n        isA: \"Verb\",\n        notA: \"Gerund\"\n    },\n    Pluperfect: {\n        isA: \"Verb\"\n    },\n    Participle: {\n        isA: \"PastTense\"\n    },\n    PhrasalVerb: {\n        isA: \"Verb\"\n    },\n    Particle: {\n        isA: \"PhrasalVerb\"\n    },\n    Auxiliary: {\n        notA: [\n            \"Noun\",\n            \"Adjective\",\n            \"Value\"\n        ]\n    }\n}, qt = {\n    Value: {\n        notA: [\n            \"Verb\",\n            \"Adjective\",\n            \"Adverb\"\n        ]\n    },\n    Ordinal: {\n        isA: \"Value\",\n        notA: [\n            \"Cardinal\"\n        ]\n    },\n    Cardinal: {\n        isA: \"Value\",\n        notA: [\n            \"Ordinal\"\n        ]\n    },\n    Fraction: {\n        isA: \"Value\",\n        notA: [\n            \"Noun\"\n        ]\n    },\n    RomanNumeral: {\n        isA: \"Cardinal\",\n        notA: [\n            \"Ordinal\",\n            \"TextValue\"\n        ]\n    },\n    TextValue: {\n        isA: \"Value\",\n        notA: [\n            \"NumericValue\"\n        ]\n    },\n    NumericValue: {\n        isA: \"Value\",\n        notA: [\n            \"TextValue\"\n        ]\n    },\n    Money: {\n        isA: \"Cardinal\"\n    },\n    Percent: {\n        isA: \"Value\"\n    }\n}, Wt = {\n    Adjective: {\n        notA: [\n            \"Noun\",\n            \"Verb\",\n            \"Adverb\",\n            \"Value\"\n        ]\n    },\n    Comparable: {\n        isA: [\n            \"Adjective\"\n        ]\n    },\n    Comparative: {\n        isA: [\n            \"Adjective\"\n        ]\n    },\n    Superlative: {\n        isA: [\n            \"Adjective\"\n        ],\n        notA: [\n            \"Comparative\"\n        ]\n    },\n    NumberRange: {},\n    Adverb: {\n        notA: [\n            \"Noun\",\n            \"Verb\",\n            \"Adjective\",\n            \"Value\"\n        ]\n    },\n    Date: {\n        notA: [\n            \"Verb\",\n            \"Adverb\",\n            \"Preposition\",\n            \"Adjective\"\n        ]\n    },\n    Month: {\n        isA: [\n            \"Date\",\n            \"Singular\"\n        ],\n        notA: [\n            \"Year\",\n            \"WeekDay\",\n            \"Time\"\n        ]\n    },\n    WeekDay: {\n        isA: [\n            \"Date\",\n            \"Noun\"\n        ]\n    },\n    Timezone: {\n        isA: [\n            \"Date\",\n            \"Noun\"\n        ],\n        notA: [\n            \"Adjective\",\n            \"ProperNoun\"\n        ]\n    },\n    Time: {\n        isA: [\n            \"Date\"\n        ],\n        notA: [\n            \"AtMention\"\n        ]\n    },\n    Determiner: {\n        notA: Ot\n    },\n    Conjunction: {\n        notA: Ot\n    },\n    Preposition: {\n        notA: Ot\n    },\n    QuestionWord: {\n        notA: [\n            \"Determiner\"\n        ]\n    },\n    Currency: {\n        isA: [\n            \"Noun\"\n        ]\n    },\n    Expression: {\n        notA: [\n            \"Noun\",\n            \"Adjective\",\n            \"Verb\",\n            \"Adverb\"\n        ]\n    },\n    Abbreviation: {},\n    Url: {\n        notA: [\n            \"HashTag\",\n            \"PhoneNumber\",\n            \"Verb\",\n            \"Adjective\",\n            \"Value\",\n            \"AtMention\",\n            \"Email\"\n        ]\n    },\n    PhoneNumber: {\n        notA: [\n            \"HashTag\",\n            \"Verb\",\n            \"Adjective\",\n            \"Value\",\n            \"AtMention\",\n            \"Email\"\n        ]\n    },\n    HashTag: {},\n    AtMention: {\n        isA: [\n            \"Noun\"\n        ],\n        notA: [\n            \"HashTag\",\n            \"Verb\",\n            \"Adjective\",\n            \"Value\",\n            \"Email\"\n        ]\n    },\n    Emoji: {\n        notA: [\n            \"HashTag\",\n            \"Verb\",\n            \"Adjective\",\n            \"Value\",\n            \"AtMention\"\n        ]\n    },\n    Emoticon: {\n        notA: [\n            \"HashTag\",\n            \"Verb\",\n            \"Adjective\",\n            \"Value\",\n            \"AtMention\"\n        ]\n    },\n    Email: {\n        notA: [\n            \"HashTag\",\n            \"Verb\",\n            \"Adjective\",\n            \"Value\",\n            \"AtMention\"\n        ]\n    },\n    Acronym: {\n        notA: [\n            \"Plural\",\n            \"RomanNumeral\"\n        ]\n    },\n    Negative: {\n        notA: [\n            \"Noun\",\n            \"Adjective\",\n            \"Value\"\n        ]\n    },\n    Condition: {\n        notA: [\n            \"Verb\",\n            \"Adjective\",\n            \"Noun\",\n            \"Value\"\n        ]\n    }\n}, Rt = St, Ut = function(e, t) {\n    Object.keys(e).forEach((r)=>{\n        t[r] = e[r];\n    });\n};\nvar Qt = (()=>{\n    let e = {};\n    return Ut(_t, e), Ut(Kt, e), Ut(qt, e), Ut(Wt, e), e = Rt(e), e;\n})();\nconst Zt = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\", Xt = Zt.split(\"\").reduce(function(e, t, r) {\n    return e[t] = r, e;\n}, {});\nvar Yt = function(e) {\n    if (void 0 !== Xt[e]) return Xt[e];\n    let t = 0, r = 1, a = 36, n = 1;\n    for(; r < e.length; t += a, r++, a *= 36);\n    for(let r = e.length - 1; r >= 0; r--, n *= 36){\n        let a = e.charCodeAt(r) - 48;\n        a > 10 && (a -= 7), t += a * n;\n    }\n    return t;\n};\nconst er = function(e, t, r) {\n    const a = Yt(t);\n    return a < e.symCount ? e.syms[a] : r + a + 1 - e.symCount;\n};\nvar tr = function(e) {\n    const t = {\n        nodes: e.split(\";\"),\n        syms: [],\n        symCount: 0\n    };\n    return e.match(\":\") && function(e) {\n        const t = new RegExp(\"([0-9A-Z]+):([0-9A-Z]+)\");\n        for(let r = 0; r < e.nodes.length; r++){\n            const a = t.exec(e.nodes[r]);\n            if (!a) {\n                e.symCount = r;\n                break;\n            }\n            e.syms[Yt(a[1])] = Yt(a[2]);\n        }\n        e.nodes = e.nodes.slice(e.symCount, e.nodes.length);\n    }(t), function(e) {\n        const t = [], r = (a, n)=>{\n            let i = e.nodes[a];\n            \"!\" === i[0] && (t.push(n), i = i.slice(1));\n            const o = i.split(/([A-Z0-9,]+)/g);\n            for(let i = 0; i < o.length; i += 2){\n                const s = o[i], l = o[i + 1];\n                if (!s) continue;\n                const u = n + s;\n                if (\",\" === l || void 0 === l) {\n                    t.push(u);\n                    continue;\n                }\n                const c = er(e, l, a);\n                r(c, u);\n            }\n        };\n        return r(0, \"\"), t;\n    }(t);\n};\nconst rr = {\n    Comparative: \"true\\xa6better\",\n    Superlative: \"true\\xa6earlier\",\n    PresentTense: \"true\\xa6is,sounds\",\n    Value: \"true\\xa6a few\",\n    Noun: \"true\\xa6a5b4c2f1here,ie,lit,m0no doubt,pd,tce;a,d;t,y;a,ca,o0;l,rp;a,l;d,l,rc\",\n    Copula: \"true\\xa6a1is,w0;as,ere;m,re\",\n    PastTense: \"true\\xa6be3came,d2had,lied,meant,sa2taken,w0;as,e0;nt,re;id;en,gan\",\n    Condition: \"true\\xa6if,lest,unless\",\n    Preposition: \"true\\xa6'o,-,aLbIcHdGexcept,fFiDmidQnotwithstandiRoBpSqua,sAt6u3vi2w0;/o,hereNith0;!in,oR;a,s-a-vis;n1p0;!on;like,til;h0ill,owards;an,r0;ough0u;!oJ;ans,ince,o that;',f0n2ut;!f;f,n0;!to;or,rom;espite,own,u3;hez,irca;ar1e0oAy;sides,tween;ri6;',bo7cross,ft6lo5m3propos,round,s1t0;!op;! long 0;as;id0ong0;!st;ng;er;ut\",\n    Gerund: \"true\\xa6accord0be0develop0go0result0stain0;ing\",\n    Negative: \"true\\xa6n0;ever,o0;!n,t\",\n    QuestionWord: \"true\\xa6how3wh0;at,e1ich,o0y;!m,se;n,re; come,'s\",\n    Plural: \"true\\xa6records\",\n    Conjunction: \"true\\xa6&,aFbBcuz,how9in caEno8o7p5supposing,t2v1wh0yet;eth9ile;ers4s;h0o;eref9o0;!uC;l0rovided that;us;r,therwi6; matt1r;!ev0;er;e0ut;cau1f0;ore;se;lthou1nd,s 0;far as,if;gh\",\n    Abbreviation: \"true\\xa6a0Jb0Gc0Ad08e05f02g01h00iYjWkanVlTmNnKoJpFque,rDs8t6u5v2w0;is0r,y0B;!c;a,b,e1i0ol,s,t;tro,vo;r,t;niv,safa,t;ce,e0;l,mp,nn,x;ask,e2fc,gt,i1q,r,s,t,u0;pt,rg;r,tu;c,nJp0;!t;b,d,e0;pGs,v;a,d,ennNhd,l,p,r1s0vt;!eud;ef,o0;b,f,n;ct,kla,nt;e0ov;b0e;!r;a4d,essrs,i1lle,me,r7s0t;!tr;n1s0;c,ter;!n;!j,r,sc;at,it,lb,ng,t0;!d;!s;an,d,r,u0;l,n;a,da,e,n0;c,f;on,wy;a,en,ov;e1ig,l0m,r,t,y;!a;b,m;a,g,ng,s1tc,x0;!p;p,q,t;ak,e0ist,r;c,f,pt,t;a3ca,l,m2o0pl,res,yn;!l0m1nn,rp;!o;dr;!l0pt;!if;a,c,l1r0;ig,os;!dg,vd;d4l3p2r1ss0tty,ug,ve;n,t;c,iz;prox,r,t;!ta;!j,m,v\",\n    Pronoun: \"true\\xa6'em,elle,h4i3me,ourselves,she5th1us,we,you0;!rself;e0ou;m,y;!l,t;e0im;!'s\",\n    Singular: \"true\\xa60:16;1:13;2:19;a16b0Tc0Kd0De0Af05g00hWiVjel0kitty,lTmPnOoNpHquestionGrEs9t6u4w3;ay,om03;nc10s 3;doll0Lst0N; rex,a4h3ic,ragedy,v show;ere,i2;l0x return;i6ky,omeoNt3uper bowl,yst15;ep4ri2u3;de0Yff;faTmoT;st1ze;al0i2o3;om,se;! mark;a7i1la6r4u3;dQrpoI;e3ie0Hobl0V;roga00ss releaG;te,y1;rt,te0N;bjWceJthers,verview;othi2umb1;a5ee08o3;del,m3nopo0rni2th1;!my;n,yf0;i3unch;ne;ci2nsect;ead start,o3uman right;l0me4u3;se;! run;adf0entlem6irl02laci1od,rand4u3;l0y; slam,fa3mo3;th1;an;a6ella,ly,ol0r4un3;di2;ee market,iWo3;nti1sP;mi0th1;conomy,gg,ner7ven4x3;ampTecu9;i2t;ad8e5inn1o3ragonf0ude;cumentGg3i0l0or;gy;ath,t3;ec3;tive;!dy;a9eili2h7i5o3redit card;ttage,u3;ri1sin;ty,vil w3;ar;andeli1ocol3;ate;n3rF;ary;aCel0lesJo8r5u3;n3tterf0;ti2;eakfa4o3;!th1;st;dy,tt5y3;!fri3;end;le;nki2r3;ri1;er;d5l0noma0u3;nt;ly; homin5verti3;si2;ng;em\",\n    FemaleName: \"true\\xa60:J3;1:J7;2:IG;3:IF;4:IX;5:IK;6:JO;7:H0;8:JG;9:JK;A:HN;B:HY;C:IT;D:IP;E:JD;F:HC;G:I0;aGRbFLcDPdCYeBOfB4gADh9Ti9Gj8Gk7Gl60m49n3No3Jp37qu36r2Ds16t0Eu0Cv02wVxiTyOzH;aLeIineb,oHsof2;e3Uf2la,ra;h3iKlIna,ynH;ab,ep;da,ma;da,h3iHra;nab;aKeJi0Fol5BuIvH;etAonDO;i0na;le0sen2;el,gm3Jn,rGJs8W;aoHme0nyi;m62yAE;aMendDYhiDFiH;dele8lJnH;if48niHo0;e,f47;a,helmi0lHma;a,ow;ka0nB;aNeKiHusa5;cIktoriBMlAole7viH;anC3enJ0;kF9tor2;da,lA9nus,rHs0;a,nHoniH4;a,iFQ;leHnesH4;nIHrH;i1y;g8rHxH5;su5te;aYeUhRiNoLrIuHy3;i,la;acIZiHu0L;c2na,sH;hBPta;nHr0H;iBNya;aJffaEOnHs6;a,gtiH;ng;!nFQra;aIeHomasi0;a,l9Po8Ares1;l2ndolwethu;g9Go88rIssH;!a,ie;eHi,ri9;sa,za;bPlNmLnJrIs6tHwa0;ia0um;a63yn;iHya;a,ka,s6;arB6e3iHmEDra;!ka;a,iH;a,t6;at6it6;a0Fcarlet3We0BhXiTkye,neza0oRtNuIyH;bIBlvi1;e,ha,mayIEni7sIzH;an3MetAie,y;anHi9;!a,e,nH;aDe;aJeH;fHl5GphH;an4;cHZr5;b2fiA8m0OnHphi1;d3ia,ja,ya;er3lJmon1nIobh8PtH;a,i;dy;lEPv2;aMeIirHo0risF7y5;a,lDK;ba,e0i5lJrH;iHrDOyl;!d8Hfa;ia,lDX;hd,iMki3nJrIu0w0yH;la,ma,na;i,le8on,ron;aIda,ia,nHon;a,on;!ya;k6mH;!aa;lJrItaye81vH;da,inj;e0ife;en1i0ma;anA5bNd3Nh1RiBkMlLmJndIrHs6vannaD;aDi0;ra,y;aHi3;nt6ra;lDKma,ome;ee0in8Ru3;in1ri0;a05e00hYiVoIuH;by,thDH;bScRghQl2KnPsJwIxH;anAXie,y;an,e0;aIeHie,lE; merBLann9ll1marDBt7;!lHnn1;iHyn;e,nH;a,d9K;da,i,na;ayy8D;hel62io;bDKer7yn;a,cIkHmas,n9Fta,ya;ki,o;helGki;ea,iannGDoH;da,n1K;an0bJem9Agi0iInHta,y0;a88ee;han83na;a,eH;cEAkaD;bi0chIe,i0mo0nHquEKvCy0;di,ia;aEIelHiB;!e,le;een4ia0;aNeMhKipaluk,oJrHute66;iHudenCQ;scil3LyamvaB;lly,rt2;ilome0oebe,ylH;is,lis;arl,ggy,nelope,r5t3;ige,m0TnKo5rvaDGtIulH;a,etAin1;ricHsy,tBY;a,e,ia;do3i06;ctav2dIfCZis6lHphCZumC3yunbileg;a,ga,iv2;eHvAC;l2tA;aWeUiMoIurHy5;!ay,ul;a,eJor,rIuH;f,r;aDeCma;ll1mi;aNcLhariBOkKlaJna,sHta,vi;anHha;ur;!y;a,iDTki;hoGk9VolH;a,eDJ;!mh;hir,lHna,risFsreC;!a,lBT;asuLdKh2i6CnJomi9rgEPtHzanin zah3;aHhal4;li1s6;cy,etA;a,e8iEV;nngu30;a09ckenz4e01iMoJrignayani,uriDDyH;a,rH;a,lNna,tG;bi0i3llBInH;a,iH;ca,ka,qD3;a,cTkaSlNmi,nLrItzi,yH;ar;aIiam,lH;anEO;!l,nB;dy,eHh,n4;nhGrva;aKdJiCPlH;iHy;cent,e;red;!gros;!e5;ae5hH;ae5el3Z;ag5EgNi,lKrH;edi79iIjem,on,yH;em,l;em,sF;an4iHliF;nHsCE;a,da;!an,han;b0DcASd0Be,g09ha,i08ja,l06n04rLsoum60tKuIv82x9IyHz4;a,bell,ra,soB9;de,rH;a,eC;h8Fild1t4;a,cYgUiKjor4l7Sn4s6tJwa,yH;!aHbe6Wja8lAE;m,nBH;a,ha,in1;!aJbCBeIja,lEna,sHt64;!a,ol,sa;!l1H;! Jh,mInH;!a,e,n1;!awit,i;aliAHcJeduarBfernIjHlui5Y;o6Ful2;anB;ecil2la3;arJeIie,oHr44ueriA;!t;!ry;et42i37;el4Ui76y;dHon,ue5;akran7y;ak,en,iHk,lo3O;a,ka,nB;a,re,s4te;daHg4;!l3A;alEd4elHge,isDBon0;ei8in1yn;el,le;a0Ne0CiYoQuLyH;d2la,nH;!a,dIeBGnHsCL;!a,eBF;a,sCJ;aCWcJel0PiFlIna,pHz;e,i7;a,u,wa;iHy;a0Se,ja,l2JnB;is,l1SrJttIuHvel4;el5is1;e,ie;aKeIi9na,rH;a86i9;lHn1t7;ei;!in1;aSbb9CdRepa,lMnJsIv2zH;!a,be5LetAz4;a,etA;!a,dH;a,sHy;ay,ey,i,y;a,iJja,lHy;iHy;aA0e;!aH;!n5F;ia,ya;!nH;!a,ne;aPda,e0iNjYla,nMoKsJtHx4y5;iHt4;c2t2;e2LlCG;la,nHra;a,ie,o3;a,or1;a,gh,laH;!ni;!h,nH;a,d3e,n5P;cOdon97iNkes6mi9Ana,rMtJurIvHxmi,y5;ern1in2;a,e54ie,yn;as6iIoH;nya,ya;fa,s6;a,isF;a,la;ey,ie,y;a04eZhXiOlAKoNrJyH;lHra;a,ee,ie;istHy6D;a,en,iIyH;!na;!e,n59;nul,ri,urtnB0;aOerNlAZmJrHzzy;a,stH;en,in;!berlImernH;aq;eHi,y;e,y;a,stC;!na,ra;aHei3ongordzol;dij1w5;el7QiKjsi,lJnIrH;a,i,ri;d3na,za;ey,i,lBDs4y;ra,s6;bi7cAJdiat7IeB2iRlQmPnyakuma19rNss6KtKvi7yH;!e,lH;a,eH;e,i8L;a6DeIhHi4NlEri0y;ar6Ber6Bie,leCrB2y;!lyn8Gri0;a,en,iHl5Soli0yn;!ma,n3VsF;a5il1;ei8Ei,l4;a,tl6L;a07eYiVoNuH;anLdKliHst63;a8HeHsF;!n8tH;!a,te;e5Ji3Jy;a,i7;!anNcelEd6RelGhan7RlLni,sIva0yH;a,ce;eHie;fHlEph5U;a,in1;eHie;en,n1;!a,e,n41;lHng;!i1ClH;!i1B;anMle0nJrIsH;i8Csi8C;i,ri;!a,elGif2CnH;a,etAiHy;!e,f2A;a,e8EiInH;a,e8DiH;e,n1;cMd1mi,nIque4Xsmin3Ovie3y8zH;min9;a9eIiH;ce,e,n1s;!lHsFt0F;e,le;inIk4lEquelH;in1yn;da,ta;lRmPnOo0rNsIvaHzaro;!a0lu,na;aJiIlaHob84;!n9N;do3;!belHdo3;!a,e,l39;a77en1i0ma;a,di3es,gr6Yji;a8elBogH;en1;a,e8iHo0se;a0na;aSeOiJoHusFyacin2B;da,ll4rten23snH;a,i9Q;lImaH;ri;aIdHlaI;a,egard;ry;ath1CiJlInriet7rmi8sH;sa,t1B;en2Sga,mi;di;bi2Dil8IlNnMrJsItHwa,yl8Iz7H;i5St4;n5Yti;iHmo51ri52;etH;!te;aDnaD;a,ey,l4;a03eXiSlQoOrKunJwH;enHyne1Q;!dolE;ay,el;acIetHiselB;a,chC;e,ieH;!la;ld1AogooH;sh;adys,enHor2yn2H;a,da,na;aKgi,lIna,ov89selHta;a,e,le;da,liH;an;!n0;mLnJorgIrH;ald3Pi,m3Ctru8B;etAi4W;a,eHna;s26vieve;ma;bIil,le,mHrnet,yG;al5Ni5;i5FrielH;a,l1;aVeSiRloOoz2rH;anJeIiH;da,eB;da,ja;!cH;esIiHoi0O;n1s61;!ca;!rH;a,encH;e,ia;en,o0;lIn0rnH;!anB;ec2ic2;jr,n7rKtHy9;emIiHma,ouma7;ha,ma,n;eh;ah,iBrah,za0;cr4Nd0Ne0Mi0Lk7l04mWn4YrTsNtMuLvH;aJelIiH;!e,ta;in0Gyn;!ngel2S;geni1la,ni45;h5Sta;mLperanKtH;eIhHrel5;er;l30r9;za;a,eralB;iHma,nest2Jyn;cHka,n;a,ka;a,eMiJmH;aHie,y;!li8;lHn1;ee,iHy;a,e,ja;lHrald;da,y;aWeUiNlMma,no3oKsJvH;a,iH;na,ra;a,ie;iHuiH;se;a,en,ie,y;a0c2da,f,nMsJzaH;!betHve7;e,h;aHe,ka;!beH;th;!a,or;anor,nH;!a;!in1na;leCs6;vi;eIiHna,wi0;e,th;l,n;aYeMh2iLjeneKoHul30;lor5Tminiq4In3FrHtt4;a,eCis,la,othHthy;ea,y;ba;an0AnaDon8x4ya;anQbPde,eOiMja,lJmetr2nHsir5K;a,iH;ce,se;a,iIla,orHphi8;es,is;a,l6D;dHrdH;re;!d5Cna;!b2HoraDra;a,d3nH;!a,e;hl2i0l0HmNnLphn1rIvi1XyH;le,na;a,by,cIia,lH;a,en1;ey,ie;a,etAiH;!ca,el1Cka,z;arHia;is;a0Se0Oh05i03lVoKrIynH;di,th2;istHy05;al,i0;lPnMrIurH;tn1E;aJd2NiHn2Nri8;!nH;a,e,n1;!l1X;cepci59n4sH;tanHuelo;ce,za;eHleC;en,tA;aJeoIotH;il51;!pat3;ir9rJudH;etAiH;a,ne;a,e,iH;ce,sZ;a3er3ndH;i,y;aReNloe,rH;isJyH;stH;al;sy,tH;a1Ren,iHy;!an1e,n1;deJlseIrH;!i9yl;a,y;li8;nMrH;isKlImH;ai8;a,eHotA;n1tA;!sa;d3elGtH;al,elG;cIlH;esAi44;el2ilH;e,ia,y;itlZlYmilXndWrOsMtHy5;aKeJhHri0;erHleCrEy;in1;ri0;li0ri0;a33sH;a32ie;a,iNlLmeJolIrH;ie,ol;!e,in1yn;lHn;!a,la;a,eHie,o7y;ne,y;na,sF;a0Hi0H;a,e,l1;is7l4;in,yn;a0Ie02iZlXoUrH;andSeQiJoIyH;an0nn;nwEok9;an3DdgLg0XtH;n2XtH;!aInH;ey,i,y;ny;etH;!t9;an0e,nH;da,na;i9y;bbi9glarIlo05nH;i7n4;ka;ancHossom,ythe;a,he;an17lja0nHsm3I;i7tH;ou;aUcky,linTni7rPssOtJulaDvH;!erlH;ey,y;hJsy,tH;e,iHy9;e,na;!anH;ie,y;!ie;nHt6yl;adIiH;ce;etAi8;ay,da;!triH;ce,z;rbJyaH;rmH;aa;a3ie,o3ra;a2Sb2Md23g1Zi1Qj5l16m0Xn09oi,r04sUtTuPvOwa,yIzH;ra,u0;aKes6gJlIseH;!l;in;un;!nH;a,na;a,i2Ir2J;drJgus1RrIsteH;ja;el2;a,ey,i,y;aahua,he0;hIi2Gja,mi7s2DtrH;id;aMlIraqHt21;at;eIi9yH;!n;e,iHy;gh;!nH;ti;iJleIo6pi7;ta;en,n1tA;aHelG;!n1J;a00dje5eYgUiSjQnJohito,toHya;inetAnH;el5ia;!aKeIiHmJ;e,ka;!mHtA;ar4;!belIliFmU;sa;!le;a,eliH;ca;ka,sHta;a,sa;elHie;a,iH;a,ca,n1qH;ue;!tA;te;! JbImHstasiNya;ar2;el;cla3jul2pau5;aLberKeliJiHy;e,l2naH;!ta;a,ja;!ly;hGiIl2nB;da;a,ra;le;aWba,ePiMlKma,thJyH;a,c2sH;a,on,sa;ea;iHys0N;e,s0M;a,cIn1sHza;a,e,ha,on,sa;e,ia,ja;c2is6jaKksaKna,sJxH;aHia;!nd3;ia,saH;nd3;ra;ia;i0nIyH;ah,na;a,is,naDoud;la;c6da,leCmNnLsH;haDlH;inHyY;g,n;!h;a,o,slH;ey;ee;en;at6g4nIusH;ti0;es;ie;aWdiTelMrH;eJiH;anMenH;a,e,ne;an0;na;!aLeKiIyH;nn;a,n1;a,e;!ne;!iH;de;e,lEsH;on;yn;!lH;i8yn;ne;aKbIiHrL;!gaK;ey,i9y;!e;gaH;il;dKliyJradhIs6;ha;ya;ah;a,ya\",\n    Actor: \"true\\xa6aJbGcFdCengineIfAgardenIh9instructPjournalLlawyIm8nurse,opeOp5r3s1t0;echnCherapK;ailNcientJecretary,oldiGu0;pervKrgeon;e0oofE;ceptionGsearC;hotographClumbColi1r0sychologF;actitionBogrammB;cem6t5;echanic,inist9us4;airdress8ousekeep8;arm7ire0;fight6m2;eputy,iet0;ici0;an;arpent2lerk;ricklay1ut0;ch0;er;ccoun6d2ge7r0ssis6ttenda7;chitect,t0;ist;minist1v0;is1;rat0;or;ta0;nt\",\n    Honorific: \"true\\xa6a01bYcQdPeOfiJgIhon,jr,king,lHmCoffic00p7queen,r3s0taoiseach,vice6;e1fc,gt,ir,r,u0;ltRpt,rg;cond liInBrgeaJ;abbi,e0;ar1p9s,v0;!erend; admirX;astOhd,r0vt;esideDi1of0;!essM;me mini4nce0;!ss;a3essrs,i2lle,me,r1s0;!tr;!s;stK;gistrate,j,r6yF;i3lb,t;en,ov;eld mar3rst l0;ady,i0;eutena0;nt;shG;sq,xcellency;et,oct6r,utchess;apt6hance4mdr,o0pl;lonel,m2ngress0unci3;m0wom0;an;dr,mand5;ll0;or;!ain;ldg,rig0;!adi0;er;d0sst,tty,yatullah;j,m0v;!ir0;al\",\n    SportsTeam: \"true\\xa60:1A;1:1H;2:1G;a1Eb16c0Td0Kfc dallas,g0Ihouston 0Hindiana0Gjacksonville jagua0k0El0Bm01newToQpJqueens parkIreal salt lake,sAt5utah jazz,vancouver whitecaps,w3yW;ashington 3est ham0Rh10;natio1Oredski2wizar0W;ampa bay 6e5o3;ronto 3ttenham hotspur;blue ja0Mrapto0;nnessee tita2xasC;buccanee0ra0K;a7eattle 5heffield0Kporting kansas0Wt3;. louis 3oke0V;c1Frams;marine0s3;eah15ounG;cramento Rn 3;antonio spu0diego 3francisco gJjose earthquak1;char08paA; ran07;a8h5ittsburgh 4ortland t3;imbe0rail blaze0;pirat1steele0;il3oenix su2;adelphia 3li1;eagl1philNunE;dr1;akland 3klahoma city thunder,rlando magic;athle0Mrai3;de0; 3castle01;england 7orleans 6york 3;city fc,g4je0FknXme0Fred bul0Yy3;anke1;ian0D;pelica2sain0C;patrio0Brevolut3;ion;anchester Be9i3ontreal impact;ami 7lwaukee b6nnesota 3;t4u0Fvi3;kings;imberwolv1wi2;rewe0uc0K;dolphi2heat,marli2;mphis grizz3ts;li1;cXu08;a4eicesterVos angeles 3;clippe0dodDla9; galaxy,ke0;ansas city 3nE;chiefs,roya0E; pace0polis colU;astr06dynamo,rockeTtexa2;olden state warrio0reen bay pac3;ke0;.c.Aallas 7e3i05od5;nver 5troit 3;lio2pisto2ti3;ge0;broncZnuggeM;cowbo4maver3;ic00;ys; uQ;arCelKh8incinnati 6leveland 5ol3;orado r3umbus crew sc;api5ocki1;brow2cavalie0india2;bengaWre3;ds;arlotte horAicago 3;b4cubs,fire,wh3;iteB;ea0ulR;diff3olina panthe0; c3;ity;altimore 9lackburn rove0oston 5rooklyn 3uffalo bilN;ne3;ts;cel4red3; sox;tics;rs;oriol1rave2;rizona Ast8tlanta 3;brav1falco2h4u3;nited;aw9;ns;es;on villa,r3;os;c5di3;amondbac3;ks;ardi3;na3;ls\",\n    Uncountable: \"true\\xa60:1J;a1Qb1Ic19d16e0Zf0Tg0Mh0Hi0Dj0Cknowled1Pl07mXnWoVpRrMsBt6vi5w1;a3ea0Ai2oo1;d,l;ldlife,ne;rmth,t0;neg16ol0Btae;e4h3oothpaste,r1una;affSou1;ble,sers,t;ermod1Lund0;a,nnis;a9cene09eri0Wh8il7kittl0Wnow,o6p4t2u1;g0Znshi0P;ati1Ke1;am,el;ace1De1;ci0Red;ap,cc0;k,v0;eep,ingl0O;d0Cfe17l1nd,tish;m10t;a4e2ic1;e,ke0L;c1laxa0Hsearch;ogni0Grea0G;bi0Hin;aOe3hys17last8o1ress03;l1rk,w0;it15y9;a11trY;bstetr13il,xygen;ational securi0Vews;a8e6ilk,o3u1;mps,s1;ic;n1o0G;ey,o1;gamy;a1chan0V;sl03t;chine1il,themat0T; learn09ry;aught0e3i2ogi0Qu1;ck,g0G;ce,ghtn06ngui0OteratL;a1isK;th0;ewel8usti0J;ce,mp1nformaStself;a1ortan0H;ti1;en0F;a4isto3o1;ck1mework,n1spitali09;ey;ry;ir,libut,ppiB;ene4o2r1um,ymna0B;aAound;l1ssip;d,f; 1t08;editOpo1;ol;i5lour,o2urnit1;ure;od,rgive1uri0wl;ne1;ss;c7sh;conomZduca6lectr5n3quip4thZvery1;body,o1thF;ne;joy1tertain1;ment;iciNonU;tiG;ar2iabet1raugh2;es;ts;a8elcius,h4ivPl3o1urrency;al,ld w1nfusiBttB;ar;assMoth3;aos,e1;e2w1;ing;se;r5sh;a5eef,i2lood,owls,read,utt0;er;lliar2s1;on;ds;g1ss;ga1;ge;c6dvi5ero3ir2mnes1rt,thlet8;ty;craft;b5d1naut5;ynam4;ce;id,ou1;st1;ics\",\n    Infinitive: \"true\\xa60:6S;1:76;2:5C;3:74;4:73;5:67;6:6F;7:6Y;8:6Q;9:72;A:70;B:5X;C:6X;D:6L;E:77;F:5B;a6Kb66c57d4De3Xf3Jg3Dh37i2Uj2Sk2Ql2Hm26n23o1Yp1Jr0Rs06tYuTvOwHyG;awn,e31ield;aJe1Zhist6iIoGre6D;nd0rG;k,ry;pe,sh,th0;lk,nHrGsh,tDve;n,raE;d0t;aJiHoG;te,w;eGsC;!w;l6Jry;nHpGr4se;gra4Pli41;dGi9lo5Zpub3Q;erGo;mi5Cw1I;aMeLhKig5SoJrHuGwi7;ne,rn;aGe0Mi5Uu7y;de,in,nsf0p,v5J;r2ZuD;ank,reatB;nd,st;ke pa53lk,rg1Qs9;aZcWeVhTi4Dkip,lSmRnee3Lo52pQtJuGwitD;bmCck,ff0gge7ppHrGspe5;ge,pri1rou4Zvi3;ly,o36;aLeKoJrHuG;dy,mb6;aFeGi3;ngthBss,tD;p,re;m,p;in,ke,r0Qy;la58oil,rink6;e1Zi6o3J;am,ip;a2iv0oG;ck,rtBut;arDem,le5n1r3tt6;aHo2rG;atDew;le,re;il,ve;a05eIisk,oHuG;in,le,sh;am,ll;a01cZdu8fYgXje5lUmTnt,pQquPsKtJvGwa5V;eGiew,o36;al,l,rG;se,t;aFi2u44;eJi7oItG;!o2rG;i5uc20;l3rt;mb6nt,r3;e7i2;air,eHlGo43r0K;a8y;at;aFemb0i3Zo3;aHeGi3y;a1nt;te,x;a5Dr0J;act1Yer,le5u1;a13ei3k5PoGyc6;gni2Cnci6rd;ch,li2Bs5N;i1nG;ge,k;aTerSiRlOoMrIuG;b21ll,mp,rGsh;cha1s4Q;ai1eIiEoG;cGdu8greAhibCmi1te7vi2W;eAlaim;di5pa2ss,veE;iEp,rtr46sGur;e,t;aHead,uG;g,n4;n,y;ck,le;fo34mCsi7;ck,iErt4Mss,u1;bJccur,ff0pera9utweIverGwe;co47lap,ta22u1wG;helm;igh;ser3taF;eHotG;e,i8;ed,gle5;aMeLiIoHuG;ltip3Grd0;nit13ve;nHrr12sreprG;eseE;d,g6us;asu2lt,n0Nr4;intaFna4rHtG;ch,t0;ch,kGry;et;aMeLiJoGu1C;aHck,oGve;k,sB;d,n;ft,g35ke,mCnk,st2YveG;!n;a2Fc0Et;b0Nck,uG;gh,nD;iGno34;ck,ll,ss;am,oFuG;d4mp;gno2mQnGss3H;cOdica9flu0MhNsKtIvG;eGol3;nt,st;erGrodu8;a5fe2;i7tG;aGru5;ll;abCibC;lu1Fr1D;agi24pG;lemeEo22ro3;aKeIi2oHuG;nt,rry;n02pe,st;aGlp;d,t;nd6ppBrm,te;aKloAove1PrIuG;arGeAi15;ant39d;aGip,ow,umb6;b,sp;in,th0ze;aReaQiOlMoJrHuncG;ti3J;acGeshB;tu2;cus,lHrG;ce,eca7m,s30;d,l24;a1ZoG;at,od,w;gu2lGni1Xt,x;e,l;r,tu2;il,stBvG;or;a15cho,le5mSnPstNvalua9xG;a0AcLerKi7pGte19;a18eHi2laFoGreA;rt,se;ct,riG;en8;ci1t;el,han4;abGima9;li1J;ab6couXdHfor8ga4han8j03riDsu2t0vG;isi2Vy;!u2;body,er4pG;hasiGow0;ze;a07eUiLoKrHuG;mp;aHeAiG;ft;g,in;d4ubt;ff0p,re5sHvG;iZor8;aKcHliGmiApl1Btingui14;ke;oGuA;uGv0;ra4;gr1YppG;ear,ro3;cOeNfLliv0ma0Fny,pKsHterG;mi0G;cribe,er3iHtrG;oy;gn,re;a0Be0Ai5osC;eGi0By;at,ct;m,pB;iIlHrG;ea1;a2i06;de;ma4n8rGte;e,kB;a0Ae09h06i9l04oJrG;aHeGoAu0Hy;a9dC;ck,ve;llZmSnHok,py,uGv0;gh,nt;cePdu5fMsKtIvG;eGin8;rt,y;aFin0VrG;a7ibu9ol;iGtitu9;d0st;iHoGroE;rm;gu2rm;rn;biLfoKmaJpG;a2laF;in;re;nd;rt;ne;ap1e5;aGip,o1;im,w;aHeG;at,ck,w;llen4n4r4se;a1nt0;ll,ncIrGt0u1;eGry;!en;el;aSePloOoMrIuG;lGry;ly;igHuG;sh;htB;en;a7mb,o7rrGth0un8;ow;ck;ar,lHnefCtrG;ay;ie3ong;ng,se;band0Jc0Bd06ffo05gr04id,l01mu1nYppTrQsKttGvoid,waC;acIeHra5;ct;m0Fnd;h,k;k,sG;eIiHocia9uG;me;gn,st;mb6rt;le;chHgGri3;ue;!i3;eaJlIroG;aDve;ch;aud,y;l,r;noun8sw0tG;icipa9;ce;lHt0;er;e4ow;ee;rd;aRdIju7mCoR;it;st;!reA;ss;cJhie3knowled4tiva9;te;ge;ve;eIouEu1;se;nt;pt;on\",\n    Unit: \"true\\xa60:19;a14b12c0Od0Ne0Lf0Gg0Ch09in0Hjoule0k02l00mNnMoLpIqHsqCt7volts,w6y4z3\\xb02\\xb51;g,s;c,f,n;b,e2;a0Nb,d0Dears old,o1;tt0H;att0b;able4b3d,e2on1sp;!ne0;a2r0D;!l,sp;spo04; ft,uare 1;c0Id0Hf3i0Fkilo0Jm1ya0E;e0Mil1;e0li0H;eet0o0D;t,uart0;ascals,e2i1ou0Pt;c0Mnt0;rcent,t02;hms,uYz;an0JewtT;/s,b,e9g,i3l,m2p1\\xb2,\\xb3;h,s;!\\xb2;!/h,cro5l1;e1li08;! pFs1\\xb2;! 1;anEpD;g06s0B;gQter1;! 2s1;! 1;per second;b,i00m,u1x;men0x0;b,elvin0g,ilo2m1nR;!/h,ph,\\xb2;byZgXmeter1;! p2s1;! p1;er1; hour;e1g,r0z;ct1rtz0;aXogQ;al2b,igAra1;in0m0;!l1;on0;a4emtPl2t1;\\xb2,\\xb3; oz,uid ou1;nce0;hrenheit0rad0;b,x1;abyH;eciCg,l,mA;arat0eAg,m9oulomb0u1;bic 1p0;c5d4fo3i2meAya1;rd0;nch0;ot0;eci2;enti1;me4;!\\xb2,\\xb3;lsius0nti1;g2li1me1;ter0;ram0;bl,y1;te0;c4tt1;os1;eco1;nd0;re0;!s\",\n    Organization: \"true\\xa60:46;a3Ab2Qc2Ad21e1Xf1Tg1Lh1Gi1Dj19k17l13m0Sn0Go0Dp07qu06rZsStFuBv8w3y1;amaha,m0Xou1w0X;gov,tu2S;a3e1orld trade organizati41;lls fargo,st1;fie22inghou16;l1rner br3D;-m11gree31l street journ25m11;an halNeriz3Wisa,o1;dafo2Gl1;kswagLvo;bs,kip,n2ps,s1;a tod2Rps;es35i1;lev2Xted natio2Uv; mobi2Kaco bePd bMeAgi frida9h3im horto2Tmz,o1witt2W;shiba,y1;ota,s r Y;e 1in lizzy;b3carpen33daily ma2Xguess w2holli0rolling st1Ms1w2;mashing pumpki2Ouprem0;ho;ea1lack eyed pe3Fyrds;ch bo1tl0;ys;l2s1;co,la m12;efoni07us;a6e4ieme2Gnp,o2pice gir5ta1ubaru;rbucks,to2N;ny,undgard1;en;a2Rx pisto1;ls;few25insbu26msu1X;.e.m.,adiohead,b6e3oyal 1yan2X;b1dutch she4;ank;/max,aders dige1Ed 1vl32;bu1c1Uhot chili peppe2Klobst28;ll;c,s;ant2Vizno2F;an5bs,e3fiz24hilip morrBi2r1;emier27octer & gamb1Rudenti14;nk floyd,zza hut;psi28tro1uge08;br2Qchina,n2Q; 2ason1Xda2G;ld navy,pec,range juli2xf1;am;us;a9b8e5fl,h4i3o1sa,wa;kia,tre dame,vart1;is;ke,ntendo,ss0K;l,s;c,st1Etflix,w1; 1sweek;kids on the block,york08;a,c;nd1Us2t1;ional aca2Fo,we0Q;a,cYd0O;aAcdonald9e5i3lb,o1tv,yspace;b1Nnsanto,ody blu0t1;ley crue,or0O;crosoft,t1;as,subisO;dica3rcedes2talli1;ca;!-benz;id,re;'s,s;c's milk,tt13z1Y;'ore09a3e1g,ittle caesa1Ktd;novo,x1;is,mark; pres5-z-boy,bour party;atv,fc,kk,m1od1K;art;iffy lu0Lo3pmorgan1sa;! cha1;se;hnson & johns1Sy d1R;bm,hop,n1tv;c,g,te1;l,rpol; & m,asbro,ewlett-packaTi3o1sbc,yundai;me dep1n1J;ot;tac1zbollah;hi;eneral 6hq,l5mb,o2reen d0Iu1;cci,ns n ros0;ldman sachs,o1;dye1g0B;ar;axo smith kliZencore;electr0Im1;oto0V;a3bi,da,edex,i1leetwood mac,oGrito-l0A;at,nancial1restoV; tim0;cebook,nnie mae;b06sa,u3xxon1; m1m1;ob0H;!rosceptics;aiml0Ae5isney,o3u1;nkin donuts,po0Wran dur1;an;j,w j1;on0;a,f leppa3ll,p2r spiegZstiny's chi1;ld;eche mode,t;rd;aEbc,hBi9nn,o3r1;aigsli5eedence clearwater reviv1ossra05;al;!ca c5l4m1o0Ast05;ca2p1;aq;st;dplMgate;ola;a,sco1tigroup;! systems;ev2i1;ck fil-a,na daily;r0Hy;dbury,pital o1rl's jr;ne;aGbc,eCfAl6mw,ni,o2p,r1;exiteeWos;ei3mbardiJston 1;glo1pizza;be;ng;ack & deckFo2ue c1;roX;ckbuster video,omingda1;le; g1g1;oodriN;cht3e ge0n & jer2rkshire hathaw1;ay;ryH;el;nana republ3s1xt5y5;f,kin robbi1;ns;ic;bXcSdidRerosmith,ig,lLmFnheuser-busEol,ppleAr7s3t&t,v2y1;er;is,on;hland2s1;n,ociated F; o1;il;by4g2m1;co;os; compu2bee1;'s;te1;rs;ch;c,d,erican3t1;!r1;ak; ex1;pre1;ss; 4catel2t1;air;!-luce1;nt;jazeera,qae1;da;as;/dc,a3er,t1;ivisi1;on;demy of scienc0;es;ba,c\",\n    Demonym: \"true\\xa60:16;1:13;a0Wb0Nc0Cd0Ae09f07g04h02iYjVkTlPmLnIomHpDqatari,rBs7t5u4v3wel0Rz2;am0Fimbabwe0;enezuel0ietnam0H;g9krai1;aiwThai,rinida0Iu2;ni0Qrkmen;a4cot0Ke3ingapoOlovak,oma0Tpa05udRw2y0X;edi0Kiss;negal0Br08;mo0uU;o6us0Lw2;and0;a3eru0Hhilipp0Po2;li0Ertugu06;kist3lesti1na2raguay0;ma1;ani;amiZi2orweP;caragu0geri2;an,en;a3ex0Mo2;ngo0Erocc0;cedo1la2;gasy,y08;a4eb9i2;b2thua1;e0Dy0;o,t02;azakh,eny0o2uwaiti;re0;a2orda1;ma0Bp2;anN;celandic,nd4r2sraeli,ta02vo06;a2iT;ni0qi;i0oneV;aiDin2ondur0unN;di;amDe2hanai0reek,uatemal0;or2rm0;gi0;i2ren7;lipino,n4;cuadoVgyp6ngliJsto1thiopi0urope0;a2ominXut4;niH;a9h6o4roa3ub0ze2;ch;ti0;lom2ngol5;bi0;a6i2;le0n2;ese;lifor1m2na3;bo2eroo1;di0;angladeshi,el8o6r3ul2;gaG;aziBi2;ti2;sh;li2s1;vi0;aru2gi0;si0;fAl7merBngol0r5si0us2;sie,tr2;a2i0;li0;gent2me1;ine;ba1ge2;ri0;ni0;gh0r2;ic0;an\",\n    Possessive: \"true\\xa6anyAh5its,m3noCo1sometBthe0yo1;ir1mselves;ur0;!s;i8y0;!se4;er1i0;mse2s;!s0;!e0;lf;o1t0;hing;ne\",\n    Currency: \"true\\xa6$,aud,bScQdLeurKfJgbp,hkd,iIjpy,kGlEp8r7s3usd,x2y1z0\\xa2,\\xa3,\\xa5,ден,лв,руб,฿,₡,₨,€,₭,﷼;lotySł;en,uanR;af,of;h0t5;e0il5;k0q0;elM;iel,oubleLp,upeeL;e2ound st0;er0;lingI;n0soH;ceGn0;ies,y;e0i8;i,mpi7;n,r0wanzaCyatC;!onaBw;ls,nr;ori7ranc9;!o8;en3i2kk,o0;b0ll2;ra5;me4n0rham4;ar3;ad,e0ny;nt1;aht,itcoin0;!s\",\n    City: \"true\\xa60:73;1:61;2:6G;3:5U;4:5R;a68b54c4Id4Ae46f3Yg3Jh38i2Zj2Uk2Dl22m1Kn19o16p0Uq0Sr0Ls01tPuOvLwDxiBy9z5;a7h5i4Muri4O;a5e5ongsh0;ng3J;greb,nzib5G;ang2e5okoha3Uunfu;katerin3Jrev0;a5n0O;m5Hn;arsBeAi6roclBu5;h0xi,zh5P;c7n5;d5nipeg,terth4;hoek,s1K;hi5Zkl3C;l63xford;aw;a6ern2i5ladivost5Molgogr6K;en3lni6R;lenc6Dncouv2Yr3ughn;lan bat1Drumqi,trecht;aDbilisi,eCheBi9o8r7u5;l21n63r5;in,ku;ipoli,ondh62;kyo,m34ron1QulouS;an5jua3l2Zmisoa6Era3;j4Xshui; hag65ssaloni2L;gucigal28hr0l av1W;briz,i6llinn,mpe5Ang5rtu,shk2X;i2Msh0;an,chu1n0p2Iyu0;aEeDh8kopje,owe1It7u5ydney;ra5zh51;ba0Jt;aten is59ockholm,rasbou6Auttga31;an8e6i5;jiazhua1llo1m60y0;f54n5;ya1zh4L;gh3Ot4U;att4Ao1Yv49;cramen18int DlBn5o paulo,ppo3Wrajevo; 7aa,t5;a 5ia3Io domin3I;a3fe,m1O;antonCdie3Gfrancisco,j5ped3Ssalv8;o5u0;se;em,v5z2B;ad0I;lou59peters29;aAe9i7o5;me,sar5t5A;io;ga,o5yadh;! de janei3I;cife,ykjavik;b4Uip4lei2Mnc2Swalpindi;ingdao,u5;ez2i0Q;aEeDhCiBo8r7u6yong5;ya1;eb5Aya1;ag54etor53;rt5zn0; 5la4Fo;au prin0Nelizabe29sa05;ls3Srae5Ctts2B;iladelph4Ynom pe1Doenix;r26tah tik3I;ler00naji,r4Pt5;na,r36;ak47des0Lm1Rr6s5ttawa;a3Ylo;an,d07;a8ew6i5ovosibir1Oyc;ng2Hs; 5cast39;del27orlea46taip16york;g8iro4Xn5pl2Zshv36v0;ch6ji1t5;es,o1;a1o1;a6o5p4;ya;no,sa0Y;aFeCi9o6u5;mb2Cni28sc40;gadishu,nt6s5;c17ul;evideo,re31;ami,l6n18s5;kolc,sissauga;an,waukee;cca,d5lbour2Pmph41;an,ell5i3;in,\\xedn;cau,drAkass2Tl9n8r5shh4A;aca6ib5rakesh,se2N;or;i1Ty;a4EchEdal12i47;mo;id;aCeiAi8o6u5vRy2;anLckn0Rdhia3;n5s angel28;d2g bea1O;brev2De3Kma5nz,sb2verpo2A;!ss29;c5pzig;est0C; p6g5ho2Yn0Gusan27;os;az,la35;aHharFiClaipeBo9rak0Hu7y5;iv,o5;to;ala lump4n5;mi1sh0;be,hi0Llka2Zpavog4si5wlo2;ce;da;ev,n5rkuk;gSsha5;sa;k5toum;iv;bIdu3llakuric0Tmpa3Gn6ohsiu1ra5un1Lwaguc0T;c0Sj;d5o,p4;ah1Vy;a7e6i5ohannesZ;l1Xn0;dd37rusalem;ip4k5;ar2J;bad0mph1QnBrkutYs8ta01z5̇zm7;m6tapala5;pa;ir;fah0l6tanb5;ul;am2Zi2I;che2d5;ianap2Lo21;aBe8o5yder2W; chi mi6ms,nolulu,u5;st2;nh;f6lsin5rakli2;ki;ei;ifa,lifax,m7n5rb1Dva3;gAnov5oi;er;bu2Wilt2;aFdanEenDhCiPlasgBo9raz,u5;a5jr21;dal6ng5yaquil;zh1H;aja2Lupe;ld coa18then5;bu2P;ow;ent;e0Toa;sk;lw7n5za;dhi5gt1C;nag0S;ay;aisal26es,o8r6ukuya5;ma;ankfu5esno;rt;rt5sh0; wor6ale5;za;th;d5indhov0Nl paso;in5mont2;bur5;gh;aAe8ha0Visp4o7resd0Ju5;b5esseldorf,rb0shanbe;ai,l0G;ha,nggu0rtmu11;hradRl5troit;hi;donghHe5k08li0masc1Xr es sala1HugavpiY;gu,je2;aKebu,hAo5raio03uriti1P;lo7n6penhag0Ar5;do1Nk;akLst0V;gVm5;bo;aBen8i6ongqi1ristchur5;ch;ang m7ca5ttago1;go;g6n5;ai;du,zho1;n5ttogr12;digarh,g5;ch8sha,zh06;i9lga8mayenJn6pe town,r5;acCdiff;ber18c5;un;ry;ro;aUeMhJirmingh0ToIr9u5;chareRdapeRenos air7r5s0tu0;g5sa;as;es;a9is6usse5;ls;ba6t5;ol;ne;sil0Mtisla7zzav5;il5;le;va;goZst2;op6ubaneshw5;ar;al;iBl9ng8r5;g6l5n;in;en;aluru,hazi;fa5grade,o horizonte;st;ji1rut;ghd0BkGnAot9r7s6yan n4;ur;el,r07;celo3ranquil09;na;ou;du1g6ja lu5;ka;alo6k5;ok;re;ng;ers5u;field;a04b01cc00ddis abaZgartaYhmedWizawl,lQmNnHqaZrEsBt7uck5;la5;nd;he7l5;an5;ta;ns;h5unci2;dod,gab5;at;li5;ngt2;on;a6chora5kaNtwerp;ge;h7p5;ol5;is;eim;aravati,m0s5;terd5;am; 8buquerq7e5giers,maty;ppo,xandr5;ia;ue;basrah al qadim5mawsil al jadid5;ah;ab5;ad;la;ba;ra;idj0u dha5;bi;an;lbo6rh5;us;rg\",\n    Country: \"true\\xa60:39;1:2M;a2Xb2Ec22d1Ye1Sf1Mg1Ch1Ai14j12k0Zl0Um0Gn05om3DpZqat1KrXsKtCu6v4wal3yemTz2;a25imbabwe;es,lis and futu2Y;a2enezue32ietnam;nuatu,tican city;.5gTkraiZnited 3ruXs2zbeE;a,sr;arab emirat0Kkingdom,states2;! of am2Y;k.,s.2; 28a.;a7haBimor-les0Bo6rinidad4u2;nis0rk2valu;ey,me2Ys and caic1U; and 2-2;toba1K;go,kel0Znga;iw2Wji2nz2S;ki2U;aCcotl1eBi8lov7o5pa2Cri lanka,u4w2yr0;az2ed9itzerl1;il1;d2Rriname;lomon1Wmal0uth 2;afr2JkLsud2P;ak0en0;erra leoEn2;gapo1Xt maart2;en;negKrb0ychellY;int 2moa,n marino,udi arab0;hele25luc0mart20;epublic of ir0Dom2Duss0w2;an26;a3eHhilippinTitcairn1Lo2uerto riM;l1rtugE;ki2Cl3nama,pua new0Ura2;gu6;au,esti2;ne;aAe8i6or2;folk1Hth3w2;ay; k2ern mariana1C;or0N;caragua,ger2ue;!ia;p2ther19w zeal1;al;mib0u2;ru;a6exi5icro0Ao2yanm05;ldova,n2roc4zamb9;a3gol0t2;enegro,serrat;co;c9dagasc00l6r4urit3yot2;te;an0i15;shall0Wtin2;ique;a3div2i,ta;es;wi,ys0;ao,ed01;a5e4i2uxembourg;b2echtenste11thu1F;er0ya;ban0Hsotho;os,tv0;azakh1Ee3iriba03o2uwait,yrgyz1E;rWsovo;eling0Jnya;a2erF;ma15p1B;c6nd5r3s2taly,vory coast;le of m19rael;a2el1;n,q;ia,oI;el1;aiSon2ungary;dur0Mg kong;aAermany,ha0Pibralt9re7u2;a5ern4inea2ya0O;!-biss2;au;sey;deloupe,m,tema0P;e2na0M;ce,nl1;ar;bTmb0;a6i5r2;ance,ench 2;guia0Dpoly2;nes0;ji,nl1;lklandTroeT;ast tim6cu5gypt,l salv5ngl1quatorial3ritr4st2thiop0;on0; guin2;ea;ad2;or;enmark,jibou4ominica3r con2;go;!n B;ti;aAentral african 9h7o4roat0u3yprQzech2; 8ia;ba,racao;c3lo2morPngo-brazzaville,okFsta r03te d'ivoiK;mb0;osD;i2ristmasF;le,na;republic;m2naTpe verde,yman9;bod0ero2;on;aFeChut00o8r4u2;lgar0r2;kina faso,ma,undi;azil,itish 2unei;virgin2; is2;lands;liv0nai4snia and herzegoviGtswaGuvet2; isl1;and;re;l2n7rmuF;ar2gium,ize;us;h3ngladesh,rbad2;os;am3ra2;in;as;fghaFlCmAn5r3ustr2zerbaijH;al0ia;genti2men0uba;na;dorra,g4t2;arct6igua and barbu2;da;o2uil2;la;er2;ica;b2ger0;an0;ia;ni2;st2;an\",\n    Region: \"true\\xa60:2M;1:2S;2:2J;a2Pb2Cc1Yd1Tes1Sf1Qg1Kh1Gi1Bj17k12l0Zm0On07o05pZqWrTsKtFuCv9w5y3zacatec2T;akut0o0Du3;cat2k07;a4est 3isconsin,yomi1L;bengal,vi6;rwick2Ashington3;! dc;er4i3;rgin0;acruz,mont;dmurt0t3;ah,tar3; 2Ka0W;a5e4laxca1Qripu1Wu3;scaDva;langa1nnessee,x2E;bas0Um3smNtar24;aulip2Cil nadu;a8i6o4taf10u3ylh1E;ffYrr03s19;me1Bno1Puth 3;cVdU;ber0c3kkim,naloa;hu2ily;n4skatchew2xo3;ny; luis potosi,ta catari1;a3hode9;j3ngp06;asth2shahi;ingh24u3;e3intana roo;bec,en5reta0Q;ara7e5rince edward3unjab; i3;sl0A;i,nnsylv3rnambu0A;an0;!na;axa0Xdisha,h3klaho1Zntar3reg6ss0Ax0F;io;aIeDo5u3;evo le3nav0V;on;r3tt16va scot0;f8mandy,th3; 3ampton15;c5d4yo3;rk13;ako1M;aroli1;olk;bras1Lva0Bw3; 4foundland3;! and labrador;brunswick,hamp0Wjers3mexiRyork state;ey;galOyarit;a9eghala0Mi5o3;nta1r3;dov0elos;ch5dlanCn4ss3zor11;issippi,ouri;as geraOneso18;ig2oac2;dhy12harasht0Gine,ni4r3ssachusetts;anhao,i el,ylF;p3toba;ur;anca0Ie3incoln0IouisH;e3iR;ds;a5e4h3omi;aka06ul1;ntucky,ra01;bardino,lmyk0ns0Qr3;achay,el0nata0X;alis5har3iangxi;kh3;and;co;daho,llino6n3owa;d4gush3;et0;ia1;is;a5ert4i3un2;dalFm0D;fordZ;mpYrya1waii;ansu,eorg0lou7oa,u3;an4erre3izhou,jarat;ro;ajuato,gdo3;ng;cesterS;lori3uji2;da;sex;ageTe6o4uran3;go;rs3;et;lawaLrbyK;aEeaDh8o3rimea ,umbr0;ahui6l5nnectic4rsi3ventry;ca;ut;i02orado;la;e4hattisgarh,i3uvash0;apQhuahua;chn4rke3;ss0;ya;ra;lFm3;bridge6peche;a8ihar,r7u3;ck3ryat0;ingham3;shi3;re;emen,itish columb0;h0ja cal7lk6s3v6;hkorto3que;st2;an;ar0;iforn0;ia;dygea,guascalientes,lAndhr8r4ss3;am;izo1kans4un3;achal 6;as;na;a 3;pradesh;a5ber4t3;ai;ta;ba4s3;ka;ma\",\n    Place: \"true\\xa6a0Eb0Bc04d03e02f00gVhUiRjfk,kOlMmJneGoFpBque,rd,s9t6u5v4w1y0;akutOyz;ake isFis1y0;!o;!c;a,ostok,t;laanbaatar,p02safa,t;ahiti,e1he 0;bronx,hamptons;nn,x;a0fo,oho,t,under7yd;khalNsk;a2e1h0itcairn;l,x;k,nnN;!cif04;kla,nt,rd;b1w eng0;land;!r;a1co,i0t,uc;dNnn;gadZlibu,nhattZ;a0gw,hr;s,x;an1osrae,rasnoyar0ul;sk;!s;a1cn,da,nd0st;ianRochina;!x;arlem,kg,nd,oHwy;a3re0;at 0enwich;brita0lakH;in;!y village;co,l0ra;!a;urope,vergladC;ak,en,fw,ist,own4xb;al5dg,gk,h2l1o0rA;lo,nn;!t;a1ina0uuk;town;morro,tham;!if;cn,e1kk,l0rooklyn;vd;l air,verly hills;frica,lta,m7n3r2sia,tl1ve,zor0;es;!ant2;ct1iz;adyr,tarct0;ic0; oce0;an;ericas,s\",\n    MaleName: \"true\\xa60:E4;1:D5;2:DN;3:AX;4:D1;5:CF;6:B5;7:CV;8:C7;9:DJ;A:DK;B:A5;C:C1;aCNbBKcAId9Ge8Mf84g7Hh6Ti6Dj5Dk51l4Cm34n2So2Mp2Equ2Cr1Ls11t0Eu0Dv07wTxSyIzD;aDor0;cDh9Skaria,n5V;hEkD;!aCL;ar5VeCK;aLoFuD;sDu2JvBX;if,uf;nFsEusD;ouf,sD;ef;aDg;s,tD;an,h0;hli,nBLssX;avi3ho4;aMeKiFoDyaC1;jcie8Blfgang,odrow,utD;!er;lDnst1;bFey,frD0lD;aBCiD;am,e,s;e9Eur;i,nde6sD;!l8t1;de,lErrAyD;l1ne;lDt3;aA9y;aGiDladimir,ojte7Y;cEha0kt68nceDrgAIva0;!nt;e3Ut66;lentDnA4;in4X;ghBUlyss5Bnax,sm0;aXeShOiMoHrFuEyD;!l3ro7s1;n9r5B;avAVeDist0oy,um0;ntANv5Yy;bGdFmDny;!as,mDoharu;aCSie,y;!d;iBy;mDt5;!my,othy;adFeoEia8FomD;!as;!do8O;!de5;dGrD;en9KrD;an9JeDy;ll,n9I;!dy;dgh,ha,iDnn3req,tsu4S;cB4ka;aTcotRePhLiJoHpenc3tDur1Uylve9Jzym1;anFeDua8C;f0phBSvDwa8B;e61ie;!islaw,l8;lom1nBEuD;leyma7ta;dDlBm1yabonga;!dhart7An8;aFeD;lDrm0;d1t1;h7Tne,qu0Zun,wn,y7;aDbasti0k29l4Qrg4Nth,ymoAT;m5n;!tD;!ie,y;lEmDnti2Dq5Aul;!ke5LmCu4;ik,vato7W;aXeTheA9iPoHuEyD;an,ou;b7MdEf5pe7RssD;!elBY;ol3Ey;an,bJc66dIel,geHh0landBPmGnFry,sEyD;!ce;coe,s;!aAGnC;an,eo;l46r;e5Ng3n8olfo,ri79;bCeB7;cDl8;ar6Pc6OhEkDo;!ey,ie,y;a99ie;gEid,ubAx,yDza;an1InY;gA8iD;naA4s;ch70fa4lHmGndFpha4sEul,wi2HyD;an,mo82;h7Vm5;alBDol2Uy;iATon;f,ph;ent2inD;cy,t1;aIeGhilFier72ol,rD;aka16eD;m,st1;!ip,lip;dALrcy,tD;ar,e3Gr1X;b4Kdra7Ft4ZulD;!o17;ctav3Fi3liv3mAFndrej,rHsEtDum9wA;is,to;aEc9k9m0vD;al5Z;ma;i,l53vL;aLeJiFoDu3A;aDel,j5l0ma0r3K;h,m;cEg4i49kD;!au,h7Uola;holBkDolB;!olB;al,d,il,ls1vD;il8Y;hom,thD;anDy;!a4i4;aZeWiMoHuEyD;l2Jr1;hamEr6XstaD;fa,p5C;ed,mH;di0We,hamFis2FntEsDussa;es,he;e,y;ad,ed,mD;ad,ed;cIgu4hai,kGlFnEtchD;!e6;a8Aik;house,o0Bt1;ae5YeA4olD;aj;ah,hDk8;aEeD;al,l;el,l;hElv2rD;le,ri6v2;di,met;ay0ck,hTjd,ks2DlRmadWnQrKs1tFuricExD;!imilian9Nwe6;e,io;eGhEiBtDus,yB;!eo,hew,ia;eDis;us,w;j,o;cHio,kGlFqu7Dsha6tDv2;iDy;!m,n;in,on;!el,oPus;!el9IoOus;iGu4;achDcolm,ik;ai,y;amEdi,eDmoud;sh;adDm5T;ou;aXeQiOlo3EoKuEyD;le,nd1;cGiFkDth3uk;aDe;!s;gi,s,z;as,iaD;no;g0nn7SrenFuDv8Jwe6;!iD;e,s;!zo;am,oD;n4r;a8Cevi,la5JnIoGst3thaFvD;eDi;nte;bo;!nD;!a6Sel;!ny;mFnErDur5Hwr5H;ry,s;ce,d1;ar,o5A;aLeGhaled,iDrist5Iu4Vy6X;er0p,rD;by,k,ollD;os;en0iGnDrmit,v44;!dEnDt5Z;e1Ay;a6ri59;r,th;cp3j5m66na73rEsp9them,uD;ri;im,l;a02eUiSoGuD;an,lDst2;en,iD;an,en,o,us;aNeLhnKkubBnIrGsD;eEhDi8Bue;!ua;!ph;dDge;an,i,on;!aDny;h,s,th5I;!ath5Hie,nC;!l,sDy;ph;o,qu2;an,mD;!mC;d,ffIrFsD;sDus;!e;a6BemEmai7oDry;me,ni0Y;i7Ty;!e60rD;ey,y;cKdAkImHrFsEvi3yD;!dAs1;on,p3;ed,od,rDv56;e5Nod;al,es4Xis1;a,e,oDub;b,v;k,ob,quD;es;aWbQchiPgNkeMlija,nuLonut,rJsFtDv0;ai,suD;ki;aEha0i7DmaDsac;el,il;ac,iaD;h,s;a,vinDw2;!g;k,nngu5S;!r;nacDor;io;ka;ai,rahD;im;aPeJoIuDyd9;be2KgGmber4WsD;eyEsD;a2e2;in,n;h,o;m3ra3Gsse2wa4B;aHctGitGnrErD;be2Dm0;iDy;!q11;or;th;bMlLmza,nKo,rFsEyD;a4JdA;an,s0;lGo50rFuDv8;hi4Gki,tD;a,o;is1y;an,ey;k,s;!im;ib;aVeRiPlenOoLrHuD;ilEsD;!tavo;herme,lerD;mo;aFegDov3;!g,orD;io,y;dy,h5Wnt;nzaErD;an,d1;lo;!n;lbe5Ano,oD;rg3Hvan5A;ne,oFrD;aDry;ld,rd5H;ffr8rge;brElArDv2;la28r3Sth,y;e3EielD;!i5;aTePiNlLorr0NrD;anFedDitz;!dCeDri2B;ri2A;cFkD;!ie,lD;in,yn;esLisD;!co,z36;etch3oD;yd;d4lDnn,onn;ip;deriFliEng,rnD;an06;pe,x;co;bi0di,hd;ar04dZfrYit0lSmKnHo2rFsteb0th0uge7vDymAzra;an,eD;ns,re36;gi,i0DnDrol,v2w2;est4Pie;oEriqDzo;ue;ch;aJerIiEmD;aIe2Z;lErD;!h0;!iD;o,s;s1y;nu4;be0Cd1iGliFmEt1viDwood;n,s;er,o;ot1Ys;!as,j4NsD;ha;a2en;!dCg9mGoEuEwD;a2Din;arD;do;o0Wu0W;l,nD;est;a01eRiOoHrGuFwEylD;an,l0;ay7ight;a7dl8nc0st2;ag0ew;minGnEri0ugDvydBy2D;!lB;!a2MnDov0;e6ie,y;go,iDykB;cDk;!k;armuEeDll1on,rk;go;id;anKj0lbeJmetri5nHon,rGsFvEwDxt3;ay7ey;en,in;hawn,mo0B;ek,ri0I;is,nDv3;is,y;rt;!dD;re;an,lNmLnKrGvD;e,iD;! lucDd;as,ca;en,iFne6rDyl;eDin,yl;l3Bn;n,o,us;!e,i4ny;iDon;an,en,on;e,lB;as;a09e07hYiar0lNoIrGuEyrD;il,us;rtD;!is;aDistob0U;ig;dy,lGnErD;ey,neli5y;or,rD;ad;by,e,in,l2t1;aIeFiDyK;fDnt;fo0Ft1;meEt5velaD;nd;nt;rFuEyD;!t1;de;enD;ce;aIeGrisEuD;ck;!tD;i0oph3;st3;er;d,rDs;b4leD;s,y;cDdric,s9;il;lGmer1rD;ey,lEro6y;ll;!os,t1;eb,v2;a07eZiVlaUoRrEuDyr1;ddy,rtK;aLeGiFuEyD;an,ce,on;ce,no;an,ce;nEtD;!t;dEtD;!on;an,on;dEndD;en,on;!foDl8y;rd;bErDyd;is;!by;i7ke;bFlEshD;al;al,lC;ek;nHrDshoi;at,nEtD;!r1C;aDie;rd14;!edict,iEjam2nC;ie,y;to;kaMlazs,nHrD;n8rDt;eDy;tt;ey;dDeE;ar,iD;le;ar17b0Vd0Rf0Pgust2hm0Mi0Jja0Il04m00nSputsiRrIsaHuFveEyDziz;a0kh0;ry;gust5st2;us;hi;aKchJiIjun,maHnFon,tDy0;hDu09;ur;av,oD;ld;an,nd0H;!el,ki;ie;ta;aq;as,dIgel0CtD;hoGoD;i7nD;!i09y;ne;ny;er,reDy;!as,i,s,w;iFmaDos;nu4r;el;ne,r,t;an,bePdAeJfHi,lGonFphXt1vD;aNin;on;so,zo;an,en;onTrD;edU;c,jaGksandFssaGxD;!andD;er,ru;ar,er;ndD;ro;rtN;ni;dAm9;ar;en;ad,eD;d,t;in;onD;so;aEi,olfDri0vik;!o;mDn;!a;dHeGraEuD;!bakr,lfazl;hDm;am;!l;allIelFoulaye,ulD;!lDrF;ah,o;! rD;ahm0;an;ah;av,on\",\n    LastName: \"true\\xa60:9F;1:9V;2:9H;3:9X;4:9N;5:8J;6:9K;7:A0;8:9E;9:88;A:6E;B:77;C:6J;a9Ub8Lc7Kd6Xe6Rf6Dg5Vh58i54j4Pk45l3Nm2Rn2Eo26p1Nquispe,r17s0Ft05vVwOxNyGzD;aytsADhD;aDou,u;ng,o;aGeun7ZiDoshiA9un;!lD;diDmaz;rim,z;maDng;da,guc97mo6UsDzaB;aBhiA7;iao,u;aHeGiEoDright,u;jc8Sng;lDmm0nkl0sniewsB;liA1s3;b0iss,lt0;a5Rgn0lDng,tanabe;k0sh;aHeGiEoDukA;lk5roby5;dAllalDnogr2Zr0Zss0val37;ba,obos;lasEsel7N;lGn dFrg8EsEzD;qu7;ily9Oqu7silj9O;en b35ijk,yk;enzue95verde;aLeix1JhHi4j6ka3IoGrFsui,uD;om4ZrD;c4n0un1;an,embl8TynisB;dor95lst31m2rr9th;at5Mi7LoD;mErD;are6Ylaci64;ps3s0Y;hirAkah8Dnaka;a00chWeThPiNmKoItFuEvDzabo;en8Aobod34;ar7bot2lliv4zuB;aEein0oD;i67j3Lyan8V;l6rm0;kol5lovy5re6Psa,to,uD;ng,sa;iDy5Z;rn5tD;!h;l5YmDngh,rbu;mo6Do6J;aFeDimizu;hu,vchD;en7Cuk;la,r17;gu8mDoh,pulve8Trra4R;jDyD;on5;evi6Filtz,miDneid0roed0ulz,warz;dEtD;!z;!t;ar42h6ito,lFnDr2saBto,v2;ch7d0AtDz;a4Pe,os;as,ihAm3Zo0Q;aOeNiKoGuEyD;a66oo,u;bio,iz,sD;so,u;bEc7Bdrigue57g03j73mDosevelt,ssi,ta7Nux,w3Z;a4Be0O;ertsDins3;!on;bei0LcEes,vDzzo;as,e8;ci,hards3;ag4es,it0ut0y9;dFmEnDsmu7Zv5F;tan1;ir7os;ic,u;aSeLhJiGoErDut6;asad,if5Zochazk1W;lishc24pDrti62u55we66;e2Tov48;cEe09nD;as,to;as60hl0;aDillips;k,m,n5K;de3AetIna,rGtD;ersErovDtersC;!a,ic;en,on;eDic,ry,ss3;i8ra,tz,z;ers;h71k,rk0tEvD;ic,l3T;el,t2O;bJconnor,g2ClGnei5PrEzD;demir,turk;ella3MtDwe5N;ega,iz;iDof6GsC;vDyn1F;ei8;aPri1;aLeJguy1iFoDune44ym4;rodahl,vDwak;ak3Uik5otn56;eEkolDlsCx3;ic,ov6X;ls1miD;!n1;ils3mD;co42ec;gy,kaEray4varD;ro;jiDmu8shiD;ma;aXcVeQiPoIuD;lGnFrDssoli5T;atDpUr68;i,ov2;oz,te4B;d0l0;h4lIo0HrEsDza0Z;er,s;aFeEiDoz5r3Ete4B;!n6F;au,i8no,t4M;!l9;i2Rl0;crac5Ohhail5kke3Qll0;hmeGij0j2ElFndErci0ssiDyer19;!er;e3Bo2Z;n0Io;dAti;cartDlaughl6;hy;dMe6Dgnu5Ei0jer34kLmJnci59rFtEyD;er,r;ei,ic,su1N;iEkAqu9roqu6tinD;ez,s;a54c,nD;!o;a52mD;ad5;e5Oin1;rig4Ns1;aSeMiIoGuEyD;!nch;k2nDo;d,gu;mbarDpe2Rvr2;di;!nDu,yana1R;coln,dD;bDholm;erg;bed5TfeGhtFitn0kaEn6rDw2G;oy;!j;in1on1;bvDvD;re;iDmmy,rsCu,voie;ne,t11;aTennedy,h4iSlQnez46oJrGuEvar4woD;k,n;cerDmar58znets5;a,o2G;aDem0i2Zyeziu;sni3PvD;ch3U;bay4Frh0Jsk0TvaFwalDzl5;czDsB;yk;cFlD;!cDen3Q;huk;!ev2ic,s;e6uiveD;rt;eff0l2mu8nnun1;hn,lloe,minsBrEstra31to,ur,yDzl5;a,s0;j0GlsC;aMenLha2Pim0QoEuD;ng,r2;e2JhFnErge2Ju2NvD;anA;es,ss3;anEnsD;en,on,t3;nesDsC;en,s1;ki26s1;cGkob3RnsDrv06;en,sD;enDon;!s;ks3obs1;brahimAglesi3Ake4Ll0CnoZoneFshikEto,vanoD;u,v4A;awa;scu;aPeIitchcock,jaltal6oFrist46uD;!aDb0gh9ynh;m4ng;a23dz2fEjga2Sk,rDx3B;ak0Yvat;er,fm3B;iGmingw3NnErD;nand7re8;dDriks1;ers3;kkiEnD;on1;la,n1;dz2g1lvoLmJnsCqIrr0SsFuEyD;as36es;g1ng;anEhiD;mo0Q;i,ov08;ue;alaD;in1;rs1;aMeorgLheorghe,iJjonIoGrEuDw3;o,staf2Utierr7zm4;ayDg2iffitUub0;li1G;lub3Rme0JnD;calv9zale0I;aj,i;l,mDordaL;en7;iev3B;gnJlGmaFnd2No,rDs2Nuthi0;cDza;ia;ge;eaElD;agh0i,o;no;e,on;ab0erMiIjeldsted,lor9oGrFuD;cDent9ji3F;hs;an1Wiedm4;ntaDrt6st0urni0;na;lipEsD;ch0;ovD;!ic;hatAnandeVrD;arDei8;a,i;ov2;dHinste6riksCsDva0D;cob2ZpDtra2X;inoDosiM;za;en,s3;er,is3wards;aUeMiKjurhuJoHrisco0YuEvorakD;!oQ;arte,boEmitru,rDt2U;and,ic;is;g4he0Hmingu7n2Ord19tD;to;us;aDmitr29ssanayake;s,z; GbnaFlEmirDrvis1Lvi,w4;!ov2;gado,ic;th;bo0groot,jo03lEsilDvri9;va;a cruz,e3uD;ca;hl,mcevsBnErw6t2EviD;d5es,s;ieDku1S;ls1;ki;a05e00hNiobMlarkLoFrD;ivDuz;elli;h1lGntFop0rDs26x;byn,reD;a,ia;i,rer0O;em4liD;ns;!e;anu;aLeIiu,oGriDuJwe;stD;eDiaD;ns1;i,ng,uFwDy;!dhury;!n,onEuD;ng;!g;kEnDtterjee,v7;!d,g;ma,raboD;rty;bGl09ng2rD;eghetEnD;a,y;ti;an,ota0M;cer9lder3mpbeIrFstDvadi08;iDro;llo;doEt0uDvalho;so;so,zo;ll;es;a09eXhUiSlNoGrFyD;rne,tyD;qi;ank5iem,ooks,yant;gdan5nFruya,su,uchEyHziD;c,n5;ard;darDik;enD;ko;ov;aEondD;al;nEzD;ev2;co;ancRshwD;as;a01oDuiy4;umDwmD;ik;ckNethov1gu,ktLnJrD;gGisFnD;ascoDds1;ni;ha;er,mD;ann;gtDit7nett;ss3;asD;hi;er,ham;b2ch,ez,hMiley,kk0nHrDu0;bEnDua;es,i0;ieDosa;ri;dDik;a8yopadhyD;ay;ra;er;k,ng;ic;cosZdYguilXkhtXlSnJrGsl4yD;aEd6;in;la;aEsl4;an;ujo,ya;dFgelD;ovD;!a;ersGov,reD;aDjL;ss1;en;en,on,s3;on;eksejGiyGmeiFvD;ar7es;ez;da;ev;ar;ams;ta\",\n    WeekDay: \"true\\xa6fri2mon2s1t0wednesd3;hurs1ues1;aturd1und1;!d0;ay0;!s\",\n    Month: \"true\\xa6aBdec9feb7j2mar,nov9oct1sep0;!t8;!o8;an3u0;l1n0;!e;!y;!u1;!ru0;ary;!em0;ber;pr1ug0;!ust;!il\",\n    Date: \"true\\xa6ago,t2week0yesterd4; e0e0;nd;mr2o0;d0morrow;ay;!w\",\n    FirstName: \"true\\xa6aLblair,cHdevGgabrieFhinaEjCk9l8m4nelly,quinn,re3s0;h0umit;ay,e0iloh;a,lby;g6ne;a1el0ina,org5;!okuh9;naia,r0;ion,lo;ashawn,uca;asCe1ir0rE;an;lsAnyat2rry;am0ess6ie,ude;ie,m5;ta;le;an,on;as2h0;arl0eyenne;ie;ey,sidy;lex2ndr1ubr0;ey;a,ea;is\",\n    Person: \"true\\xa6ashton kutchTbScNdLeJgastOhHinez,jFkEleDmCnettKoBp9r4s3t2v0;a0irgin maH;lentino rossi,n go3;aylor,heresa may,iger woods,yra banks;addam hussain,carlett johanssKlobodan milosevic,uC;ay romano,e3o1ush limbau0;gh;d stewart,nald0;inho,o;ese witherspoFilly;a0ipJ;lmIris hiltD;prah winfrFra;essiaen,itt romnEubarek;bron james,e;anye west,iefer sutherland,obe bryant;aime,effers8k rowli0;ng;alle ber0itlBulk hogan;ry;ff0meril lagasse,zekiel;ie;a0enzel washingt2ick wolf;lt1nte;ar1lint0;on;dinal wols1son0;! palm2;ey;arack obama,rock;er\",\n    Verb: \"true\\xa6awak9born,cannot,fr8g7h5k3le2m1s0wors9;e8h3;ake sure,sg;ngth6ss6;eep tabs,n0;own;as0e2;!t2;iv1onna;ight0;en\",\n    PhrasalVerb: \"true\\xa60:7L;1:79;2:7X;3:7N;4:72;5:80;6:7P;7:6V;8:78;9:7J;A:6W;B:5Z;C:7S;D:7K;a81b6Lc5Rd5Me5Lf4Kg41h3Kiron0j3Gk3Bl2Vm2Jn2Ho2Fp1Wquiet7Ar1Js0CtSuQvacuum 1wHyammer9zE;eroBip FonE;e0k0;by,up;aLeHhGiForErit5G;d 1k33;mp0n2Vpe0r7s7;eel Dip 85;aFiEn2J;gh 09rd0;n Dr E;d2in,o5J;it 61k7lk6rm 6Csh 7Nt6Qv51;rge9sE;e AherB;aTeRhPiLoJrGuEype 69;ckBrn E;d2in,o3Sup;aFiEot0y 2I;ckle6Rp 7T;ck6Qde Y;ne6Pp Es4O;d2o73up;ck GdFe Egh6Bme0p o0Gre0;aw3ba4d2in,up;e 61y 1;by,o7D;ink Erow 6D;ba4ov8up;aEe 5Zll53;m 1r X;ck9ke Flk E;ov8u54;aEba4d2in,o3Cup;ba4ft8p59w3;a0Jc0Ie0Ch08i05l01m00nZoYpTquare StKuIwE;earGiE;ngFtch E;aw3ba4o77; by;ck Eit 1m 1ss0;in,up;aJe0WiIoGrEuc3G;aigh1WiE;ke 6Gn3A;p Erm1Z;by,in,o6T;n3Br 1tc3T;c3Amp0nd Er6Zve6y 1;ba4d2up;d2o6Pup;ar37eHiGlFrEur9;ing9uc7;a3Fit 5B;l13n 1;e5Sll0;be2Wrt0;ap 4Sow D;ash 5Foke0;eep FiEow A;c3Wp 1;in,oE;ff,v8;gn 4XngFt Ez7;d2o5up; al54le0;aGoEu4T;ot Eut0w 6D;aw3ba4f3Go67;c2PdeBk58ve6;e Ill1And HtE; Etl4H;d2in,o5upE;!on;aw3ba4d2in,o27up;o5Mto;al51out0rap51;il6v7;aPeMiLoHuE;b 4Ule0n Estl7;aEba4d2in5Jo3Ut39u3S;c26w3;ll Got FuE;g2Tnd6;a27f30o5;arCin,o5;ng 53p6;aEel6inBnt0;c5Dd E;o31u0I;c24t0;aSeRiPlNoLrIsyc2HuE;ll Gt E;aEba4d2in,o1Ot3Gup;p3Lw3;ap3Kd2in,o5t3Eup;attle9ess FiHoE;p 1;ah1Oon;iEp 5Hr3Yur4Jwer 5H;nt0;ay4DuE;gBmp A;ck Eg0le9n Ap4A;o2Yup;el 4KncilB;c42ir 3Un0ss GtFy E;ba4o54; d2c24;aw3ba4o18;pEw3X;e3Wt D;arrow46erd0oE;d6te45;aMeJiIoGuE;ddl7lE;l 3I;c1Dp 1uth6ve E;al3Nd2in,o5up;ss0x 1;asur7lFss E;a1Gup;t A;ke Fn ArEs1Px0;k Ary6;do,o48up;aRePiKoEuck0;aIc3Hg HoEse0;k Ese3F;aft8ba4d2forw2Jin46ov8uE;nd8p;in,o0M;d A;e HghtGnFsEv1V;ten 4M;e 1k 1; 1e37;arCd2;av1Jt 37velE; o3U;c7p 1sh Etch9ugh6y20;in3Uo5;eFick6nock E;d2o3Q;eEyB;l 2Pp E;aw3ba4d2fTin,o07to,up;aGoFuE;ic7mpB;ke31t35;c3Azz 1;aQeLiIoFuE;nker32rry 1s0W;lEneBrse2X;d Ee 1;ba4d2fast,o01up;de Ft E;ba4on,up;aw3o5;aElp0;d Gl 2Ar Et 1;fEof;rom;in,oTu1H;c02m 1nFve Ez25;it,to;d Eg 2FkerG;d2in,o5;aTeMive Kloss 22oGrFunE; f0N;in3How 2B; Eof 21;aFb1Dit,oErCt0Pu18;ff,n,v8;bo5ft8hKw3;aw3ba4d2in,oEup,w3;ff,n,ut;aJek0t E;aFb17d2oErCup;ff,n,ut,v8;cFhEl1XrCt,w3;ead;ross;r 1;d aFnE;g 1;bo5;a08e01iSlOoKrGuE;cEel 1;k 1;eFighten Eown9y 1;aw3o2S;eEshe1N; 1z7;lGol E;aEwi1G;bo5rC;d Alow 1;aFeEip0;sh0;g Ake0mErE;e 2R;gLlJnHrFsEzzle0;h 2P;e Em 1;aw3ba4up;d0isE;h 1;e El 19;aw3fJ;ht ba4ure0;eJnFsE;s 1;cGd E;fEo25;or;e D;dVl 1;cIll Erm0t0W;ap04bGd2in,oFtE;hrough;ff,ut,v8;a4ehi20;e 0L;at0dge0nd 0Ky7;oHrE;aFess Aop E;aw3bUin,o1E;g9w9; 0Dubl7;aXhUlean AoHrEut 10;ack9eep Eoss D;by,d2oEup;n,ut;me HoFuntE; o1Q;k 1l E;d2o1I;aKbJforHin,oGtFuE;nd8;ogeth8;ut,v8;th,wE;ard;a4y;pErCw3;art;eEipB;ck Der E;on,up;lKncel0rHsGtch FveB; in;o19up;h Dt6;ry FvE;e Y;aw3o15;l Em05;aEba4d2o13up;rCw3;a0Ke0Bl04oVrJuE;bblGcklWil02lk AndlWrn 08st FtEy 13zz6;t D;in,o5up;e E;ov8;anOeaMiFush E;o0Oup;ghIng E;aFba4d2forEin,o5up;th;bo5lErCw3;ong;teE;n 1;k E;d2in,o5up;ch0;arLgKil An7oHssGttlFunce Ex D;aw3ba4;e A; arC;k Dt 1;e 1;d2up; d2;d 1;aJeed0oEurt0;cGw E;aw3ba4d2o5up;ck;k E;in,oL;ck0nk0st6; oKaHef 1nd E;d2ov8up;er;up;r0t E;d2in,oEup;ff,ut;ff,nE;to;ck Kil0nGrgFsE;h D;ain9e D;g Dk9; on;in,o5; o5;aw3d2o5up;ay;cNdJsk Guction6; oE;ff;arCo5;ouE;nd;d E;d2oEup;ff,n;own;t E;o5up;ut\",\n    Modal: \"true\\xa6c5lets,m4ought3sh1w0;ill,o5;a0o4;ll,nt;! to,a;ay,ight,ust;an,o0;uld\",\n    Adjective: \"true\\xa60:7P;1:84;2:83;3:8A;4:7W;5:5S;6:4N;7:4O;8:58;9:6I;A:81;a6Wb6Gc63d5Je54f4Hg49h3Wi39j37k36l2Vm2Ln2Bo1Wp1Dquack,r12s0Ft07uMvJwByear5;arp0eFholeEiDoB;man5oBu6P;d6Rzy;despr7Ls5S;!sa7;eClBste2A;co1Nl o4W;!k5;aCiBola4M;b89ce versa,ol5H;ca3gabo6Gnilla;ltUnHpCrb5Msu4tterB;!mo7G; Eb1SpDsBti1M;ca7etBide dKtairs;!ti2;er,i3U;f36to da1;aLbeco75convin29deIeHfair,ivers4knGprecedVrEsCwB;iel3Nritt6A;i1XuB;pervis0spec3Y;eBu5;cognHgul6Tl6T;own;ndi2v64xpect0;cid0rB;!grou5ZsB;iz0tood;b7pp0Dssu6UuthorB;iz0;i26ra;aGeEhDi6AoCrB;i1oubl0us3M;geth8p,rp6Vuc67;ough4Wril33;en60l32mpBrr2X;o6Ati2;boo,lBn;ent0;aWcVeThSiQmug,nobbi3LoOpNqueami3LtFuBymb6H;bDi gener5DpBrpri6D;erBre0N;! dup8b,i2C;du0seq52;anda77eGiFrBunni2y3F;aightCiB;ki2p0; fBfB;or5K;ll,r5S;aBreotyp0;dfa6Cmi2;a55ec2Gir1Hlend6Cot on; call0le,mb8phist1XrBu0Vvi48;d6Ary;gnifica3nB;ce51g7;am2Re8ocki2ut;cBda1em5lfi32ni1Wpa6Jre6;o1Er42;at5Gient28reec5G;cr0me;aJeEiCoB;bu60tt51uQy4;ghtBv4;!-2Bf9;ar,bel,condi1du6Dfres5AlEpublic42sCtard0vB;ea26;is4CoB;lu1na3;aQe1Cuc4A;b5TciBllyi2;al,st;aOeLicayu6lac5Ropuli5QrCuB;bl5Jmp0n51;eGiDoB;!b07fu5RmiBp8;ne3si2;mCor,sBva1;ti6;a53e;ci5MmB;a0EiB;er,um;ac20rBti1;feAma2XpleBv38;xi2;rBst;allelDtB;-tiBi4;me;!ed;bLffJkIld fashion0nHpGrg1Eth8utFvB;al,erB;!all,niCt,wB;eiBrouB;ght;do0Ter,g2Qsi4B;en,posi1; boa5Og2Oli6;!ay; gua5MbBli6;eat;eDsB;cBer0Eole1;e6u3O;d2Xse;aJeIiHoBua4X;nFrCtB;ab7;thB;!eB;rn;chala3descri58stop;ght5;arby,cessa44ighbor5xt;k0usia1A;aIeGiDoBultip7;bi7derBl0Vnth5ot,st;a1n;nBx0;dblo0RiaBor;tu37;ande3Qdi4NnaBre;ci2;cBgenta,in,j01keshift,le,mmoth,ny,sculi6;ab33ho;aKeFiCoBu15;uti14vi2;mCteraB;l,te;it0;ftEgBth4;al,eCitiB;ma1;nda3K;!-0C;ngu3Zst,tt8;ap1Xind5no0A;agg0uB;niMstifi0veni7;de4gno4Klleg4mQnEpso 20rB;a1rB;eleBita0J;va3; KaJbr0corIdGfluenQiQnFsEtCviB;go0Fti2;aAen3SoxB;ic3B;a6i2Vul0D;a1er,oce3;iCoB;or;reA;deq3Qppr33;fBsitu,vitro;ro3;mFpB;arDerfeAoBrop8;li1rtB;a3ed;ti4;eBi0S;d2Vn3C;aIeFiDoBumdr3I;ne36ok0rrBs08ur5;if2Z;ghfalut1QspB;an2X;aClB;liYpf9;li2;lEnDrB;d04roB;wi2;dy;f,low0;ainf9ener2Oiga24lHoGraDuB;ilBng ho;ty;cCtB;ef9is;ef9;ne,od;ea2Iob4;aTeNinMlKoFrB;a1VeDoz1MustB;raB;ti2;e2Gq10tf9;oDrB; keeps,eBm8tuna1;g03ign;liB;sh;aBue3;g31tte1P;al,i1;dFmCrB;ti7;a7ini6;ne;le; up;bl0i3l27r Cux,voB;ri1uri1;oBreac1E;ff;aLfficie3lKmHnFreAthere4veExB;aAcess,pe1QtraCuB;be2Nl0E;!va1E;n,ryday; BcouraEti0O;rou1sui1;erCiB;ne3;gi2;abo23dMe17i1;g8sB;t,ygB;oi2;er;aReJiDoBrea14ue;mina3ne,ubB;le,tf9;dact1Bfficu1OsCvB;er1K;creDeas0gruntl0hone1FordCtB;a3ressM;er5;et; HadpGfFgene1PliDrang0spe1PtCvoB;ut;ail0ermin0;be1Mca1ghB;tf9;ia3;an;facto;i5magBngeroUs0G;ed,i2;ly;ertaMhief,ivil,oDrB;aBowd0u0G;mp0vZz0;loImGnCrrBve0P;eAu1I;cre1fu0LgrDsCtB;empo0Dra0E;ta3;ue3;mer08pleB;te,x;ni4ss4;in;aNeIizarHlFoCrB;and new,isk,okN;gCna fiUttom,urgeoB;is;us;ank,indB;!i2;re;autif9hiDloCnBst,yoD;eUt;v0w;nd;ul;ckCnkru0WrrB;en;!wards; priori,b0Mc0Jd09fra08g04h03lYmWntiquVppSrMsIttracti06utheHvEwB;aCkB;wa0T;ke,re;ant garCerB;age;de;ntU;leep,piDsuDtonB;isB;hi2;ri2;ab,bitEroDtiB;fiB;ci4;ga3;raB;ry;are3etiNrB;oprB;ia1;at0;aJuB;si2;arEcohCeBiIl,oof;rt;olB;ic;mi2;ead;ainDgressiConiB;zi2;ve;st;id; IeGuFvB;aCerB;se;nc0;ed;lt;pt,qB;ua1;hoc,infinitB;um;cuCtu4u1;al;ra1;erLlKoIruHsCuB;nda3;e3oCtraA;ct;lu1rbi2;ng;te;pt;aBve;rd;aze,e;ra3;nt\",\n    Comparable: \"true\\xa60:41;1:4I;2:45;3:2Y;4:4B;5:3X;a4Ob44c3Od3De35f2Rg2Fh24i1Vj1Uk1Rl1Jm1Dn17o15p0Vqu0Tr0KsTtMuIvFw7y6za13;ell27ou4;aBe9hi1Yi7r6;o4y;ck0Ode,l6n1ry,se;d,y;a6i4Mt;k,ry;n1Tr6sK;m,y;a7e6ulgar;nge5rda2xi4;g9in,st;g0n6pco3Mse5;like0t6;i1r6;ue;aAen9hi8i7ough,r6;anqu2Oen1ue;dy,g3Sme0ny,r09;ck,n,rs2P;d40se;ll,me,rt,s6wd45;te5;aVcarUeThRiQkin0FlMmKoHpGqua1FtAu7w6;eet,ift;b7dd13per0Gr6;e,re2H;sta2Ft3;aAe9iff,r7u6;pXr1;a6ict,o4;ig3Fn0U;a1ep,rn;le,rk;e22i3Fright0;ci28ft,l7o6re,ur;n,thi4;emn,id;a6el0ooth;ll,rt;e8i6ow,y;ck,g35m6;!y;ek,nd3D;ck,l0mp3;a6iTort,rill,y;dy,ll0Xrp;cu0Rve0Rxy;ce,ed,y;d,fe,int0l1Vv14;aBe9i8o6ude;mantic,o1Isy,u6;gh,nd;ch,pe,tzy;a6d,mo0H;dy,l;gg7ndom,p6re,w;id;ed;ai2i6;ck,et;aEhoDi1QlCoBr8u6;ny,r6;e,p3;egna2ic7o6;fouYud;ey,k0;li04or,te1B;ain,easa2;ny;in5le;dd,f6i0ld,ranQ;fi10;aAe8i7o6;b3isy,rm15sy;ce,mb3;a6w;r,t;ive,rr01;aAe8ild,o7u6;nda19te;ist,o1;a6ek,llX;n,s0ty;d,tuQ;aBeAi9o6ucky;f0Un7o1Du6ve0w17y0T;d,sy;e0g;g1Tke0tt3ve0;an,wd;me,r6te;ge;e7i6;nd;en;ol0ui1P;cy,ll,n6;sBt6;e6ima8;llege2r6;es7media6;te;ti4;ecu6ta2;re;aEeBiAo8u6;ge,m6ng1R;b3id;ll6me0t;ow;gh,l0;a6f04sita2;dy,v6;en0y;nd1Hppy,r6te5;d,sh;aGenFhDiClBoofy,r6;a9e8is0o6ue1E;o6ss;vy;at,en,y;nd,y;ad,ib,ooI;a2d1;a6o6;st0;t3uiY;u1y;aIeeb3iDlat,oAr8u6;ll,n6r14;!ny;aHe6iend0;e,sh;a7r6ul;get5mG;my;erce8n6rm;an6e;ciC;! ;le;ir,ke,n0Fr,st,t,ulA;aAerie,mp9sse7v6xtre0Q;il;nti6;al;ty;r7s6;tern,y;ly,th0;aFeCi9r7u6;ll,mb;u6y;nk;r7vi6;ne;e,ty;a6ep,nD;d6f,r;!ly;mp,pp03rk;aHhDlAo8r7u6;dd0r0te;isp,uel;ar6ld,mmon,ol,st0ward0zy;se;e6ou1;a6vW;n,r;ar8e6il0;ap,e6;sy;mi4;gey,lm8r6;e5i4;ful;!i4;aNiLlIoEr8u6;r0sy;ly;aAi7o6;ad,wn;ef,g7llia2;nt;ht;sh,ve;ld,r7un6;cy;ed,i4;ng;a7o6ue;nd,o1;ck,nd;g,tt6;er;d,ld,w1;dy;bsu9ng8we6;so6;me;ry;rd\",\n    TextOrdinal: \"true\\xa6bGeDf9hundredHmGnin7qu6s4t0zeroH;enGh1rFwe0;lfFn9;ir0ousandE;d,t4;e0ixt9;cond,ptAvent8xtA;adr9int9;et0th;e6ie8;i2o0;r0urt3;tie5;ft1rst;ight0lev1;e0h,ie2;en1;illion0;th\",\n    Cardinal: \"true\\xa6bHeEf8hundred,mHnineAone,qu6s4t0zero;en,h2rGw0;e0o;lve,n8;irt9ousandEree;e0ix5;pt1ven4xt1;adr0int0;illion;i3o0;r1ur0;!t2;ty;ft0ve;e2y;ight0lev1;!e0y;en;illion0;!s\",\n    Expression: \"true\\xa6a02b01dXeVfuck,gShLlImHnGoDpBshAtsk,u7voi04w3y0;a1eLu0;ck,p;!a,hoo,y;h1ow,t0;af,f;e0oa;e,w;gh,h0;! 0h,m;huh,oh;eesh,hh,it;ff,hew,l0sst;ease,z;h1o0w,y;h,o,ps;!h;ah,ope;eh,mm;m1ol0;!s;ao,fao;a4e2i,mm,oly1urr0;ah;! mo6;e,ll0y;!o;ha0i;!ha;ah,ee,o0rr;l0odbye;ly;e0h,t cetera,ww;k,p;'oh,a0uh;m0ng;mit,n0;!it;ah,oo,ye; 1h0rgh;!em;la\",\n    Adverb: \"true\\xa6a08by 06d02eYfShQinPjustOkinda,mMnJoEpCquite,r9s5t2up1very,well,ye0;p,s; to,wards5;h1iny bit,o0wiO;o,t6ward;en,us;eldom,o0uch;!me1rt0; of;hYtimes,w09;a1e0;alT;ndomSthN;ar excellDer0oint blank; Nhaps;f3n0;ce0ly;! 0;ag02moW; courIten;ewKo0; longEt 0;onIwithstanding;aybe,eanwhiAore0;!ovB;! aboU;deed,steV;en0;ce;or2u0;lArther0;!moJ; 0ev3;examp0good,suH;le;n1v0;er; mas0ough;se;e0irect1; 1finite0;ly;ju8trop;far,n0;ow; DbroCd nauseam,gBl6ny3part,s2t 0w4;be6l0mo6wor6;arge,ea5; soon,ide;mo1w0;ay;re;l 1mo0one,ready,so,ways;st;b1t0;hat;ut;ain;ad;lot,posteriori\",\n    Determiner: \"true\\xa6aBboth,d9e6few,l4mu8neiDown,plenty,s3th2various,wh0;at0ich0;evC;at,e4is,ose;everal,ome;a,e0;!ast,s;a1i6l0very;!se;ch;e0u;!s;!n0;!o0y;th0;er\"\n}, ar = function(e) {\n    const t = e.split(\"|\").reduce((e, t)=>{\n        const r = t.split(\"\\xa6\");\n        return e[r[0]] = r[1], e;\n    }, {}), r = {};\n    return Object.keys(t).forEach(function(e) {\n        const a = tr(t[e]);\n        \"true\" === e && (e = !0);\n        for(let t = 0; t < a.length; t++){\n            const n = a[t];\n            !0 === r.hasOwnProperty(n) ? !1 === Array.isArray(r[n]) ? r[n] = [\n                r[n],\n                e\n            ] : r[n].push(e) : r[n] = e;\n        }\n    }), r;\n};\nlet nr = {\n    \"20th century fox\": \"Organization\",\n    \"7 eleven\": \"Organization\",\n    \"motel 6\": \"Organization\",\n    g8: \"Organization\",\n    vh1: \"Organization\",\n    q1: \"Date\",\n    q2: \"Date\",\n    q3: \"Date\",\n    q4: \"Date\",\n    her: [\n        \"Possessive\",\n        \"Pronoun\"\n    ],\n    his: [\n        \"Possessive\",\n        \"Pronoun\"\n    ],\n    their: [\n        \"Possessive\",\n        \"Pronoun\"\n    ],\n    themselves: [\n        \"Possessive\",\n        \"Pronoun\"\n    ],\n    your: [\n        \"Possessive\",\n        \"Pronoun\"\n    ],\n    our: [\n        \"Possessive\",\n        \"Pronoun\"\n    ],\n    my: [\n        \"Possessive\",\n        \"Pronoun\"\n    ],\n    its: [\n        \"Possessive\",\n        \"Pronoun\"\n    ]\n};\nconst ir = {\n    Unit: (e, t)=>{\n        e[t] = [\n            \"Abbreviation\",\n            \"Unit\"\n        ];\n    },\n    Cardinal: (e, t)=>{\n        e[t] = [\n            \"TextValue\",\n            \"Cardinal\"\n        ];\n    },\n    TextOrdinal: (e, t)=>{\n        e[t] = [\n            \"Ordinal\",\n            \"TextValue\"\n        ], e[t + \"s\"] = [\n            \"TextValue\",\n            \"Fraction\"\n        ];\n    },\n    Singular: (e, t, r)=>{\n        e[t] = \"Singular\";\n        let a = r.transforms.toPlural(t, r);\n        e[a] = e[a] || \"Plural\";\n    },\n    Infinitive: (e, t, r)=>{\n        e[t] = \"Infinitive\";\n        let a = r.transforms.conjugate(t, r), n = Object.keys(a);\n        for(let t = 0; t < n.length; t++){\n            let r = a[n[t]];\n            e[r] = e[r] || n[t];\n        }\n    },\n    Comparable: (e, t, r)=>{\n        e[t] = \"Comparable\";\n        let a = r.transforms.adjectives(t), n = Object.keys(a);\n        for(let t = 0; t < n.length; t++){\n            let r = a[n[t]];\n            e[r] = e[r] || n[t];\n        }\n    },\n    PhrasalVerb: (e, t, r)=>{\n        e[t] = [\n            \"PhrasalVerb\",\n            \"Infinitive\"\n        ];\n        let a = t.split(\" \"), n = r.transforms.conjugate(a[0], r), i = Object.keys(n);\n        for(let t = 0; t < i.length; t++){\n            let o = n[i[t]] + \" \" + a[1];\n            e[o] = e[o] || [\n                \"PhrasalVerb\",\n                i[t]\n            ], r.hasCompound[n[i[t]]] = !0;\n        }\n    },\n    Demonym: (e, t, r)=>{\n        e[t] = \"Demonym\";\n        let a = r.transforms.toPlural(t, r);\n        e[a] = e[a] || [\n            \"Demonym\",\n            \"Plural\"\n        ];\n    }\n}, or = function(e, t, r) {\n    Object.keys(e).forEach((a)=>{\n        let n = e[a];\n        \"Abbreviation\" !== n && \"Unit\" !== n || (r.cache.abbreviations[a] = !0);\n        let i = a.split(\" \");\n        i.length > 1 && (r.hasCompound[i[0]] = !0), void 0 === ir[n] ? void 0 !== t[a] ? (\"string\" == typeof t[a] && (t[a] = [\n            t[a]\n        ]), \"string\" == typeof n ? t[a].push(n) : t[a] = t[a].concat(n)) : t[a] = n : ir[n](t, a, r);\n    });\n};\nvar sr = {\n    buildOut: function(e) {\n        let t = Object.assign({}, nr);\n        return Object.keys(rr).forEach((r)=>{\n            let a = ar(rr[r]);\n            Object.keys(a).forEach((e)=>{\n                a[e] = r;\n            }), or(a, t, e);\n        }), t;\n    },\n    addWords: or\n};\nvar lr = function(e) {\n    let t = e.irregulars.nouns, r = Object.keys(t);\n    for(let a = 0; a < r.length; a++){\n        const n = r[a];\n        e.words[n] = \"Singular\", e.words[t[n]] = \"Plural\";\n    }\n    let a = e.irregulars.verbs, n = Object.keys(a);\n    for(let t = 0; t < n.length; t++){\n        const r = n[t];\n        e.words[r] = e.words[r] || \"Infinitive\";\n        let i = e.transforms.conjugate(r, e);\n        i = Object.assign(i, a[r]), Object.keys(i).forEach((t)=>{\n            e.words[i[t]] = e.words[i[t]] || t, \"Participle\" === e.words[i[t]] && (e.words[i[t]] = t);\n        });\n    }\n};\nconst ur = {\n    g: \"Gerund\",\n    prt: \"Participle\",\n    perf: \"PerfectTense\",\n    pst: \"PastTense\",\n    fut: \"FuturePerfect\",\n    pres: \"PresentTense\",\n    pluperf: \"Pluperfect\",\n    a: \"Actor\"\n};\nlet cr = {\n    act: {\n        a: \"_or\"\n    },\n    ache: {\n        pst: \"ached\",\n        g: \"aching\"\n    },\n    age: {\n        g: \"ageing\",\n        pst: \"aged\",\n        pres: \"ages\"\n    },\n    aim: {\n        a: \"_er\",\n        g: \"_ing\",\n        pst: \"_ed\"\n    },\n    arise: {\n        prt: \"_n\",\n        pst: \"arose\"\n    },\n    babysit: {\n        a: \"_ter\",\n        pst: \"babysat\"\n    },\n    ban: {\n        a: \"\",\n        g: \"_ning\",\n        pst: \"_ned\"\n    },\n    be: {\n        a: \"\",\n        g: \"am\",\n        prt: \"been\",\n        pst: \"was\",\n        pres: \"is\"\n    },\n    beat: {\n        a: \"_er\",\n        g: \"_ing\",\n        prt: \"_en\"\n    },\n    become: {\n        prt: \"_\"\n    },\n    begin: {\n        g: \"_ning\",\n        prt: \"begun\",\n        pst: \"began\"\n    },\n    being: {\n        g: \"are\",\n        pst: \"were\",\n        pres: \"are\"\n    },\n    bend: {\n        prt: \"bent\"\n    },\n    bet: {\n        a: \"_ter\",\n        prt: \"_\"\n    },\n    bind: {\n        pst: \"bound\"\n    },\n    bite: {\n        g: \"biting\",\n        prt: \"bitten\",\n        pst: \"bit\"\n    },\n    bleed: {\n        pst: \"bled\",\n        prt: \"bled\"\n    },\n    blow: {\n        prt: \"_n\",\n        pst: \"blew\"\n    },\n    boil: {\n        a: \"_er\"\n    },\n    brake: {\n        prt: \"broken\"\n    },\n    break: {\n        pst: \"broke\"\n    },\n    breed: {\n        pst: \"bred\"\n    },\n    bring: {\n        pst: \"brought\",\n        prt: \"brought\"\n    },\n    broadcast: {\n        pst: \"_\"\n    },\n    budget: {\n        pst: \"_ed\"\n    },\n    build: {\n        pst: \"built\",\n        prt: \"built\"\n    },\n    burn: {\n        prt: \"_ed\"\n    },\n    burst: {\n        prt: \"_\"\n    },\n    buy: {\n        pst: \"bought\",\n        prt: \"bought\"\n    },\n    can: {\n        a: \"\",\n        fut: \"_\",\n        g: \"\",\n        pst: \"could\",\n        perf: \"could\",\n        pluperf: \"could\",\n        pres: \"_\"\n    },\n    catch: {\n        pst: \"caught\"\n    },\n    choose: {\n        g: \"choosing\",\n        prt: \"chosen\",\n        pst: \"chose\"\n    },\n    cling: {\n        prt: \"clung\"\n    },\n    come: {\n        prt: \"_\",\n        pst: \"came\",\n        g: \"coming\"\n    },\n    compete: {\n        a: \"competitor\",\n        g: \"competing\",\n        pst: \"_d\"\n    },\n    cost: {\n        pst: \"_\"\n    },\n    creep: {\n        prt: \"crept\"\n    },\n    cut: {\n        prt: \"_\"\n    },\n    deal: {\n        pst: \"_t\",\n        prt: \"_t\"\n    },\n    develop: {\n        a: \"_er\",\n        g: \"_ing\",\n        pst: \"_ed\"\n    },\n    die: {\n        g: \"dying\",\n        pst: \"_d\"\n    },\n    dig: {\n        g: \"_ging\",\n        pst: \"dug\",\n        prt: \"dug\"\n    },\n    dive: {\n        prt: \"_d\"\n    },\n    do: {\n        pst: \"did\",\n        pres: \"_es\"\n    },\n    draw: {\n        prt: \"_n\",\n        pst: \"drew\"\n    },\n    dream: {\n        prt: \"_t\"\n    },\n    drink: {\n        prt: \"drunk\",\n        pst: \"drank\"\n    },\n    drive: {\n        g: \"driving\",\n        prt: \"_n\",\n        pst: \"drove\"\n    },\n    drop: {\n        g: \"_ping\",\n        pst: \"_ped\"\n    },\n    eat: {\n        a: \"_er\",\n        g: \"_ing\",\n        prt: \"_en\",\n        pst: \"ate\"\n    },\n    edit: {\n        pst: \"_ed\",\n        g: \"_ing\"\n    },\n    egg: {\n        pst: \"_ed\"\n    },\n    fall: {\n        prt: \"_en\",\n        pst: \"fell\"\n    },\n    feed: {\n        prt: \"fed\",\n        pst: \"fed\"\n    },\n    feel: {\n        a: \"_er\",\n        pst: \"felt\"\n    },\n    fight: {\n        pst: \"fought\",\n        prt: \"fought\"\n    },\n    find: {\n        pst: \"found\"\n    },\n    flee: {\n        g: \"_ing\",\n        prt: \"fled\"\n    },\n    fling: {\n        prt: \"flung\"\n    },\n    fly: {\n        prt: \"flown\",\n        pst: \"flew\"\n    },\n    forbid: {\n        pst: \"forbade\"\n    },\n    forget: {\n        g: \"_ing\",\n        prt: \"forgotten\",\n        pst: \"forgot\"\n    },\n    forgive: {\n        g: \"forgiving\",\n        prt: \"_n\",\n        pst: \"forgave\"\n    },\n    free: {\n        a: \"\",\n        g: \"_ing\"\n    },\n    freeze: {\n        g: \"freezing\",\n        prt: \"frozen\",\n        pst: \"froze\"\n    },\n    get: {\n        pst: \"got\",\n        prt: \"gotten\"\n    },\n    give: {\n        g: \"giving\",\n        prt: \"_n\",\n        pst: \"gave\"\n    },\n    go: {\n        prt: \"_ne\",\n        pst: \"went\",\n        pres: \"goes\"\n    },\n    grow: {\n        prt: \"_n\"\n    },\n    guide: {\n        pst: \"_d\"\n    },\n    hang: {\n        pst: \"hung\",\n        prt: \"hung\"\n    },\n    have: {\n        g: \"having\",\n        pst: \"had\",\n        prt: \"had\",\n        pres: \"has\"\n    },\n    hear: {\n        pst: \"_d\",\n        prt: \"_d\"\n    },\n    hide: {\n        prt: \"hidden\",\n        pst: \"hid\"\n    },\n    hit: {\n        prt: \"_\"\n    },\n    hold: {\n        pst: \"held\",\n        prt: \"held\"\n    },\n    hurt: {\n        pst: \"_\",\n        prt: \"_\"\n    },\n    ice: {\n        g: \"icing\",\n        pst: \"_d\"\n    },\n    imply: {\n        pst: \"implied\",\n        pres: \"implies\"\n    },\n    is: {\n        a: \"\",\n        g: \"being\",\n        pst: \"was\",\n        pres: \"_\"\n    },\n    keep: {\n        prt: \"kept\"\n    },\n    kneel: {\n        prt: \"knelt\"\n    },\n    know: {\n        prt: \"_n\"\n    },\n    lay: {\n        pst: \"laid\",\n        prt: \"laid\"\n    },\n    lead: {\n        pst: \"led\",\n        prt: \"led\"\n    },\n    leap: {\n        prt: \"_t\"\n    },\n    leave: {\n        pst: \"left\",\n        prt: \"left\"\n    },\n    lend: {\n        prt: \"lent\"\n    },\n    lie: {\n        g: \"lying\",\n        pst: \"lay\"\n    },\n    light: {\n        pst: \"lit\",\n        prt: \"lit\"\n    },\n    log: {\n        g: \"_ging\",\n        pst: \"_ged\"\n    },\n    loose: {\n        prt: \"lost\"\n    },\n    lose: {\n        g: \"losing\",\n        pst: \"lost\"\n    },\n    make: {\n        pst: \"made\",\n        prt: \"made\"\n    },\n    mean: {\n        pst: \"_t\",\n        prt: \"_t\"\n    },\n    meet: {\n        a: \"_er\",\n        g: \"_ing\",\n        pst: \"met\",\n        prt: \"met\"\n    },\n    miss: {\n        pres: \"_\"\n    },\n    name: {\n        g: \"naming\"\n    },\n    patrol: {\n        g: \"_ling\",\n        pst: \"_led\"\n    },\n    pay: {\n        pst: \"paid\",\n        prt: \"paid\"\n    },\n    prove: {\n        prt: \"_n\"\n    },\n    puke: {\n        g: \"puking\"\n    },\n    put: {\n        prt: \"_\"\n    },\n    quit: {\n        prt: \"_\"\n    },\n    read: {\n        pst: \"_\",\n        prt: \"_\"\n    },\n    ride: {\n        prt: \"ridden\"\n    },\n    reside: {\n        pst: \"_d\"\n    },\n    ring: {\n        pst: \"rang\",\n        prt: \"rung\"\n    },\n    rise: {\n        fut: \"will have _n\",\n        g: \"rising\",\n        prt: \"_n\",\n        pst: \"rose\",\n        pluperf: \"had _n\"\n    },\n    rub: {\n        g: \"_bing\",\n        pst: \"_bed\"\n    },\n    run: {\n        g: \"_ning\",\n        prt: \"_\",\n        pst: \"ran\"\n    },\n    say: {\n        pst: \"said\",\n        prt: \"said\",\n        pres: \"_s\"\n    },\n    seat: {\n        pst: \"sat\",\n        prt: \"sat\"\n    },\n    see: {\n        g: \"_ing\",\n        prt: \"_n\",\n        pst: \"saw\"\n    },\n    seek: {\n        prt: \"sought\"\n    },\n    sell: {\n        pst: \"sold\",\n        prt: \"sold\"\n    },\n    send: {\n        prt: \"sent\"\n    },\n    set: {\n        prt: \"_\"\n    },\n    sew: {\n        prt: \"_n\"\n    },\n    shake: {\n        prt: \"_n\"\n    },\n    shave: {\n        prt: \"_d\"\n    },\n    shed: {\n        g: \"_ding\",\n        pst: \"_\",\n        pres: \"_s\"\n    },\n    shine: {\n        pst: \"shone\",\n        prt: \"shone\"\n    },\n    shoot: {\n        pst: \"shot\",\n        prt: \"shot\"\n    },\n    show: {\n        pst: \"_ed\"\n    },\n    shut: {\n        prt: \"_\"\n    },\n    sing: {\n        prt: \"sung\",\n        pst: \"sang\"\n    },\n    sink: {\n        pst: \"sank\",\n        pluperf: \"had sunk\"\n    },\n    sit: {\n        pst: \"sat\"\n    },\n    ski: {\n        pst: \"_ied\"\n    },\n    slay: {\n        prt: \"slain\"\n    },\n    sleep: {\n        prt: \"slept\"\n    },\n    slide: {\n        pst: \"slid\",\n        prt: \"slid\"\n    },\n    smash: {\n        pres: \"_es\"\n    },\n    sneak: {\n        prt: \"snuck\"\n    },\n    speak: {\n        fut: \"will have spoken\",\n        prt: \"spoken\",\n        pst: \"spoke\",\n        perf: \"have spoken\",\n        pluperf: \"had spoken\"\n    },\n    speed: {\n        prt: \"sped\"\n    },\n    spend: {\n        prt: \"spent\"\n    },\n    spill: {\n        prt: \"_ed\",\n        pst: \"spilt\"\n    },\n    spin: {\n        g: \"_ning\",\n        pst: \"spun\",\n        prt: \"spun\"\n    },\n    spit: {\n        prt: \"spat\"\n    },\n    split: {\n        prt: \"_\"\n    },\n    spread: {\n        pst: \"_\"\n    },\n    spring: {\n        prt: \"sprung\"\n    },\n    stand: {\n        pst: \"stood\"\n    },\n    steal: {\n        a: \"_er\",\n        pst: \"stole\"\n    },\n    stick: {\n        pst: \"stuck\"\n    },\n    sting: {\n        pst: \"stung\"\n    },\n    stink: {\n        pst: \"stunk\",\n        prt: \"stunk\"\n    },\n    stream: {\n        a: \"_er\"\n    },\n    strew: {\n        prt: \"_n\"\n    },\n    strike: {\n        g: \"striking\",\n        pst: \"struck\"\n    },\n    suit: {\n        a: \"_er\",\n        g: \"_ing\",\n        pst: \"_ed\"\n    },\n    sware: {\n        prt: \"sworn\"\n    },\n    swear: {\n        pst: \"swore\"\n    },\n    sweep: {\n        prt: \"swept\"\n    },\n    swim: {\n        g: \"_ming\",\n        pst: \"swam\"\n    },\n    swing: {\n        pst: \"swung\"\n    },\n    take: {\n        fut: \"will have _n\",\n        pst: \"took\",\n        perf: \"have _n\",\n        pluperf: \"had _n\"\n    },\n    teach: {\n        pst: \"taught\",\n        pres: \"_es\"\n    },\n    tear: {\n        pst: \"tore\"\n    },\n    tell: {\n        pst: \"told\"\n    },\n    think: {\n        pst: \"thought\"\n    },\n    thrive: {\n        prt: \"_d\"\n    },\n    tie: {\n        g: \"tying\",\n        pst: \"_d\"\n    },\n    undergo: {\n        prt: \"_ne\"\n    },\n    understand: {\n        pst: \"understood\"\n    },\n    upset: {\n        prt: \"_\"\n    },\n    wait: {\n        a: \"_er\",\n        g: \"_ing\",\n        pst: \"_ed\"\n    },\n    wake: {\n        pst: \"woke\"\n    },\n    wear: {\n        pst: \"wore\"\n    },\n    weave: {\n        prt: \"woven\"\n    },\n    wed: {\n        pst: \"wed\"\n    },\n    weep: {\n        prt: \"wept\"\n    },\n    win: {\n        g: \"_ning\",\n        pst: \"won\"\n    },\n    wind: {\n        prt: \"wound\"\n    },\n    withdraw: {\n        pst: \"withdrew\"\n    },\n    wring: {\n        prt: \"wrung\"\n    },\n    write: {\n        g: \"writing\",\n        prt: \"written\",\n        pst: \"wrote\"\n    }\n}, hr = Object.keys(cr);\nfor(let e = 0; e < hr.length; e++){\n    const t = hr[e];\n    let r = {};\n    Object.keys(cr[t]).forEach((e)=>{\n        let a = cr[t][e];\n        a = a.replace(\"_\", t), r[ur[e]] = a;\n    }), cr[t] = r;\n}\nvar dr = cr;\nconst gr = {\n    b: [\n        {\n            reg: /([^aeiou][aeiou])b$/i,\n            repl: {\n                pr: \"$1bs\",\n                pa: \"$1bbed\",\n                gr: \"$1bbing\"\n            }\n        }\n    ],\n    d: [\n        {\n            reg: /(end)$/i,\n            repl: {\n                pr: \"$1s\",\n                pa: \"ent\",\n                gr: \"$1ing\",\n                ar: \"$1er\"\n            }\n        },\n        {\n            reg: /(eed)$/i,\n            repl: {\n                pr: \"$1s\",\n                pa: \"$1ed\",\n                gr: \"$1ing\",\n                ar: \"$1er\"\n            }\n        },\n        {\n            reg: /(ed)$/i,\n            repl: {\n                pr: \"$1s\",\n                pa: \"$1ded\",\n                ar: \"$1der\",\n                gr: \"$1ding\"\n            }\n        },\n        {\n            reg: /([^aeiou][ou])d$/i,\n            repl: {\n                pr: \"$1ds\",\n                pa: \"$1dded\",\n                gr: \"$1dding\"\n            }\n        }\n    ],\n    e: [\n        {\n            reg: /(eave)$/i,\n            repl: {\n                pr: \"$1s\",\n                pa: \"$1d\",\n                gr: \"eaving\",\n                ar: \"$1r\"\n            }\n        },\n        {\n            reg: /(ide)$/i,\n            repl: {\n                pr: \"$1s\",\n                pa: \"ode\",\n                gr: \"iding\",\n                ar: \"ider\"\n            }\n        },\n        {\n            reg: /(t|sh?)(ake)$/i,\n            repl: {\n                pr: \"$1$2s\",\n                pa: \"$1ook\",\n                gr: \"$1aking\",\n                ar: \"$1$2r\"\n            }\n        },\n        {\n            reg: /w(ake)$/i,\n            repl: {\n                pr: \"w$1s\",\n                pa: \"woke\",\n                gr: \"waking\",\n                ar: \"w$1r\"\n            }\n        },\n        {\n            reg: /m(ake)$/i,\n            repl: {\n                pr: \"m$1s\",\n                pa: \"made\",\n                gr: \"making\",\n                ar: \"m$1r\"\n            }\n        },\n        {\n            reg: /(a[tg]|i[zn]|ur|nc|gl|is)e$/i,\n            repl: {\n                pr: \"$1es\",\n                pa: \"$1ed\",\n                gr: \"$1ing\"\n            }\n        },\n        {\n            reg: /([bd]l)e$/i,\n            repl: {\n                pr: \"$1es\",\n                pa: \"$1ed\",\n                gr: \"$1ing\"\n            }\n        },\n        {\n            reg: /(om)e$/i,\n            repl: {\n                pr: \"$1es\",\n                pa: \"ame\",\n                gr: \"$1ing\"\n            }\n        }\n    ],\n    g: [\n        {\n            reg: /([^aeiou][aou])g$/i,\n            repl: {\n                pr: \"$1gs\",\n                pa: \"$1gged\",\n                gr: \"$1gging\"\n            }\n        }\n    ],\n    h: [\n        {\n            reg: /(..)([cs]h)$/i,\n            repl: {\n                pr: \"$1$2es\",\n                pa: \"$1$2ed\",\n                gr: \"$1$2ing\"\n            }\n        }\n    ],\n    k: [\n        {\n            reg: /(ink)$/i,\n            repl: {\n                pr: \"$1s\",\n                pa: \"unk\",\n                gr: \"$1ing\",\n                ar: \"$1er\"\n            }\n        }\n    ],\n    m: [\n        {\n            reg: /([^aeiou][aeiou])m$/i,\n            repl: {\n                pr: \"$1ms\",\n                pa: \"$1mmed\",\n                gr: \"$1mming\"\n            }\n        }\n    ],\n    n: [\n        {\n            reg: /(en)$/i,\n            repl: {\n                pr: \"$1s\",\n                pa: \"$1ed\",\n                gr: \"$1ing\"\n            }\n        }\n    ],\n    p: [\n        {\n            reg: /(e)(ep)$/i,\n            repl: {\n                pr: \"$1$2s\",\n                pa: \"$1pt\",\n                gr: \"$1$2ing\",\n                ar: \"$1$2er\"\n            }\n        },\n        {\n            reg: /([^aeiou][aeiou])p$/i,\n            repl: {\n                pr: \"$1ps\",\n                pa: \"$1pped\",\n                gr: \"$1pping\"\n            }\n        },\n        {\n            reg: /([aeiu])p$/i,\n            repl: {\n                pr: \"$1ps\",\n                pa: \"$1p\",\n                gr: \"$1pping\"\n            }\n        }\n    ],\n    r: [\n        {\n            reg: /([td]er)$/i,\n            repl: {\n                pr: \"$1s\",\n                pa: \"$1ed\",\n                gr: \"$1ing\"\n            }\n        },\n        {\n            reg: /(er)$/i,\n            repl: {\n                pr: \"$1s\",\n                pa: \"$1ed\",\n                gr: \"$1ing\"\n            }\n        }\n    ],\n    s: [\n        {\n            reg: /(ish|tch|ess)$/i,\n            repl: {\n                pr: \"$1es\",\n                pa: \"$1ed\",\n                gr: \"$1ing\"\n            }\n        }\n    ],\n    t: [\n        {\n            reg: /(ion|end|e[nc]t)$/i,\n            repl: {\n                pr: \"$1s\",\n                pa: \"$1ed\",\n                gr: \"$1ing\"\n            }\n        },\n        {\n            reg: /(.eat)$/i,\n            repl: {\n                pr: \"$1s\",\n                pa: \"$1ed\",\n                gr: \"$1ing\"\n            }\n        },\n        {\n            reg: /([aeiu])t$/i,\n            repl: {\n                pr: \"$1ts\",\n                pa: \"$1t\",\n                gr: \"$1tting\"\n            }\n        },\n        {\n            reg: /([^aeiou][aeiou])t$/i,\n            repl: {\n                pr: \"$1ts\",\n                pa: \"$1tted\",\n                gr: \"$1tting\"\n            }\n        }\n    ],\n    w: [\n        {\n            reg: /(.llow)$/i,\n            repl: {\n                pr: \"$1s\",\n                pa: \"$1ed\"\n            }\n        },\n        {\n            reg: /(..)(ow)$/i,\n            repl: {\n                pr: \"$1$2s\",\n                pa: \"$1ew\",\n                gr: \"$1$2ing\",\n                prt: \"$1$2n\"\n            }\n        }\n    ],\n    y: [\n        {\n            reg: /(i|f|rr)y$/i,\n            repl: {\n                pr: \"$1ies\",\n                pa: \"$1ied\",\n                gr: \"$1ying\"\n            }\n        }\n    ],\n    z: [\n        {\n            reg: /([aeiou]zz)$/i,\n            repl: {\n                pr: \"$1es\",\n                pa: \"$1ed\",\n                gr: \"$1ing\"\n            }\n        }\n    ]\n}, pr = {\n    pr: \"PresentTense\",\n    pa: \"PastTense\",\n    gr: \"Gerund\",\n    prt: \"Participle\",\n    ar: \"Actor\"\n}, mr = function(e, t) {\n    let r = {}, a = Object.keys(t.repl);\n    for(let n = 0; n < a.length; n += 1){\n        let i = a[n];\n        r[pr[i]] = e.replace(t.reg, t.repl[i]);\n    }\n    return r;\n};\nconst fr = /[bcdfghjklmnpqrstvwxz]y$/;\nconst br = function(e = \"\") {\n    let t = e[e.length - 1];\n    if (!0 === gr.hasOwnProperty(t)) for(let r = 0; r < gr[t].length; r += 1){\n        if (!0 === gr[t][r].reg.test(e)) return mr(e, gr[t][r]);\n    }\n    return {};\n}, yr = {\n    Gerund: (e)=>\"e\" === e.charAt(e.length - 1) ? e.replace(/e$/, \"ing\") : e + \"ing\",\n    PresentTense: (e)=>\"s\" === e.charAt(e.length - 1) ? e + \"es\" : !0 === fr.test(e) ? e.slice(0, -1) + \"ies\" : e + \"s\",\n    PastTense: (e)=>\"e\" === e.charAt(e.length - 1) ? e + \"d\" : \"ed\" === e.substr(-2) ? e : !0 === fr.test(e) ? e.slice(0, -1) + \"ied\" : e + \"ed\"\n};\nvar vr = function(e = \"\", t) {\n    let r = {};\n    return t && t.irregulars && !0 === t.irregulars.verbs.hasOwnProperty(e) && (r = Object.assign({}, t.irregulars.verbs[e])), r = Object.assign({}, br(e), r), void 0 === r.Gerund && (r.Gerund = yr.Gerund(e)), void 0 === r.PastTense && (r.PastTense = yr.PastTense(e)), void 0 === r.PresentTense && (r.PresentTense = yr.PresentTense(e)), r;\n};\nconst wr = [\n    /ght$/,\n    /nge$/,\n    /ough$/,\n    /ain$/,\n    /uel$/,\n    /[au]ll$/,\n    /ow$/,\n    /oud$/,\n    /...p$/\n], kr = [\n    /ary$/\n], Ar = {\n    nice: \"nicest\",\n    late: \"latest\",\n    hard: \"hardest\",\n    inner: \"innermost\",\n    outer: \"outermost\",\n    far: \"furthest\",\n    worse: \"worst\",\n    bad: \"worst\",\n    good: \"best\",\n    big: \"biggest\",\n    large: \"largest\"\n}, Dr = [\n    {\n        reg: /y$/i,\n        repl: \"iest\"\n    },\n    {\n        reg: /([aeiou])t$/i,\n        repl: \"$1ttest\"\n    },\n    {\n        reg: /([aeou])de$/i,\n        repl: \"$1dest\"\n    },\n    {\n        reg: /nge$/i,\n        repl: \"ngest\"\n    },\n    {\n        reg: /([aeiou])te$/i,\n        repl: \"$1test\"\n    }\n];\nconst $r = [\n    /ght$/,\n    /nge$/,\n    /ough$/,\n    /ain$/,\n    /uel$/,\n    /[au]ll$/,\n    /ow$/,\n    /old$/,\n    /oud$/,\n    /e[ae]p$/\n], Pr = [\n    /ary$/,\n    /ous$/\n], Er = {\n    grey: \"greyer\",\n    gray: \"grayer\",\n    green: \"greener\",\n    yellow: \"yellower\",\n    red: \"redder\",\n    good: \"better\",\n    well: \"better\",\n    bad: \"worse\",\n    sad: \"sadder\",\n    big: \"bigger\"\n}, Hr = [\n    {\n        reg: /y$/i,\n        repl: \"ier\"\n    },\n    {\n        reg: /([aeiou])t$/i,\n        repl: \"$1tter\"\n    },\n    {\n        reg: /([aeou])de$/i,\n        repl: \"$1der\"\n    },\n    {\n        reg: /nge$/i,\n        repl: \"nger\"\n    }\n];\nconst jr = {\n    toSuperlative: function(e) {\n        if (Ar.hasOwnProperty(e)) return Ar[e];\n        for(let t = 0; t < Dr.length; t++)if (Dr[t].reg.test(e)) return e.replace(Dr[t].reg, Dr[t].repl);\n        for(let t = 0; t < kr.length; t++)if (!0 === kr[t].test(e)) return null;\n        for(let t = 0; t < wr.length; t++)if (!0 === wr[t].test(e)) return \"e\" === e.charAt(e.length - 1) ? e + \"st\" : e + \"est\";\n        return e + \"est\";\n    },\n    toComparative: function(e) {\n        if (Er.hasOwnProperty(e)) return Er[e];\n        for(let t = 0; t < Hr.length; t++)if (!0 === Hr[t].reg.test(e)) return e.replace(Hr[t].reg, Hr[t].repl);\n        for(let t = 0; t < Pr.length; t++)if (!0 === Pr[t].test(e)) return null;\n        for(let t = 0; t < $r.length; t++)if (!0 === $r[t].test(e)) return e + \"er\";\n        return !0 === /e$/.test(e) ? e + \"r\" : e + \"er\";\n    }\n};\nvar Nr = function(e) {\n    let t = {}, r = jr.toSuperlative(e);\n    r && (t.Superlative = r);\n    let a = jr.toComparative(e);\n    return a && (t.Comparative = a), t;\n};\nconst xr = {\n    a: [\n        [\n            /(antenn|formul|nebul|vertebr|vit)a$/i,\n            \"$1ae\"\n        ],\n        [\n            /([ti])a$/i,\n            \"$1a\"\n        ]\n    ],\n    e: [\n        [\n            /(kn|l|w)ife$/i,\n            \"$1ives\"\n        ],\n        [\n            /(hive)$/i,\n            \"$1s\"\n        ],\n        [\n            /([m|l])ouse$/i,\n            \"$1ice\"\n        ],\n        [\n            /([m|l])ice$/i,\n            \"$1ice\"\n        ]\n    ],\n    f: [\n        [\n            /^(dwar|handkerchie|hoo|scar|whar)f$/i,\n            \"$1ves\"\n        ],\n        [\n            /^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)f$/i,\n            \"$1ves\"\n        ]\n    ],\n    i: [\n        [\n            /(octop|vir)i$/i,\n            \"$1i\"\n        ]\n    ],\n    m: [\n        [\n            /([ti])um$/i,\n            \"$1a\"\n        ]\n    ],\n    n: [\n        [\n            /^(oxen)$/i,\n            \"$1\"\n        ]\n    ],\n    o: [\n        [\n            /(al|ad|at|er|et|ed|ad)o$/i,\n            \"$1oes\"\n        ]\n    ],\n    s: [\n        [\n            /(ax|test)is$/i,\n            \"$1es\"\n        ],\n        [\n            /(alias|status)$/i,\n            \"$1es\"\n        ],\n        [\n            /sis$/i,\n            \"ses\"\n        ],\n        [\n            /(bu)s$/i,\n            \"$1ses\"\n        ],\n        [\n            /(sis)$/i,\n            \"ses\"\n        ],\n        [\n            /^(?!talis|.*hu)(.*)man$/i,\n            \"$1men\"\n        ],\n        [\n            /(octop|vir|radi|nucle|fung|cact|stimul)us$/i,\n            \"$1i\"\n        ]\n    ],\n    x: [\n        [\n            /(matr|vert|ind|cort)(ix|ex)$/i,\n            \"$1ices\"\n        ],\n        [\n            /^(ox)$/i,\n            \"$1en\"\n        ]\n    ],\n    y: [\n        [\n            /([^aeiouy]|qu)y$/i,\n            \"$1ies\"\n        ]\n    ],\n    z: [\n        [\n            /(quiz)$/i,\n            \"$1zes\"\n        ]\n    ]\n}, Fr = /(x|ch|sh|s|z)$/;\nvar Cr = function(e = \"\", t) {\n    let r = t.irregulars.nouns;\n    if (r.hasOwnProperty(e)) return r[e];\n    let a = function(e) {\n        let t = e[e.length - 1];\n        if (!0 === xr.hasOwnProperty(t)) for(let r = 0; r < xr[t].length; r += 1){\n            let a = xr[t][r][0];\n            if (!0 === a.test(e)) return e.replace(a, xr[t][r][1]);\n        }\n        return null;\n    }(e);\n    return null !== a ? a : Fr.test(e) ? e + \"es\" : e + \"s\";\n};\nconst Br = [\n    [\n        /([^v])ies$/i,\n        \"$1y\"\n    ],\n    [\n        /ises$/i,\n        \"isis\"\n    ],\n    [\n        /(kn|[^o]l|w)ives$/i,\n        \"$1ife\"\n    ],\n    [\n        /^((?:ca|e|ha|(?:our|them|your)?se|she|wo)l|lea|loa|shea|thie)ves$/i,\n        \"$1f\"\n    ],\n    [\n        /^(dwar|handkerchie|hoo|scar|whar)ves$/i,\n        \"$1f\"\n    ],\n    [\n        /(antenn|formul|nebul|vertebr|vit)ae$/i,\n        \"$1a\"\n    ],\n    [\n        /(octop|vir|radi|nucle|fung|cact|stimul)(i)$/i,\n        \"$1us\"\n    ],\n    [\n        /(buffal|tomat|tornad)(oes)$/i,\n        \"$1o\"\n    ],\n    [\n        /(eas)es$/i,\n        \"$1e\"\n    ],\n    [\n        /(..[aeiou]s)es$/i,\n        \"$1\"\n    ],\n    [\n        /(vert|ind|cort)(ices)$/i,\n        \"$1ex\"\n    ],\n    [\n        /(matr|append)(ices)$/i,\n        \"$1ix\"\n    ],\n    [\n        /(x|ch|ss|sh|z|o)es$/i,\n        \"$1\"\n    ],\n    [\n        /men$/i,\n        \"man\"\n    ],\n    [\n        /(n)ews$/i,\n        \"$1ews\"\n    ],\n    [\n        /([ti])a$/i,\n        \"$1um\"\n    ],\n    [\n        /([^aeiouy]|qu)ies$/i,\n        \"$1y\"\n    ],\n    [\n        /(s)eries$/i,\n        \"$1eries\"\n    ],\n    [\n        /(m)ovies$/i,\n        \"$1ovie\"\n    ],\n    [\n        /([m|l])ice$/i,\n        \"$1ouse\"\n    ],\n    [\n        /(cris|ax|test)es$/i,\n        \"$1is\"\n    ],\n    [\n        /(alias|status)es$/i,\n        \"$1\"\n    ],\n    [\n        /(ss)$/i,\n        \"$1\"\n    ],\n    [\n        /(ics)$/i,\n        \"$1\"\n    ],\n    [\n        /s$/i,\n        \"\"\n    ]\n];\nvar Gr = function(e, t) {\n    let r = t.irregulars.nouns, a = (n = r, Object.keys(n).reduce((e, t)=>(e[n[t]] = t, e), {}));\n    var n;\n    if (a.hasOwnProperty(e)) return a[e];\n    for(let t = 0; t < Br.length; t++)if (!0 === Br[t][0].test(e)) return e = e.replace(Br[t][0], Br[t][1]);\n    return e;\n};\nvar zr = {\n    Participle: [\n        {\n            reg: /own$/i,\n            to: \"ow\"\n        },\n        {\n            reg: /(.)un([g|k])$/i,\n            to: \"$1in$2\"\n        }\n    ],\n    Actor: [\n        {\n            reg: /(er)er$/i,\n            to: \"$1\"\n        }\n    ],\n    PresentTense: [\n        {\n            reg: /(..)(ies)$/i,\n            to: \"$1y\"\n        },\n        {\n            reg: /(tch|sh)es$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /(ss|zz)es$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /([tzlshicgrvdnkmu])es$/i,\n            to: \"$1e\"\n        },\n        {\n            reg: /(n[dtk]|c[kt]|[eo]n|i[nl]|er|a[ytrl])s$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /(ow)s$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /(op)s$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /([eirs])ts$/i,\n            to: \"$1t\"\n        },\n        {\n            reg: /(ll)s$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /(el)s$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /(ip)es$/i,\n            to: \"$1e\"\n        },\n        {\n            reg: /ss$/i,\n            to: \"ss\"\n        },\n        {\n            reg: /s$/i,\n            to: \"\"\n        }\n    ],\n    Gerund: [\n        {\n            reg: /(..)(p|d|t|g){2}ing$/i,\n            to: \"$1$2\"\n        },\n        {\n            reg: /(ll|ss|zz)ing$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /([^aeiou])ying$/i,\n            to: \"$1y\"\n        },\n        {\n            reg: /([^ae]i.)ing$/i,\n            to: \"$1e\"\n        },\n        {\n            reg: /(ea[dklnrtv])ing$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /(ch|sh)ing$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /(z)ing$/i,\n            to: \"$1e\"\n        },\n        {\n            reg: /(a[gdkvtc])ing$/i,\n            to: \"$1e\"\n        },\n        {\n            reg: /(u[rtcbn])ing$/i,\n            to: \"$1e\"\n        },\n        {\n            reg: /([^o]o[bdknprv])ing$/i,\n            to: \"$1e\"\n        },\n        {\n            reg: /([tbckg]l)ing$/i,\n            to: \"$1e\"\n        },\n        {\n            reg: /(c|s)ing$/i,\n            to: \"$1e\"\n        },\n        {\n            reg: /(..)ing$/i,\n            to: \"$1\"\n        }\n    ],\n    PastTense: [\n        {\n            reg: /(ued)$/i,\n            to: \"ue\"\n        },\n        {\n            reg: /ea(rn|l|m)ed$/i,\n            to: \"ea$1\"\n        },\n        {\n            reg: /a([^aeiouy])ed$/i,\n            to: \"a$1e\"\n        },\n        {\n            reg: /([aeiou]zz)ed$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /(e|i)lled$/i,\n            to: \"$1ll\"\n        },\n        {\n            reg: /(.)(sh|ch)ed$/i,\n            to: \"$1$2\"\n        },\n        {\n            reg: /(tl|gl)ed$/i,\n            to: \"$1e\"\n        },\n        {\n            reg: /(um?pt?)ed$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /(ss)ed$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /pped$/i,\n            to: \"p\"\n        },\n        {\n            reg: /tted$/i,\n            to: \"t\"\n        },\n        {\n            reg: /(..)gged$/i,\n            to: \"$1g\"\n        },\n        {\n            reg: /(..)lked$/i,\n            to: \"$1lk\"\n        },\n        {\n            reg: /([^aeiouy][aeiou])ked$/i,\n            to: \"$1ke\"\n        },\n        {\n            reg: /(.[aeiou])led$/i,\n            to: \"$1l\"\n        },\n        {\n            reg: /(..)(h|ion|n[dt]|ai.|[cs]t|pp|all|ss|tt|int|ail|ld|en|oo.|er|k|pp|w|ou.|rt|ght|rm)ed$/i,\n            to: \"$1$2\"\n        },\n        {\n            reg: /(.ut)ed$/i,\n            to: \"$1e\"\n        },\n        {\n            reg: /(.pt)ed$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /(us)ed$/i,\n            to: \"$1e\"\n        },\n        {\n            reg: /(dd)ed$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /(..[^aeiouy])ed$/i,\n            to: \"$1e\"\n        },\n        {\n            reg: /(..)ied$/i,\n            to: \"$1y\"\n        },\n        {\n            reg: /(.o)ed$/i,\n            to: \"$1o\"\n        },\n        {\n            reg: /(..i)ed$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /(.a[^aeiou])ed$/i,\n            to: \"$1\"\n        },\n        {\n            reg: /([aeiou][^aeiou])ed$/i,\n            to: \"$1e\"\n        },\n        {\n            reg: /([rl])ew$/i,\n            to: \"$1ow\"\n        },\n        {\n            reg: /([pl])t$/i,\n            to: \"$1t\"\n        }\n    ]\n};\nlet Ir = {\n    Gerund: [\n        \"ing\"\n    ],\n    Actor: [\n        \"erer\"\n    ],\n    Infinitive: [\n        \"ate\",\n        \"ize\",\n        \"tion\",\n        \"rify\",\n        \"then\",\n        \"ress\",\n        \"ify\",\n        \"age\",\n        \"nce\",\n        \"ect\",\n        \"ise\",\n        \"ine\",\n        \"ish\",\n        \"ace\",\n        \"ash\",\n        \"ure\",\n        \"tch\",\n        \"end\",\n        \"ack\",\n        \"and\",\n        \"ute\",\n        \"ade\",\n        \"ock\",\n        \"ite\",\n        \"ase\",\n        \"ose\",\n        \"use\",\n        \"ive\",\n        \"int\",\n        \"nge\",\n        \"lay\",\n        \"est\",\n        \"ain\",\n        \"ant\",\n        \"ent\",\n        \"eed\",\n        \"er\",\n        \"le\",\n        \"own\",\n        \"unk\",\n        \"ung\",\n        \"en\"\n    ],\n    PastTense: [\n        \"ed\",\n        \"lt\",\n        \"nt\",\n        \"pt\",\n        \"ew\",\n        \"ld\"\n    ],\n    PresentTense: [\n        \"rks\",\n        \"cks\",\n        \"nks\",\n        \"ngs\",\n        \"mps\",\n        \"tes\",\n        \"zes\",\n        \"ers\",\n        \"les\",\n        \"acks\",\n        \"ends\",\n        \"ands\",\n        \"ocks\",\n        \"lays\",\n        \"eads\",\n        \"lls\",\n        \"els\",\n        \"ils\",\n        \"ows\",\n        \"nds\",\n        \"ays\",\n        \"ams\",\n        \"ars\",\n        \"ops\",\n        \"ffs\",\n        \"als\",\n        \"urs\",\n        \"lds\",\n        \"ews\",\n        \"ips\",\n        \"es\",\n        \"ts\",\n        \"ns\"\n    ]\n};\nIr = Object.keys(Ir).reduce((e, t)=>(Ir[t].forEach((r)=>e[r] = t), e), {});\nconst Or = zr, Tr = Ir;\nconst Vr = Qt, Mr = sr, Jr = lr, Lr = St, Sr = {\n    nouns: {\n        addendum: \"addenda\",\n        alga: \"algae\",\n        alumna: \"alumnae\",\n        alumnus: \"alumni\",\n        analysis: \"analyses\",\n        antenna: \"antennae\",\n        appendix: \"appendices\",\n        avocado: \"avocados\",\n        axis: \"axes\",\n        bacillus: \"bacilli\",\n        barracks: \"barracks\",\n        beau: \"beaux\",\n        bus: \"buses\",\n        cactus: \"cacti\",\n        chateau: \"chateaux\",\n        child: \"children\",\n        circus: \"circuses\",\n        clothes: \"clothes\",\n        corpus: \"corpora\",\n        criterion: \"criteria\",\n        curriculum: \"curricula\",\n        database: \"databases\",\n        deer: \"deer\",\n        diagnosis: \"diagnoses\",\n        echo: \"echoes\",\n        embargo: \"embargoes\",\n        epoch: \"epochs\",\n        foot: \"feet\",\n        formula: \"formulae\",\n        fungus: \"fungi\",\n        genus: \"genera\",\n        goose: \"geese\",\n        halo: \"halos\",\n        hippopotamus: \"hippopotami\",\n        index: \"indices\",\n        larva: \"larvae\",\n        leaf: \"leaves\",\n        libretto: \"libretti\",\n        loaf: \"loaves\",\n        man: \"men\",\n        matrix: \"matrices\",\n        memorandum: \"memoranda\",\n        modulus: \"moduli\",\n        mosquito: \"mosquitoes\",\n        mouse: \"mice\",\n        nebula: \"nebulae\",\n        nucleus: \"nuclei\",\n        octopus: \"octopi\",\n        opus: \"opera\",\n        ovum: \"ova\",\n        ox: \"oxen\",\n        parenthesis: \"parentheses\",\n        person: \"people\",\n        phenomenon: \"phenomena\",\n        prognosis: \"prognoses\",\n        quiz: \"quizzes\",\n        radius: \"radii\",\n        referendum: \"referenda\",\n        rodeo: \"rodeos\",\n        sex: \"sexes\",\n        shoe: \"shoes\",\n        sombrero: \"sombreros\",\n        stimulus: \"stimuli\",\n        stomach: \"stomachs\",\n        syllabus: \"syllabi\",\n        synopsis: \"synopses\",\n        tableau: \"tableaux\",\n        thesis: \"theses\",\n        thief: \"thieves\",\n        tooth: \"teeth\",\n        tornado: \"tornados\",\n        tuxedo: \"tuxedos\",\n        vertebra: \"vertebrae\"\n    },\n    verbs: dr\n}, _r = {\n    conjugate: vr,\n    adjectives: Nr,\n    toPlural: Cr,\n    toSingular: Gr,\n    toInfinitive: function(e, t, r) {\n        if (!e) return \"\";\n        if (!0 === t.words.hasOwnProperty(e)) {\n            let r = t.irregulars.verbs, a = Object.keys(r);\n            for(let t = 0; t < a.length; t++){\n                let n = Object.keys(r[a[t]]);\n                for(let i = 0; i < n.length; i++)if (e === r[a[t]][n[i]]) return a[t];\n            }\n        }\n        if ((r = r || function(e) {\n            let t = e.substr(e.length - 3);\n            if (!0 === Tr.hasOwnProperty(t)) return Tr[t];\n            let r = e.substr(e.length - 2);\n            return !0 === Tr.hasOwnProperty(r) ? Tr[r] : \"s\" === e.substr(e.length - 1) ? \"PresentTense\" : null;\n        }(e)) && Or[r]) for(let t = 0; t < Or[r].length; t++){\n            const a = Or[r][t];\n            if (!0 === a.reg.test(e)) return e.replace(a.reg, a.to);\n        }\n        return e;\n    }\n};\nlet Kr = !1;\nclass qr {\n    constructor(){\n        Object.defineProperty(this, \"words\", {\n            enumerable: !1,\n            value: {},\n            writable: !0\n        }), Object.defineProperty(this, \"hasCompound\", {\n            enumerable: !1,\n            value: {},\n            writable: !0\n        }), Object.defineProperty(this, \"irregulars\", {\n            enumerable: !1,\n            value: Sr,\n            writable: !0\n        }), Object.defineProperty(this, \"tags\", {\n            enumerable: !1,\n            value: Object.assign({}, Vr),\n            writable: !0\n        }), Object.defineProperty(this, \"transforms\", {\n            enumerable: !1,\n            value: _r,\n            writable: !0\n        }), Object.defineProperty(this, \"taggers\", {\n            enumerable: !1,\n            value: [],\n            writable: !0\n        }), Object.defineProperty(this, \"cache\", {\n            enumerable: !1,\n            value: {\n                abbreviations: {}\n            }\n        }), this.words = Mr.buildOut(this), Jr(this);\n    }\n    verbose(e) {\n        return Kr = e, this;\n    }\n    isVerbose() {\n        return Kr;\n    }\n    addWords(e) {\n        let t = {};\n        Object.keys(e).forEach((r)=>{\n            let a = e[r];\n            r = r.toLowerCase().trim(), t[r] = a;\n        }), Mr.addWords(t, this.words, this);\n    }\n    addConjugations(e) {\n        return Object.assign(this.irregulars.verbs, e), this;\n    }\n    addPlurals(e) {\n        return Object.assign(this.irregulars.nouns, e), this;\n    }\n    addTags(e) {\n        return e = Object.assign({}, e), this.tags = Object.assign(this.tags, e), this.tags = Lr(this.tags), this;\n    }\n    postProcess(e) {\n        return this.taggers.push(e), this;\n    }\n    stats() {\n        return {\n            words: Object.keys(this.words).length,\n            plurals: Object.keys(this.irregulars.nouns).length,\n            conjugations: Object.keys(this.irregulars.verbs).length,\n            compounds: Object.keys(this.hasCompound).length,\n            postProcessors: this.taggers.length\n        };\n    }\n}\nconst Wr = function(e) {\n    return JSON.parse(JSON.stringify(e));\n};\nqr.prototype.clone = function() {\n    let e = new qr;\n    return e.words = Object.assign({}, this.words), e.hasCompound = Object.assign({}, this.hasCompound), e.irregulars = Wr(this.irregulars), e.tags = Wr(this.tags), e.transforms = this.transforms, e.taggers = this.taggers, e;\n};\nvar Rr = qr, Ur = {};\n!function(e) {\n    e.all = function() {\n        return this.parents()[0] || this;\n    }, e.parent = function() {\n        return this.from ? this.from : this;\n    }, e.parents = function(e) {\n        let t = [];\n        const r = function(e) {\n            e.from && (t.push(e.from), r(e.from));\n        };\n        return r(this), t = t.reverse(), \"number\" == typeof e ? t[e] : t;\n    }, e.clone = function(e) {\n        let t = this.list.map((t)=>t.clone(e));\n        return this.buildFrom(t);\n    }, e.wordCount = function() {\n        return this.list.reduce((e, t)=>e += t.wordCount(), 0);\n    }, e.wordcount = e.wordCount;\n}(Ur);\nvar Qr = {};\n!function(e) {\n    e.first = function(e) {\n        return void 0 === e ? this.get(0) : this.slice(0, e);\n    }, e.last = function(e) {\n        if (void 0 === e) return this.get(this.list.length - 1);\n        let t = this.list.length;\n        return this.slice(t - e, t);\n    }, e.slice = function(e, t) {\n        let r = this.list.slice(e, t);\n        return this.buildFrom(r);\n    }, e.eq = function(e) {\n        let t = this.list[e];\n        return void 0 === t ? this.buildFrom([]) : this.buildFrom([\n            t\n        ]);\n    }, e.get = e.eq, e.firstTerms = function() {\n        return this.match(\"^.\");\n    }, e.firstTerm = e.firstTerms, e.lastTerms = function() {\n        return this.match(\".$\");\n    }, e.lastTerm = e.lastTerms, e.termList = function(e) {\n        let t = [];\n        for(let r = 0; r < this.list.length; r++){\n            let a = this.list[r].terms();\n            for(let r = 0; r < a.length; r++)if (t.push(a[r]), void 0 !== e && void 0 !== t[e]) return t[e];\n        }\n        return t;\n    };\n    e.groups = function(e) {\n        return void 0 === e ? function(e) {\n            let t = {};\n            const r = {};\n            for(let t = 0; t < e.list.length; t++){\n                const a = e.list[t], n = Object.keys(a.groups).map((e)=>a.groups[e]);\n                for(let e = 0; e < n.length; e++){\n                    const { group: t, start: i, length: o } = n[e];\n                    r[t] || (r[t] = []), r[t].push(a.buildFrom(i, o));\n                }\n            }\n            const a = Object.keys(r);\n            for(let n = 0; n < a.length; n++){\n                const i = a[n];\n                t[i] = e.buildFrom(r[i]);\n            }\n            return t;\n        }(this) : (\"number\" == typeof e && (e = String(e)), function(e, t) {\n            const r = [];\n            for(let a = 0; a < e.list.length; a++){\n                const n = e.list[a];\n                let i = Object.keys(n.groups);\n                i = i.filter((e)=>n.groups[e].group === t), i.forEach((e)=>{\n                    r.push(n.buildFrom(n.groups[e].start, n.groups[e].length));\n                });\n            }\n            return e.buildFrom(r);\n        }(this, e) || this.buildFrom([]));\n    }, e.group = e.groups, e.sentences = function(e) {\n        let t = [];\n        return this.list.forEach((e)=>{\n            t.push(e.fullSentence());\n        }), \"number\" == typeof e ? this.buildFrom([\n            t[e]\n        ]) : this.buildFrom(t);\n    }, e.sentence = e.sentences;\n}(Qr);\nvar Zr = {};\nvar Xr = function(e, t) {\n    if (e._cache && !0 === e._cache.set) {\n        let { words: r, tags: a } = function(e) {\n            let t = [], r = [];\n            return e.forEach((e)=>{\n                !0 !== e.optional && !0 !== e.negative && (void 0 !== e.tag && t.push(e.tag), void 0 !== e.word && r.push(e.word));\n            }), {\n                tags: t,\n                words: r\n            };\n        }(t);\n        for(let t = 0; t < r.length; t++)if (void 0 === e._cache.words[r[t]]) return !1;\n        for(let t = 0; t < a.length; t++)if (void 0 === e._cache.tags[a[t]]) return !1;\n    }\n    return !0;\n};\n!function(e) {\n    const t = _e, r = Xr;\n    e.match = function(e, a = {}) {\n        \"string\" != typeof a && \"number\" != typeof a && null !== a || (a = {\n            group: a\n        });\n        let n = t(e, a);\n        if (0 === n.length) return this.buildFrom([]);\n        if (!1 === r(this, n)) return this.buildFrom([]);\n        let i = this.list.reduce((e, t)=>e.concat(t.match(n)), []);\n        return void 0 !== a.group && null !== a.group && \"\" !== a.group ? this.buildFrom(i).groups(a.group) : this.buildFrom(i);\n    }, e.not = function(e, a = {}) {\n        let n = t(e, a);\n        if (0 === n.length || !1 === r(this, n)) return this;\n        let i = this.list.reduce((e, t)=>e.concat(t.not(n)), []);\n        return this.buildFrom(i);\n    }, e.matchOne = function(e, a = {}) {\n        let n = t(e, a);\n        if (!1 === r(this, n)) return this.buildFrom([]);\n        for(let e = 0; e < this.list.length; e++){\n            let t = this.list[e].match(n, !0);\n            return this.buildFrom(t);\n        }\n        return this.buildFrom([]);\n    }, e.if = function(e, a = {}) {\n        let n = t(e, a);\n        if (!1 === r(this, n)) return this.buildFrom([]);\n        let i = this.list.filter((e)=>!0 === e.has(n));\n        return this.buildFrom(i);\n    }, e.ifNo = function(e, r = {}) {\n        let a = t(e, r), n = this.list.filter((e)=>!1 === e.has(a));\n        return this.buildFrom(n);\n    }, e.has = function(e, a = {}) {\n        let n = t(e, a);\n        return !1 !== r(this, n) && this.list.some((e)=>!0 === e.has(n));\n    }, e.lookAhead = function(e, r = {}) {\n        e || (e = \".*\");\n        let a = t(e, r), n = [];\n        return this.list.forEach((e)=>{\n            n = n.concat(e.lookAhead(a));\n        }), n = n.filter((e)=>e), this.buildFrom(n);\n    }, e.lookAfter = e.lookAhead, e.lookBehind = function(e, r = {}) {\n        e || (e = \".*\");\n        let a = t(e, r), n = [];\n        return this.list.forEach((e)=>{\n            n = n.concat(e.lookBehind(a));\n        }), n = n.filter((e)=>e), this.buildFrom(n);\n    }, e.lookBefore = e.lookBehind, e.before = function(e, r = {}) {\n        let a = t(e, r), n = this.if(a).list.map((e)=>{\n            let t = e.terms().map((e)=>e.id), r = e.match(a)[0], n = t.indexOf(r.start);\n            return 0 === n || -1 === n ? null : e.buildFrom(e.start, n);\n        });\n        return n = n.filter((e)=>null !== e), this.buildFrom(n);\n    }, e.after = function(e, r = {}) {\n        let a = t(e, r), n = this.if(a).list.map((e)=>{\n            let t = e.terms(), r = t.map((e)=>e.id), n = e.match(a)[0], i = r.indexOf(n.start);\n            if (-1 === i || !t[i + n.length]) return null;\n            let o = t[i + n.length].id, s = e.length - i - n.length;\n            return e.buildFrom(o, s);\n        });\n        return n = n.filter((e)=>null !== e), this.buildFrom(n);\n    }, e.hasAfter = function(e, t = {}) {\n        return this.filter((r)=>r.lookAfter(e, t).found);\n    }, e.hasBefore = function(e, t = {}) {\n        return this.filter((r)=>r.lookBefore(e, t).found);\n    };\n}(Zr);\nvar Yr = {};\nconst ea = function(e, t, r, a) {\n    let n = [];\n    \"string\" == typeof e && (n = e.split(\" \")), t.list.forEach((i)=>{\n        let o = i.terms();\n        !0 === r && (o = o.filter((r)=>r.canBe(e, t.world))), o.forEach((r, i)=>{\n            n.length > 1 ? n[i] && \".\" !== n[i] && r.tag(n[i], a, t.world) : r.tag(e, a, t.world);\n        });\n    });\n};\nYr.tag = function(e, t) {\n    return e ? (ea(e, this, !1, t), this) : this;\n}, Yr.tagSafe = function(e, t) {\n    return e ? (ea(e, this, !0, t), this) : this;\n}, Yr.unTag = function(e, t) {\n    return this.list.forEach((r)=>{\n        r.terms().forEach((r)=>r.unTag(e, t, this.world));\n    }), this;\n}, Yr.canBe = function(e) {\n    if (!e) return this;\n    let t = this.world, r = this.list.reduce((r, a)=>r.concat(a.canBe(e, t)), []);\n    return this.buildFrom(r);\n};\nvar ta = {\n    map: function(e) {\n        if (!e) return this;\n        let t = this.list.map((t, r)=>{\n            let a = this.buildFrom([\n                t\n            ]);\n            a.from = null;\n            let n = e(a, r);\n            return n && n.list && n.list[0] ? n.list[0] : n;\n        });\n        return t = t.filter((e)=>e), 0 === t.length ? this.buildFrom(t) : \"object\" != typeof t[0] || \"Phrase\" !== t[0].isA ? t : this.buildFrom(t);\n    },\n    forEach: function(e, t) {\n        return e ? (this.list.forEach((r, a)=>{\n            let n = this.buildFrom([\n                r\n            ]);\n            !0 === t && (n.from = null), e(n, a);\n        }), this) : this;\n    },\n    filter: function(e) {\n        if (!e) return this;\n        let t = this.list.filter((t, r)=>{\n            let a = this.buildFrom([\n                t\n            ]);\n            return a.from = null, e(a, r);\n        });\n        return this.buildFrom(t);\n    },\n    find: function(e) {\n        if (!e) return this;\n        let t = this.list.find((t, r)=>{\n            let a = this.buildFrom([\n                t\n            ]);\n            return a.from = null, e(a, r);\n        });\n        return t ? this.buildFrom([\n            t\n        ]) : void 0;\n    },\n    some: function(e) {\n        return e ? this.list.some((t, r)=>{\n            let a = this.buildFrom([\n                t\n            ]);\n            return a.from = null, e(a, r);\n        }) : this;\n    },\n    random: function(e) {\n        if (!this.found) return this;\n        let t = Math.floor(Math.random() * this.list.length);\n        if (void 0 === e) {\n            let e = [\n                this.list[t]\n            ];\n            return this.buildFrom(e);\n        }\n        return t + e > this.length && (t = this.length - e, t = t < 0 ? 0 : t), this.slice(t, t + e);\n    }\n}, ra = {};\nvar aa = function(e, t, r) {\n    let a = function(e, t = []) {\n        let r = {};\n        return e.forEach((e, a)=>{\n            let n = !0;\n            void 0 !== t[a] && (n = t[a]);\n            let i = (function(e) {\n                return e.split(/[ -]/g);\n            })(e = (e = (e || \"\").toLowerCase()).replace(/[,;.!?]+$/, \"\")).map((e)=>e.trim());\n            r[i[0]] = r[i[0]] || {}, 1 === i.length ? r[i[0]].value = n : (r[i[0]].more = r[i[0]].more || [], r[i[0]].more.push({\n                rest: i.slice(1),\n                value: n\n            }));\n        }), r;\n    }(e, t), n = [];\n    for(let e = 0; e < r.list.length; e++){\n        const t = r.list[e];\n        let i = t.terms().map((e)=>e.reduced);\n        for(let e = 0; e < i.length; e++)void 0 !== a[i[e]] && (void 0 !== a[i[e]].more && a[i[e]].more.forEach((r)=>{\n            if (void 0 === i[e + r.rest.length]) return;\n            !0 === r.rest.every((t, r)=>t === i[e + r + 1]) && n.push({\n                id: t.terms()[e].id,\n                value: r.value,\n                length: r.rest.length + 1\n            });\n        }), void 0 !== a[i[e]].value && n.push({\n            id: t.terms()[e].id,\n            value: a[i[e]].value,\n            length: 1\n        }));\n    }\n    return n;\n};\n!function(e) {\n    const t = aa;\n    e.lookup = function(e) {\n        let r = [], a = (n = e) && \"[object Object]\" === Object.prototype.toString.call(n);\n        var n;\n        !0 === a && (e = Object.keys(e).map((t)=>(r.push(e[t]), t))), \"string\" == typeof e && (e = [\n            e\n        ]), !0 !== this._cache.set && this.cache();\n        let i = t(e, r, this), o = this.list[0];\n        if (!0 === a) {\n            let e = {};\n            return i.forEach((t)=>{\n                e[t.value] = e[t.value] || [], e[t.value].push(o.buildFrom(t.id, t.length));\n            }), Object.keys(e).forEach((t)=>{\n                e[t] = this.buildFrom(e[t]);\n            }), e;\n        }\n        return i = i.map((e)=>o.buildFrom(e.id, e.length)), this.buildFrom(i);\n    }, e.lookUp = e.lookup;\n}(ra);\nvar na = {\n    cache: function(e) {\n        e = e || {};\n        let t = {}, r = {};\n        return this._cache.words = t, this._cache.tags = r, this._cache.set = !0, this.list.forEach((a, n)=>{\n            a.cache = a.cache || {}, a.terms().forEach((a)=>{\n                t[a.reduced] && !t.hasOwnProperty(a.reduced) || (t[a.reduced] = t[a.reduced] || [], t[a.reduced].push(n), Object.keys(a.tags).forEach((e)=>{\n                    r[e] = r[e] || [], r[e].push(n);\n                }), e.root && (a.setRoot(this.world), t[a.root] = [\n                    n\n                ]));\n            });\n        }), this;\n    },\n    uncache: function() {\n        return this._cache = {}, this.list.forEach((e)=>{\n            e.cache = {};\n        }), this.parents().forEach((e)=>{\n            e._cache = {}, e.list.forEach((e)=>{\n                e.cache = {};\n            });\n        }), this;\n    }\n}, ia = {};\nconst oa = xt;\nia.replaceWith = function(e, t = {}) {\n    return e ? (!0 === t && (t = {\n        keepTags: !0\n    }), !1 === t && (t = {\n        keepTags: !1\n    }), t = t || {}, this.uncache(), this.list.forEach((r)=>{\n        let a, n = e;\n        if (\"function\" == typeof e && (n = e(r)), n && \"object\" == typeof n && \"Doc\" === n.isA) a = n.list, this.pool().merge(n.pool());\n        else {\n            if (\"string\" != typeof n) return;\n            {\n                !1 !== t.keepCase && r.terms(0).isTitleCase() && (n = (i = n).charAt(0).toUpperCase() + i.substr(1)), a = oa(n, this.world, this.pool());\n                let e = this.buildFrom(a);\n                e.tagger(), a = e.list;\n            }\n        }\n        var i;\n        if (!0 === t.keepTags) {\n            let e = r.json({\n                terms: {\n                    tags: !0\n                }\n            }).terms;\n            a[0].terms().forEach((t, r)=>{\n                e[r] && t.tagSafe(e[r].tags, \"keptTag\", this.world);\n            });\n        }\n        r.replace(a[0], this);\n    }), this) : this.delete();\n}, ia.replace = function(e, t, r) {\n    return void 0 === t ? this.replaceWith(e, r) : (this.match(e).replaceWith(t, r), this);\n};\nvar sa = {};\n!function(e) {\n    const t = xt, r = function(e) {\n        return e && \"[object Object]\" === Object.prototype.toString.call(e);\n    }, a = function(e, r) {\n        let a = t(e, r.world)[0], n = r.buildFrom([\n            a\n        ]);\n        return n.tagger(), r.list = n.list, r;\n    };\n    e.append = function(e = \"\") {\n        return e ? this.found ? (this.uncache(), this.list.forEach((a)=>{\n            let n;\n            r(e) && \"Doc\" === e.isA ? n = e.list[0].clone() : \"string\" == typeof e && (n = t(e, this.world, this.pool())[0]), this.buildFrom([\n                n\n            ]).tagger(), a.append(n, this);\n        }), this) : a(e, this) : this;\n    }, e.insertAfter = e.append, e.insertAt = e.append, e.prepend = function(e) {\n        return e ? this.found ? (this.uncache(), this.list.forEach((a)=>{\n            let n;\n            r(e) && \"Doc\" === e.isA ? n = e.list[0].clone() : \"string\" == typeof e && (n = t(e, this.world, this.pool())[0]), this.buildFrom([\n                n\n            ]).tagger(), a.prepend(n, this);\n        }), this) : a(e, this) : this;\n    }, e.insertBefore = e.prepend, e.concat = function() {\n        this.uncache();\n        let e = this.list.slice(0);\n        for(let r = 0; r < arguments.length; r++){\n            let a = arguments[r];\n            if (\"string\" == typeof a) {\n                let r = t(a, this.world);\n                e = e.concat(r);\n            } else \"Doc\" === a.isA ? e = e.concat(a.list) : \"Phrase\" === a.isA && e.push(a);\n        }\n        return this.buildFrom(e);\n    }, e.delete = function(e) {\n        this.uncache();\n        let t = this;\n        return e && (t = this.match(e)), t.list.forEach((e)=>e.delete(this)), this;\n    }, e.remove = e.delete;\n}(sa);\nvar la = {};\nconst ua = {\n    clean: !0,\n    reduced: !0,\n    root: !0\n};\nla.text = function(e) {\n    e = e || {};\n    let t = !1;\n    0 === this.parents().length && (t = !0), (\"root\" === e || \"object\" == typeof e && e.root) && this.list.forEach((e)=>{\n        e.terms().forEach((e)=>{\n            null === e.root && e.setRoot(this.world);\n        });\n    });\n    let r = this.list.reduce((r, a, n)=>{\n        const i = !t && 0 === n, o = !t && n === this.list.length - 1;\n        return r + a.text(e, i, o);\n    }, \"\");\n    return !0 !== ua[e] && !0 !== e.reduced && !0 !== e.clean && !0 !== e.root || (r = r.trim()), r;\n};\nvar ca = {};\nvar ha = function(e, t, r) {\n    let a = function(e) {\n        let t = 0, r = 0, a = {};\n        return e.termList().forEach((e)=>{\n            a[e.id] = {\n                index: r,\n                start: t + e.pre.length,\n                length: e.text.length\n            }, t += e.pre.length + e.text.length + e.post.length, r += 1;\n        }), a;\n    }(e.all());\n    (r.terms.index || r.index) && t.forEach((e)=>{\n        e.terms.forEach((e)=>{\n            e.index = a[e.id].index;\n        }), e.index = e.terms[0].index;\n    }), (r.terms.offset || r.offset) && t.forEach((e)=>{\n        e.terms.forEach((e)=>{\n            e.offset = a[e.id] || {};\n        }), e.offset = {\n            index: e.terms[0].offset.index,\n            start: e.terms[0].offset.start - e.text.indexOf(e.terms[0].text),\n            length: e.text.length\n        };\n    });\n};\n!function(e) {\n    const t = ha, r = {\n        text: !0,\n        terms: !0,\n        trim: !0\n    };\n    e.json = function(e = {}) {\n        if (\"number\" == typeof e && this.list[e]) return this.list[e].json(r);\n        !0 === (e = function(e) {\n            return (e = Object.assign({}, r, e)).unique && (e.reduced = !0), e.offset && (e.text = !0, e.terms && !0 !== e.terms || (e.terms = {}), e.terms.offset = !0), (e.index || e.terms.index) && (e.terms = !0 === e.terms ? {} : e.terms, e.terms.id = !0), e;\n        }(e)).root && this.list.forEach((e)=>{\n            e.terms().forEach((e)=>{\n                null === e.root && e.setRoot(this.world);\n            });\n        });\n        let a = this.list.map((t)=>t.json(e, this.world));\n        if ((e.terms.offset || e.offset || e.terms.index || e.index) && t(this, a, e), e.frequency || e.freq || e.count) {\n            let e = {};\n            this.list.forEach((t)=>{\n                let r = t.text(\"reduced\");\n                e[r] = e[r] || 0, e[r] += 1;\n            }), this.list.forEach((t, r)=>{\n                a[r].count = e[t.text(\"reduced\")];\n            });\n        }\n        if (e.unique) {\n            let e = {};\n            a = a.filter((t)=>!0 !== e[t.reduced] && (e[t.reduced] = !0, !0));\n        }\n        return a;\n    }, e.data = e.json;\n}(ca);\nvar da = {}, ga = {\n    exports: {}\n};\n!function(e) {\n    const t = \"\\x1b[0m\", r = function(e, t) {\n        for(e = e.toString(); e.length < t;)e += \" \";\n        return e;\n    };\n    const a = {\n        green: \"#7f9c6c\",\n        red: \"#914045\",\n        blue: \"#6699cc\",\n        magenta: \"#6D5685\",\n        cyan: \"#2D85A8\",\n        yellow: \"#e6d7b3\",\n        black: \"#303b50\"\n    }, n = {\n        green: function(e) {\n            return \"\\x1b[32m\" + e + t;\n        },\n        red: function(e) {\n            return \"\\x1b[31m\" + e + t;\n        },\n        blue: function(e) {\n            return \"\\x1b[34m\" + e + t;\n        },\n        magenta: function(e) {\n            return \"\\x1b[35m\" + e + t;\n        },\n        cyan: function(e) {\n            return \"\\x1b[36m\" + e + t;\n        },\n        yellow: function(e) {\n            return \"\\x1b[33m\" + e + t;\n        },\n        black: function(e) {\n            return \"\\x1b[30m\" + e + t;\n        }\n    };\n    ga.exports = function(e) {\n        return  false ? (0) : (console.log(n.blue(\"=====\")), e.list.forEach((t)=>{\n            console.log(n.blue(\"  -----\")), t.terms().forEach((t)=>{\n                let a = Object.keys(t.tags), i = t.text || \"-\";\n                t.implicit && (i = \"[\" + t.implicit + \"]\"), i = n.yellow(i);\n                let o = \"'\" + i + \"'\";\n                o = r(o, 18);\n                let s = n.blue(\"  ｜ \") + o + \"  - \" + function(e, t) {\n                    return (e = e.map((e)=>{\n                        if (!t.tags.hasOwnProperty(e)) return e;\n                        const r = t.tags[e].color || \"blue\";\n                        return n[r](e);\n                    })).join(\", \");\n                }(a, e.world);\n                console.log(s);\n            });\n        }), console.log(\"\"), e);\n    };\n}();\nconst pa = ga.exports, ma = function(e) {\n    let t = e.json({\n        text: !1,\n        terms: !1,\n        reduced: !0\n    }), r = {};\n    t.forEach((e)=>{\n        r[e.reduced] || (e.count = 0, r[e.reduced] = e), r[e.reduced].count += 1;\n    });\n    let a = Object.keys(r).map((e)=>r[e]);\n    return a.sort((e, t)=>e.count > t.count ? -1 : e.count < t.count ? 1 : 0), a;\n};\nda.debug = function() {\n    return pa(this), this;\n}, da.out = function(e) {\n    if (\"text\" === e) return this.text();\n    if (\"normal\" === e) return this.text(\"normal\");\n    if (\"json\" === e) return this.json();\n    if (\"offset\" === e || \"offsets\" === e) return this.json({\n        offset: !0\n    });\n    if (\"array\" === e) return this.json({\n        terms: !1\n    }).map((e)=>e.text).filter((e)=>e);\n    if (\"freq\" === e || \"frequency\" === e) return ma(this);\n    if (\"terms\" === e) {\n        let e = [];\n        return this.json({\n            text: !1,\n            terms: {\n                text: !0\n            }\n        }).forEach((t)=>{\n            let r = t.terms.map((e)=>e.text);\n            r = r.filter((e)=>e), e = e.concat(r);\n        }), e;\n    }\n    return \"tags\" === e ? this.list.map((e)=>e.terms().reduce((e, t)=>(e[t.clean || t.implicit] = Object.keys(t.tags), e), {})) : \"debug\" === e ? (pa(this), this) : this.text();\n};\nvar fa = {};\nconst ba = {\n    alpha: (e, t)=>{\n        let r = e.text(\"clean\"), a = t.text(\"clean\");\n        return r < a ? -1 : r > a ? 1 : 0;\n    },\n    length: (e, t)=>{\n        let r = e.text().trim().length, a = t.text().trim().length;\n        return r < a ? 1 : r > a ? -1 : 0;\n    },\n    wordCount: (e, t)=>{\n        let r = e.wordCount(), a = t.wordCount();\n        return r < a ? 1 : r > a ? -1 : 0;\n    }\n};\nba.alphabetical = ba.alpha, ba.wordcount = ba.wordCount;\nconst ya = {\n    index: !0,\n    sequence: !0,\n    seq: !0,\n    sequential: !0,\n    chron: !0,\n    chronological: !0\n};\nfa.sort = function(e) {\n    return \"freq\" === (e = e || \"alpha\") || \"frequency\" === e || \"topk\" === e ? function(e) {\n        let t = {};\n        const r = {\n            case: !0,\n            punctuation: !1,\n            whitespace: !0,\n            unicode: !0\n        };\n        return e.list.forEach((e)=>{\n            let a = e.text(r);\n            t[a] = t[a] || 0, t[a] += 1;\n        }), e.list.sort((e, a)=>{\n            let n = t[e.text(r)], i = t[a.text(r)];\n            return n < i ? 1 : n > i ? -1 : 0;\n        }), e;\n    }(this) : ya.hasOwnProperty(e) ? function(e) {\n        let t = {};\n        return e.json({\n            terms: {\n                offset: !0\n            }\n        }).forEach((e)=>{\n            t[e.terms[0].id] = e.terms[0].offset.start;\n        }), e.list = e.list.sort((e, r)=>t[e.start] > t[r.start] ? 1 : t[e.start] < t[r.start] ? -1 : 0), e;\n    }(this) : \"function\" == typeof (e = ba[e] || e) ? (this.list = this.list.sort(e), this) : this;\n}, fa.reverse = function() {\n    let e = [].concat(this.list);\n    return e = e.reverse(), this.buildFrom(e);\n}, fa.unique = function() {\n    let e = [].concat(this.list), t = {};\n    return e = e.filter((e)=>{\n        let r = e.text(\"reduced\").trim() || e.text(\"implicit\").trim();\n        return !0 !== t.hasOwnProperty(r) && (t[r] = !0, !0);\n    }), this.buildFrom(e);\n};\nvar va = {};\nconst wa = n, ka = /[\\[\\]{}⟨⟩:,،、‒–—―…‹›«»‐\\-;\\/⁄·*\\•^†‡°¡¿※№÷×ºª%‰=‱¶§~|‖¦©℗®℠™¤₳฿]/g, Aa = /['‘’“”\"′″‴]+/g;\nconst Da = {\n    whitespace: function(e) {\n        let t = e.list.map((e)=>e.terms());\n        t.forEach((e, r)=>{\n            e.forEach((a, n)=>{\n                !0 !== a.hasDash() ? (a.pre = a.pre.replace(/\\s/g, \"\"), a.post = a.post.replace(/\\s/g, \"\"), (e.length - 1 !== n || t[r + 1]) && (a.implicit && !0 === Boolean(a.text) || !0 !== a.hasHyphen() && (a.post += \" \"))) : a.post = \" - \";\n            });\n        });\n    },\n    punctuation: function(e) {\n        e.forEach((e)=>{\n            !0 === e.hasHyphen() && (e.post = \" \"), e.pre = e.pre.replace(ka, \"\"), e.post = e.post.replace(ka, \"\"), e.post = e.post.replace(/\\.\\.\\./, \"\"), !0 === /!/.test(e.post) && (e.post = e.post.replace(/!/g, \"\"), e.post = \"!\" + e.post), !0 === /\\?/.test(e.post) && (e.post = e.post.replace(/[\\?!]*/, \"\"), e.post = \"?\" + e.post);\n        });\n    },\n    unicode: function(e) {\n        e.forEach((e)=>{\n            !0 !== e.isImplicit() && (e.text = wa(e.text));\n        });\n    },\n    quotations: function(e) {\n        e.forEach((e)=>{\n            e.post = e.post.replace(Aa, \"\"), e.pre = e.pre.replace(Aa, \"\");\n        });\n    },\n    adverbs: function(e) {\n        e.match(\"#Adverb\").not(\"(not|nary|seldom|never|barely|almost|basically|so)\").remove();\n    },\n    abbreviations: function(e) {\n        e.list.forEach((e)=>{\n            let t = e.terms();\n            t.forEach((e, r)=>{\n                !0 === e.tags.Abbreviation && t[r + 1] && (e.post = e.post.replace(/^\\./, \"\"));\n            });\n        });\n    }\n}, $a = {\n    whitespace: !0,\n    unicode: !0,\n    punctuation: !0,\n    emoji: !0,\n    acronyms: !0,\n    abbreviations: !0,\n    case: !1,\n    contractions: !1,\n    parentheses: !1,\n    quotations: !1,\n    adverbs: !1,\n    possessives: !1,\n    verbs: !1,\n    nouns: !1,\n    honorifics: !1\n}, Pa = {\n    light: {},\n    medium: {\n        case: !0,\n        contractions: !0,\n        parentheses: !0,\n        quotations: !0,\n        adverbs: !0\n    }\n};\nPa.heavy = Object.assign({}, Pa.medium, {\n    possessives: !0,\n    verbs: !0,\n    nouns: !0,\n    honorifics: !0\n}), va.normalize = function(e) {\n    \"string\" == typeof (e = e || {}) && (e = Pa[e] || {}), e = Object.assign({}, $a, e), this.uncache();\n    let t = this.termList();\n    return e.case && this.toLowerCase(), e.whitespace && Da.whitespace(this), e.unicode && Da.unicode(t), e.punctuation && Da.punctuation(t), e.emoji && this.remove(\"(#Emoji|#Emoticon)\"), e.acronyms && this.acronyms().strip(), e.abbreviations && Da.abbreviations(this), (e.contraction || e.contractions) && this.contractions().expand(), e.parentheses && this.parentheses().unwrap(), (e.quotations || e.quotes) && Da.quotations(t), e.adverbs && Da.adverbs(this), (e.possessive || e.possessives) && this.possessives().strip(), e.verbs && this.verbs().toInfinitive(), (e.nouns || e.plurals) && this.nouns().toSingular(), e.honorifics && this.remove(\"#Honorific\"), this;\n};\nvar Ea = {};\n!function(e) {\n    const t = _e;\n    e.splitOn = function(e) {\n        if (!e) {\n            return this.parent().splitOn(this);\n        }\n        let r = t(e), a = [];\n        return this.list.forEach((e)=>{\n            let t = e.match(r);\n            if (0 === t.length) return void a.push(e);\n            let n = e;\n            t.forEach((e)=>{\n                let t = n.splitOn(e);\n                t.before && a.push(t.before), t.match && a.push(t.match), n = t.after;\n            }), n && a.push(n);\n        }), this.buildFrom(a);\n    }, e.splitAfter = function(e) {\n        if (!e) {\n            return this.parent().splitAfter(this);\n        }\n        let r = t(e), a = [];\n        return this.list.forEach((e)=>{\n            let t = e.match(r);\n            if (0 === t.length) return void a.push(e);\n            let n = e;\n            t.forEach((e)=>{\n                let t = n.splitOn(e);\n                t.before && t.match ? (t.before.length += t.match.length, a.push(t.before)) : t.match && a.push(t.match), n = t.after;\n            }), n && a.push(n);\n        }), this.buildFrom(a);\n    }, e.split = e.splitAfter, e.splitBefore = function(e) {\n        if (!e) {\n            return this.parent().splitBefore(this);\n        }\n        let r = t(e), a = [];\n        return this.list.forEach((e)=>{\n            let t = e.match(r);\n            if (0 === t.length) return void a.push(e);\n            let n = e;\n            t.forEach((e)=>{\n                let t = n.splitOn(e);\n                t.before && a.push(t.before), t.match && t.after && (t.match.length += t.after.length), n = t.match;\n            }), n && a.push(n);\n        }), this.buildFrom(a);\n    }, e.segment = function(e, t) {\n        e = e || {}, t = t || {\n            text: !0\n        };\n        let r = this, a = Object.keys(e);\n        return a.forEach((e)=>{\n            r = r.splitOn(e);\n        }), r.list.forEach((t)=>{\n            for(let r = 0; r < a.length; r += 1)if (t.has(a[r])) return void (t.segment = e[a[r]]);\n        }), r.list.map((e)=>{\n            let r = e.json(t);\n            return r.segment = e.segment || null, r;\n        });\n    };\n}(Ea);\nvar Ha = {};\nconst ja = function(e, t) {\n    let r = e.world;\n    return e.list.forEach((e)=>{\n        e.terms().forEach((e)=>e[t](r));\n    }), e;\n};\nHa.toLowerCase = function() {\n    return ja(this, \"toLowerCase\");\n}, Ha.toUpperCase = function() {\n    return ja(this, \"toUpperCase\");\n}, Ha.toTitleCase = function() {\n    return ja(this, \"toTitleCase\");\n}, Ha.toCamelCase = function() {\n    return this.list.forEach((e)=>{\n        let t = e.terms();\n        t.forEach((e, r)=>{\n            0 !== r && e.toTitleCase(), r !== t.length - 1 && (e.post = \"\");\n        });\n    }), this;\n};\nvar Na = {};\n!function(e) {\n    e.pre = function(e, t) {\n        return void 0 === e ? this.list[0].terms(0).pre : (this.list.forEach((r)=>{\n            let a = r.terms(0);\n            !0 === t ? a.pre += e : a.pre = e;\n        }), this);\n    }, e.post = function(e, t) {\n        return void 0 === e ? this.list.map((e)=>{\n            let t = e.terms();\n            return t[t.length - 1].post;\n        }) : (this.list.forEach((r)=>{\n            let a = r.terms(), n = a[a.length - 1];\n            !0 === t ? n.post += e : n.post = e;\n        }), this);\n    }, e.trim = function() {\n        return this.list = this.list.map((e)=>e.trim()), this;\n    }, e.hyphenate = function() {\n        return this.list.forEach((e)=>{\n            let t = e.terms();\n            t.forEach((e, r)=>{\n                0 !== r && (e.pre = \"\"), t[r + 1] && (e.post = \"-\");\n            });\n        }), this;\n    }, e.dehyphenate = function() {\n        const e = /(-|–|—)/;\n        return this.list.forEach((t)=>{\n            t.terms().forEach((t)=>{\n                e.test(t.post) && (t.post = \" \");\n            });\n        }), this;\n    }, e.deHyphenate = e.dehyphenate, e.toQuotations = function(e, t) {\n        return e = e || '\"', t = t || '\"', this.list.forEach((r)=>{\n            let a = r.terms();\n            a[0].pre = e + a[0].pre;\n            let n = a[a.length - 1];\n            n.post = t + n.post;\n        }), this;\n    }, e.toQuotation = e.toQuotations, e.toParentheses = function(e, t) {\n        return e = e || \"(\", t = t || \")\", this.list.forEach((r)=>{\n            let a = r.terms();\n            a[0].pre = e + a[0].pre;\n            let n = a[a.length - 1];\n            n.post = t + n.post;\n        }), this;\n    };\n}(Na);\nvar xa = {\n    join: function(e) {\n        this.uncache();\n        let t = this.list[0], r = t.length, a = {};\n        for(let r = 1; r < this.list.length; r++){\n            const n = this.list[r];\n            a[n.start] = !0;\n            let i = t.lastTerm();\n            e && (i.post += e), i.next = n.start, n.terms(0).prev = i.id, t.length += n.length, t.cache = {};\n        }\n        let n = t.length - r;\n        return this.parents().forEach((e)=>{\n            e.list.forEach((e)=>{\n                let r = e.terms();\n                for(let a = 0; a < r.length; a++)if (r[a].id === t.start) {\n                    e.length += n;\n                    break;\n                }\n                e.cache = {};\n            }), e.list = e.list.filter((e)=>!0 !== a[e.start]);\n        }), this.buildFrom([\n            t\n        ]);\n    }\n}, Fa = {};\nconst Ca = /[,\\)\"';:\\-–—\\.…]/, Ba = function(e, t) {\n    if (!e.found) return;\n    let r = e.termList();\n    for(let e = 0; e < r.length - 1; e++){\n        const t = r[e];\n        if (Ca.test(t.post)) return;\n    }\n    r.forEach((e)=>{\n        e.implicit = e.clean;\n    }), r[0].text += t, r.slice(1).forEach((e)=>{\n        e.text = \"\";\n    });\n    for(let e = 0; e < r.length - 1; e++){\n        const t = r[e];\n        t.post = t.post.replace(/ /, \"\");\n    }\n};\nFa.contract = function() {\n    let e = this.not(\"@hasContraction\"), t = e.match(\"(we|they|you) are\");\n    return Ba(t, \"'re\"), t = e.match(\"(he|she|they|it|we|you) will\"), Ba(t, \"'ll\"), t = e.match(\"(he|she|they|it|we) is\"), Ba(t, \"'s\"), t = e.match(\"#Person is\"), Ba(t, \"'s\"), t = e.match(\"#Person would\"), Ba(t, \"'d\"), t = e.match(\"(is|was|had|would|should|could|do|does|have|has|can) not\"), Ba(t, \"n't\"), t = e.match(\"(i|we|they) have\"), Ba(t, \"'ve\"), t = e.match(\"(would|should|could) have\"), Ba(t, \"'ve\"), t = e.match(\"i am\"), Ba(t, \"'m\"), t = e.match(\"going to\"), this;\n};\nvar Ga = Object.assign({}, Ur, Qr, Zr, Yr, ta, ra, na, ia, sa, la, ca, da, fa, va, Ea, Ha, Na, xa, Fa);\nlet za = {};\n[\n    [\n        \"terms\",\n        \".\"\n    ],\n    [\n        \"hyphenated\",\n        \"@hasHyphen .\"\n    ],\n    [\n        \"adjectives\",\n        \"#Adjective\"\n    ],\n    [\n        \"hashTags\",\n        \"#HashTag\"\n    ],\n    [\n        \"emails\",\n        \"#Email\"\n    ],\n    [\n        \"emoji\",\n        \"#Emoji\"\n    ],\n    [\n        \"emoticons\",\n        \"#Emoticon\"\n    ],\n    [\n        \"atMentions\",\n        \"#AtMention\"\n    ],\n    [\n        \"urls\",\n        \"#Url\"\n    ],\n    [\n        \"adverbs\",\n        \"#Adverb\"\n    ],\n    [\n        \"pronouns\",\n        \"#Pronoun\"\n    ],\n    [\n        \"conjunctions\",\n        \"#Conjunction\"\n    ],\n    [\n        \"prepositions\",\n        \"#Preposition\"\n    ]\n].forEach((e)=>{\n    za[e[0]] = function(t) {\n        let r = this.match(e[1]);\n        return \"number\" == typeof t && (r = r.get(t)), r;\n    };\n}), za.emojis = za.emoji, za.atmentions = za.atMentions, za.words = za.terms, za.phoneNumbers = function(e) {\n    let t = this.splitAfter(\"@hasComma\");\n    return t = t.match(\"#PhoneNumber+\"), \"number\" == typeof e && (t = t.get(e)), t;\n}, za.money = function(e) {\n    let t = this.match(\"#Money #Currency?\");\n    return \"number\" == typeof e && (t = t.get(e)), t;\n}, za.places = function(e) {\n    let t = this.match(\"(#City && @hasComma) (#Region|#Country)\"), r = this.not(t).splitAfter(\"@hasComma\");\n    return r = r.concat(t), r.sort(\"index\"), r = r.match(\"#Place+\"), \"number\" == typeof e && (r = r.get(e)), r;\n}, za.organizations = function(e) {\n    let t = this.clauses();\n    return t = t.match(\"#Organization+\"), \"number\" == typeof e && (t = t.get(e)), t;\n}, za.entities = function(e) {\n    let t = this.clauses(), r = t.people();\n    r = r.concat(t.places()), r = r.concat(t.organizations());\n    return r = r.not([\n        \"someone\",\n        \"man\",\n        \"woman\",\n        \"mother\",\n        \"brother\",\n        \"sister\",\n        \"father\"\n    ]), r.sort(\"sequence\"), \"number\" == typeof e && (r = r.get(e)), r;\n}, za.things = za.entities, za.topics = za.entities;\nvar Ia = za;\nconst Oa = /^(under|over)-?.{3}/, Ta = function(e, t, r) {\n    let a = r.words, n = e[t].reduced + \" \" + e[t + 1].reduced;\n    return void 0 !== a[n] && !0 === a.hasOwnProperty(n) ? (e[t].tag(a[n], \"lexicon-two\", r), e[t + 1].tag(a[n], \"lexicon-two\", r), 1) : t + 2 < e.length && (n += \" \" + e[t + 2].reduced, void 0 !== a[n] && !0 === a.hasOwnProperty(n)) ? (e[t].tag(a[n], \"lexicon-three\", r), e[t + 1].tag(a[n], \"lexicon-three\", r), e[t + 2].tag(a[n], \"lexicon-three\", r), 2) : t + 3 < e.length && (n += \" \" + e[t + 3].reduced, void 0 !== a[n] && !0 === a.hasOwnProperty(n)) ? (e[t].tag(a[n], \"lexicon-four\", r), e[t + 1].tag(a[n], \"lexicon-four\", r), e[t + 2].tag(a[n], \"lexicon-four\", r), e[t + 3].tag(a[n], \"lexicon-four\", r), 3) : 0;\n};\nvar Va = function(e, t) {\n    let r = t.words, a = t.hasCompound;\n    for(let n = 0; n < e.length; n += 1){\n        let i = e[n].clean;\n        if (!0 === a[i] && n + 1 < e.length) {\n            let r = Ta(e, n, t);\n            if (r > 0) {\n                n += r;\n                continue;\n            }\n        }\n        if (void 0 === r[i] || !0 !== r.hasOwnProperty(i)) if (i === e[n].reduced || !0 !== r.hasOwnProperty(e[n].reduced)) {\n            if (!0 === Oa.test(i)) {\n                let a = i.replace(/^(under|over)-?/, \"\");\n                !0 === r.hasOwnProperty(a) && e[n].tag(r[a], \"noprefix-lexicon\", t);\n            }\n        } else e[n].tag(r[e[n].reduced], \"lexicon\", t);\n        else e[n].tag(r[i], \"lexicon\", t);\n    }\n    return e;\n};\nconst Ma = /[\\'‘’‛‵′`´]$/, Ja = /^(m|k|cm|km|m)\\/(s|h|hr)$/;\nconst La = [\n    [\n        /^[\\w\\.]+@[\\w\\.]+\\.[a-z]{2,3}$/,\n        \"Email\"\n    ],\n    [\n        /^#[a-z0-9_\\u00C0-\\u00FF]{2,}$/,\n        \"HashTag\"\n    ],\n    [\n        /^@1?[0-9](am|pm)$/i,\n        \"Time\"\n    ],\n    [\n        /^@1?[0-9]:[0-9]{2}(am|pm)?$/i,\n        \"Time\"\n    ],\n    [\n        /^@\\w{2,}$/,\n        \"AtMention\"\n    ],\n    [\n        /^(https?:\\/\\/|www\\.)+\\w+\\.[a-z]{2,3}/,\n        \"Url\"\n    ],\n    [\n        /^[a-z0-9./].+\\.(com|net|gov|org|ly|edu|info|biz|dev|ru|jp|de|in|uk|br|io|ai)/,\n        \"Url\"\n    ],\n    [\n        /^'[0-9]{2}$/,\n        \"Year\"\n    ],\n    [\n        /^[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])$/,\n        \"Time\"\n    ],\n    [\n        /^[012]?[0-9](:[0-5][0-9])?(:[0-5][0-9])? ?(am|pm)$/i,\n        \"Time\"\n    ],\n    [\n        /^[012]?[0-9](:[0-5][0-9])(:[0-5][0-9])? ?(am|pm)?$/i,\n        \"Time\"\n    ],\n    [\n        /^[PMCE]ST$/,\n        \"Time\"\n    ],\n    [\n        /^utc ?[+-]?[0-9]+?$/,\n        \"Time\"\n    ],\n    [\n        /^[a-z0-9]*? o\\'?clock$/,\n        \"Time\"\n    ],\n    [\n        /^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}/i,\n        \"Date\"\n    ],\n    [\n        /^[0-9]{1,4}-[0-9]{1,2}-[0-9]{1,4}$/,\n        \"Date\"\n    ],\n    [\n        /^[0-9]{1,4}\\/[0-9]{1,2}\\/[0-9]{1,4}$/,\n        \"Date\"\n    ],\n    [\n        /^[0-9]{1,4}-[a-z]{2,9}-[0-9]{1,4}$/i,\n        \"Date\"\n    ],\n    [\n        /^gmt[+-][0-9][0-9]?$/i,\n        \"Timezone\"\n    ],\n    [\n        /^utc[+-][0-9][0-9]?$/i,\n        \"Timezone\"\n    ],\n    [\n        /^ma?c\\'.*/,\n        \"LastName\"\n    ],\n    [\n        /^o\\'[drlkn].*/,\n        \"LastName\"\n    ],\n    [\n        /^ma?cd[aeiou]/,\n        \"LastName\"\n    ],\n    [\n        /^(lol)+[sz]$/,\n        \"Expression\"\n    ],\n    [\n        /^woo+a*?h?$/,\n        \"Expression\"\n    ],\n    [\n        /^(un|de|re)\\\\-[a-z\\u00C0-\\u00FF]{2}/,\n        \"Verb\"\n    ],\n    [\n        /^[0-9]{1,4}\\.[0-9]{1,2}\\.[0-9]{1,4}$/,\n        \"Date\"\n    ],\n    [\n        /^[0-9]{3}-[0-9]{4}$/,\n        \"PhoneNumber\"\n    ],\n    [\n        /^(\\+?[0-9][ -])?[0-9]{3}[ -]?[0-9]{3}-[0-9]{4}$/,\n        \"PhoneNumber\"\n    ],\n    [\n        /^[-+]?[\\$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20BD\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6][-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?(k|m|b|bn)?\\+?$/,\n        [\n            \"Money\",\n            \"Value\"\n        ]\n    ],\n    [\n        /^[-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?[\\$\\xA2-\\xA5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20BD\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6]\\+?$/,\n        [\n            \"Money\",\n            \"Value\"\n        ]\n    ],\n    [\n        /^[-+]?[\\$£]?[0-9]([0-9,.])+?(usd|eur|jpy|gbp|cad|aud|chf|cny|hkd|nzd|kr|rub)$/i,\n        [\n            \"Money\",\n            \"Value\"\n        ]\n    ],\n    [\n        /^[-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?\\+?$/,\n        [\n            \"Cardinal\",\n            \"NumericValue\"\n        ]\n    ],\n    [\n        /^[-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?(st|nd|rd|r?th)$/,\n        [\n            \"Ordinal\",\n            \"NumericValue\"\n        ]\n    ],\n    [\n        /^\\.[0-9]+\\+?$/,\n        [\n            \"Cardinal\",\n            \"NumericValue\"\n        ]\n    ],\n    [\n        /^[-+]?[0-9]+(,[0-9]{3})*(\\.[0-9]+)?%\\+?$/,\n        [\n            \"Percent\",\n            \"Cardinal\",\n            \"NumericValue\"\n        ]\n    ],\n    [\n        /^\\.[0-9]+%$/,\n        [\n            \"Percent\",\n            \"Cardinal\",\n            \"NumericValue\"\n        ]\n    ],\n    [\n        /^[0-9]{1,4}\\/[0-9]{1,4}(st|nd|rd|th)?s?$/,\n        [\n            \"Fraction\",\n            \"NumericValue\"\n        ]\n    ],\n    [\n        /^[0-9.]{1,3}[a-z]{0,2}[-–—][0-9]{1,3}[a-z]{0,2}$/,\n        [\n            \"Value\",\n            \"NumberRange\"\n        ]\n    ],\n    [\n        /^[0-9][0-9]?(:[0-9][0-9])?(am|pm)? ?[-–—] ?[0-9][0-9]?(:[0-9][0-9])?(am|pm)?$/,\n        [\n            \"Time\",\n            \"NumberRange\"\n        ]\n    ],\n    [\n        /^[0-9.]+([a-z]{1,4})$/,\n        \"Value\"\n    ]\n], Sa = /^[IVXLCDM]{2,}$/, _a = /^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$/;\nconst Ka = \"Adjective\", qa = \"Infinitive\", Wa = \"PresentTense\", Ra = \"Singular\", Ua = \"PastTense\", Qa = \"Expression\";\nconst Za = \"Adjective\", Xa = \"Infinitive\", Ya = \"PresentTense\", en = \"Singular\", tn = \"PastTense\", rn = \"Adverb\", an = \"Plural\", nn = \"Verb\", on = \"LastName\";\nconst sn = {\n    a: [\n        [\n            /.[aeiou]na$/,\n            \"Noun\"\n        ],\n        [\n            /.[oau][wvl]ska$/,\n            \"LastName\"\n        ],\n        [\n            /.[^aeiou]ica$/,\n            Ra\n        ],\n        [\n            /^([hyj]a)+$/,\n            Qa\n        ]\n    ],\n    c: [\n        [\n            /.[^aeiou]ic$/,\n            Ka\n        ]\n    ],\n    d: [\n        [\n            /[aeiou](pp|ll|ss|ff|gg|tt|rr|bb|nn|mm)ed$/,\n            Ua\n        ],\n        [\n            /.[aeo]{2}[bdgmnprvz]ed$/,\n            Ua\n        ],\n        [\n            /.[aeiou][sg]hed$/,\n            Ua\n        ],\n        [\n            /.[aeiou]red$/,\n            Ua\n        ],\n        [\n            /.[aeiou]r?ried$/,\n            Ua\n        ],\n        [\n            /.[bcdgtr]led$/,\n            Ua\n        ],\n        [\n            /.[aoui]f?led$/,\n            Ua\n        ],\n        [\n            /.[iao]sed$/,\n            Ua\n        ],\n        [\n            /[aeiou]n?[cs]ed$/,\n            Ua\n        ],\n        [\n            /[aeiou][rl]?[mnf]ed$/,\n            Ua\n        ],\n        [\n            /[aeiou][ns]?c?ked$/,\n            Ua\n        ],\n        [\n            /[aeiou][nl]?ged$/,\n            Ua\n        ],\n        [\n            /.[tdbwxz]ed$/,\n            Ua\n        ],\n        [\n            /[^aeiou][aeiou][tvx]ed$/,\n            Ua\n        ],\n        [\n            /.[cdlmnprstv]ied$/,\n            Ua\n        ],\n        [\n            /[^aeiou]ard$/,\n            Ra\n        ],\n        [\n            /[aeiou][^aeiou]id$/,\n            Ka\n        ],\n        [\n            /.[vrl]id$/,\n            Ka\n        ]\n    ],\n    e: [\n        [\n            /.[lnr]ize$/,\n            qa\n        ],\n        [\n            /.[^aeiou]ise$/,\n            qa\n        ],\n        [\n            /.[aeiou]te$/,\n            qa\n        ],\n        [\n            /.[^aeiou][ai]ble$/,\n            Ka\n        ],\n        [\n            /.[^aeiou]eable$/,\n            Ka\n        ],\n        [\n            /.[ts]ive$/,\n            Ka\n        ],\n        [\n            /[a-z]-like$/,\n            Ka\n        ]\n    ],\n    h: [\n        [\n            /.[^aeiouf]ish$/,\n            Ka\n        ],\n        [\n            /.v[iy]ch$/,\n            \"LastName\"\n        ],\n        [\n            /^ug?h+$/,\n            Qa\n        ],\n        [\n            /^uh[ -]?oh$/,\n            Qa\n        ],\n        [\n            /[a-z]-ish$/,\n            Ka\n        ]\n    ],\n    i: [\n        [\n            /.[oau][wvl]ski$/,\n            \"LastName\"\n        ]\n    ],\n    k: [\n        [\n            /^(k){2}$/,\n            Qa\n        ]\n    ],\n    l: [\n        [\n            /.[gl]ial$/,\n            Ka\n        ],\n        [\n            /.[^aeiou]ful$/,\n            Ka\n        ],\n        [\n            /.[nrtumcd]al$/,\n            Ka\n        ],\n        [\n            /.[^aeiou][ei]al$/,\n            Ka\n        ]\n    ],\n    m: [\n        [\n            /.[^aeiou]ium$/,\n            Ra\n        ],\n        [\n            /[^aeiou]ism$/,\n            Ra\n        ],\n        [\n            /^h*u*m+$/,\n            Qa\n        ],\n        [\n            /^\\d+ ?[ap]m$/,\n            \"Date\"\n        ]\n    ],\n    n: [\n        [\n            /.[lsrnpb]ian$/,\n            Ka\n        ],\n        [\n            /[^aeiou]ician$/,\n            \"Actor\"\n        ],\n        [\n            /[aeiou][ktrp]in$/,\n            \"Gerund\"\n        ]\n    ],\n    o: [\n        [\n            /^no+$/,\n            Qa\n        ],\n        [\n            /^(yo)+$/,\n            Qa\n        ],\n        [\n            /^woo+[pt]?$/,\n            Qa\n        ]\n    ],\n    r: [\n        [\n            /.[bdfklmst]ler$/,\n            \"Noun\"\n        ],\n        [\n            /[aeiou][pns]er$/,\n            Ra\n        ],\n        [\n            /[^i]fer$/,\n            qa\n        ],\n        [\n            /.[^aeiou][ao]pher$/,\n            \"Actor\"\n        ],\n        [\n            /.[lk]er$/,\n            \"Noun\"\n        ],\n        [\n            /.ier$/,\n            \"Comparative\"\n        ]\n    ],\n    t: [\n        [\n            /.[di]est$/,\n            \"Superlative\"\n        ],\n        [\n            /.[icldtgrv]ent$/,\n            Ka\n        ],\n        [\n            /[aeiou].*ist$/,\n            Ka\n        ],\n        [\n            /^[a-z]et$/,\n            \"Verb\"\n        ]\n    ],\n    s: [\n        [\n            /.[^aeiou]ises$/,\n            Wa\n        ],\n        [\n            /.[rln]ates$/,\n            Wa\n        ],\n        [\n            /.[^z]ens$/,\n            \"Verb\"\n        ],\n        [\n            /.[lstrn]us$/,\n            Ra\n        ],\n        [\n            /.[aeiou]sks$/,\n            Wa\n        ],\n        [\n            /.[aeiou]kes$/,\n            Wa\n        ],\n        [\n            /[aeiou][^aeiou]is$/,\n            Ra\n        ],\n        [\n            /[a-z]\\'s$/,\n            \"Noun\"\n        ],\n        [\n            /^yes+$/,\n            Qa\n        ]\n    ],\n    v: [\n        [\n            /.[^aeiou][ai][kln]ov$/,\n            \"LastName\"\n        ]\n    ],\n    y: [\n        [\n            /.[cts]hy$/,\n            Ka\n        ],\n        [\n            /.[st]ty$/,\n            Ka\n        ],\n        [\n            /.[gk]y$/,\n            Ka\n        ],\n        [\n            /.[tnl]ary$/,\n            Ka\n        ],\n        [\n            /.[oe]ry$/,\n            Ra\n        ],\n        [\n            /[rdntkbhs]ly$/,\n            \"Adverb\"\n        ],\n        [\n            /...lly$/,\n            \"Adverb\"\n        ],\n        [\n            /[bszmp]{2}y$/,\n            Ka\n        ],\n        [\n            /.(gg|bb|zz)ly$/,\n            Ka\n        ],\n        [\n            /.[ai]my$/,\n            Ka\n        ],\n        [\n            /[ea]{2}zy$/,\n            Ka\n        ],\n        [\n            /.[^aeiou]ity$/,\n            Ra\n        ]\n    ]\n}, ln = [\n    null,\n    null,\n    {\n        ea: en,\n        ia: \"Noun\",\n        ic: Za,\n        ly: rn,\n        \"'n\": nn,\n        \"'t\": nn\n    },\n    {\n        oed: tn,\n        ued: tn,\n        xed: tn,\n        \" so\": rn,\n        \"'ll\": \"Modal\",\n        \"'re\": \"Copula\",\n        azy: Za,\n        eer: \"Noun\",\n        end: nn,\n        ped: tn,\n        ffy: Za,\n        ify: Xa,\n        ing: \"Gerund\",\n        ize: Xa,\n        lar: Za,\n        mum: Za,\n        nes: Ya,\n        nny: Za,\n        oid: Za,\n        ous: Za,\n        que: Za,\n        rol: en,\n        sis: en,\n        zes: Ya\n    },\n    {\n        amed: tn,\n        aped: tn,\n        ched: tn,\n        lked: tn,\n        nded: tn,\n        cted: tn,\n        dged: tn,\n        akis: on,\n        cede: Xa,\n        chuk: on,\n        czyk: on,\n        ects: Ya,\n        ends: nn,\n        enko: on,\n        ette: en,\n        fies: Ya,\n        fore: rn,\n        gate: Xa,\n        gone: Za,\n        ices: an,\n        ints: an,\n        ines: an,\n        ions: an,\n        less: rn,\n        llen: Za,\n        made: Za,\n        nsen: on,\n        oses: Ya,\n        ould: \"Modal\",\n        some: Za,\n        sson: on,\n        tage: Xa,\n        teen: \"Value\",\n        tion: en,\n        tive: Za,\n        tors: \"Noun\",\n        vice: en\n    },\n    {\n        tized: tn,\n        urned: tn,\n        eased: tn,\n        ances: an,\n        bound: Za,\n        ettes: an,\n        fully: rn,\n        ishes: Ya,\n        ities: an,\n        marek: on,\n        nssen: on,\n        ology: \"Noun\",\n        ports: an,\n        rough: Za,\n        tches: Ya,\n        tieth: \"Ordinal\",\n        tures: an,\n        wards: rn,\n        where: rn\n    },\n    {\n        auskas: on,\n        keeper: \"Actor\",\n        logist: \"Actor\",\n        teenth: \"Value\"\n    },\n    {\n        opoulos: on,\n        borough: \"Place\",\n        sdottir: on\n    }\n];\nconst un = /^(\\u00a9|\\u00ae|[\\u2319-\\u3300]|\\ud83c[\\ud000-\\udfff]|\\ud83d[\\ud000-\\udfff]|\\ud83e[\\ud000-\\udfff])/, cn = {\n    \":(\": !0,\n    \":)\": !0,\n    \":P\": !0,\n    \":p\": !0,\n    \":O\": !0,\n    \":3\": !0,\n    \":|\": !0,\n    \":/\": !0,\n    \":\\\\\": !0,\n    \":$\": !0,\n    \":*\": !0,\n    \":@\": !0,\n    \":-(\": !0,\n    \":-)\": !0,\n    \":-P\": !0,\n    \":-p\": !0,\n    \":-O\": !0,\n    \":-3\": !0,\n    \":-|\": !0,\n    \":-/\": !0,\n    \":-\\\\\": !0,\n    \":-$\": !0,\n    \":-*\": !0,\n    \":-@\": !0,\n    \":^(\": !0,\n    \":^)\": !0,\n    \":^P\": !0,\n    \":^p\": !0,\n    \":^O\": !0,\n    \":^3\": !0,\n    \":^|\": !0,\n    \":^/\": !0,\n    \":^\\\\\": !0,\n    \":^$\": !0,\n    \":^*\": !0,\n    \":^@\": !0,\n    \"):\": !0,\n    \"(:\": !0,\n    \"$:\": !0,\n    \"*:\": !0,\n    \")-:\": !0,\n    \"(-:\": !0,\n    \"$-:\": !0,\n    \"*-:\": !0,\n    \")^:\": !0,\n    \"(^:\": !0,\n    \"$^:\": !0,\n    \"*^:\": !0,\n    \"<3\": !0,\n    \"</3\": !0,\n    \"<\\\\3\": !0\n};\nconst hn = {\n    lexicon: Va,\n    punctuation: function(e, t, r) {\n        let a = e[t];\n        if (Ma.test(a.text) && !Ma.test(a.pre) && !Ma.test(a.post) && a.clean.length > 2) {\n            let e = a.clean[a.clean.length - 2];\n            if (\"s\" === e) return void a.tag([\n                \"Possessive\",\n                \"Noun\"\n            ], \"end-tick\", r);\n            \"n\" === e && a.tag([\n                \"Gerund\"\n            ], \"chillin\", r);\n        }\n        Ja.test(a.text) && a.tag(\"Unit\", \"per-sec\", r);\n    },\n    regex: function(e, t) {\n        let r = e.text;\n        for(let a = 0; a < La.length; a += 1)if (!0 === La[a][0].test(r)) {\n            e.tagSafe(La[a][1], \"prefix #\" + a, t);\n            break;\n        }\n        e.text.length >= 2 && Sa.test(r) && _a.test(r) && e.tag(\"RomanNumeral\", \"xvii\", t);\n    },\n    suffix: function(e, t) {\n        !function(e, t) {\n            const r = e.clean.length;\n            let a = 7;\n            r <= a && (a = r - 1);\n            for(let n = a; n > 1; n -= 1){\n                let a = e.clean.substr(r - n, r);\n                if (!0 === ln[a.length].hasOwnProperty(a)) {\n                    let r = ln[a.length][a];\n                    e.tagSafe(r, \"suffix -\" + a, t);\n                    break;\n                }\n            }\n        }(e, t), function(e, t) {\n            let r = e.clean, a = r[r.length - 1];\n            if (!0 === sn.hasOwnProperty(a)) {\n                let n = sn[a];\n                for(let i = 0; i < n.length; i += 1)if (!0 === n[i][0].test(r)) {\n                    e.tagSafe(n[i][1], `endReg ${a} #${i}`, t);\n                    break;\n                }\n            }\n        }(e, t);\n    },\n    emoji: (e, t)=>{\n        let r = e.pre + e.text + e.post;\n        var a;\n        r = r.trim(), r = r.replace(/[.!?,]$/, \"\"), !0 === ((e)=>!(\":\" !== e.charAt(0) || null === e.match(/:.?$/) || e.match(\" \") || e.length > 35))(r) && (e.tag(\"Emoji\", \"comma-emoji\", t), e.text = r, e.pre = e.pre.replace(\":\", \"\"), e.post = e.post.replace(\":\", \"\")), e.text.match(un) && (e.tag(\"Emoji\", \"unicode-emoji\", t), e.text = r), !0 === (a = (a = r).replace(/^[:;]/, \":\"), cn.hasOwnProperty(a)) && (e.tag(\"Emoticon\", \"emoticon-emoji\", t), e.text = r);\n    }\n};\nvar dn = function(e, t) {\n    let r = e.world;\n    hn.lexicon(t, r);\n    for(let e = 0; e < t.length; e += 1){\n        let a = t[e];\n        hn.punctuation(t, e, r), hn.regex(a, r), hn.suffix(a, r), hn.emoji(a, r);\n    }\n    return e;\n};\nconst gn = {\n    beforeThisWord: {\n        there: \"Verb\",\n        me: \"Verb\",\n        man: \"Adjective\",\n        only: \"Verb\",\n        him: \"Verb\",\n        were: \"Noun\",\n        took: \"Noun\",\n        himself: \"Verb\",\n        went: \"Noun\",\n        who: \"Noun\",\n        jr: \"Person\"\n    },\n    afterThisWord: {\n        i: \"Verb\",\n        first: \"Noun\",\n        it: \"Verb\",\n        there: \"Verb\",\n        not: \"Verb\",\n        because: \"Noun\",\n        if: \"Noun\",\n        but: \"Noun\",\n        who: \"Verb\",\n        this: \"Noun\",\n        his: \"Noun\",\n        when: \"Noun\",\n        you: \"Verb\",\n        very: \"Adjective\",\n        old: \"Noun\",\n        never: \"Verb\",\n        before: \"Noun\"\n    },\n    beforeThisPos: {\n        Copula: \"Noun\",\n        PastTense: \"Noun\",\n        Conjunction: \"Noun\",\n        Modal: \"Noun\",\n        Pluperfect: \"Noun\",\n        PerfectTense: \"Verb\"\n    },\n    afterThisPos: {\n        Adjective: \"Noun\",\n        Possessive: \"Noun\",\n        Determiner: \"Noun\",\n        Adverb: \"Verb\",\n        Pronoun: \"Verb\",\n        Value: \"Noun\",\n        Ordinal: \"Noun\",\n        Modal: \"Verb\",\n        Superlative: \"Noun\",\n        Demonym: \"Noun\",\n        Honorific: \"Person\"\n    }\n}, pn = Object.keys(gn.afterThisPos), mn = Object.keys(gn.beforeThisPos);\nvar fn = function(e, t) {\n    for(let r = 0; r < e.length; r += 1){\n        let a = e[r];\n        if (!0 === a.isKnown()) continue;\n        let n = e[r - 1];\n        if (n) {\n            if (!0 === gn.afterThisWord.hasOwnProperty(n.clean)) {\n                let e = gn.afterThisWord[n.clean];\n                a.tag(e, \"after-\" + n.clean, t);\n                continue;\n            }\n            let e = pn.find((e)=>n.tags[e]);\n            if (void 0 !== e) {\n                let r = gn.afterThisPos[e];\n                a.tag(r, \"after-\" + e, t);\n                continue;\n            }\n        }\n        let i = e[r + 1];\n        if (i) {\n            if (!0 === gn.beforeThisWord.hasOwnProperty(i.clean)) {\n                let e = gn.beforeThisWord[i.clean];\n                a.tag(e, \"before-\" + i.clean, t);\n                continue;\n            }\n            let e = mn.find((e)=>i.tags[e]);\n            if (void 0 !== e) {\n                let r = gn.beforeThisPos[e];\n                a.tag(r, \"before-\" + e, t);\n                continue;\n            }\n        }\n    }\n};\nconst bn = /^[A-Z][a-z'\\u00C0-\\u00FF]/, yn = /[0-9]/;\nvar vn = function(e) {\n    let t = e.world;\n    e.list.forEach((e)=>{\n        let r = e.terms();\n        for(let e = 1; e < r.length; e++){\n            const a = r[e];\n            !0 === bn.test(a.text) && !1 === yn.test(a.text) && void 0 === a.tags.Date && a.tag(\"ProperNoun\", \"titlecase-noun\", t);\n        }\n    });\n};\nconst wn = /^(re|un)-?[a-z\\u00C0-\\u00FF]/, kn = /^(re|un)-?/;\nvar An = function(e, t) {\n    let r = t.words;\n    e.forEach((e)=>{\n        if (!0 !== e.isKnown() && !0 === wn.test(e.clean)) {\n            let a = e.clean.replace(kn, \"\");\n            a && a.length > 3 && void 0 !== r[a] && !0 === r.hasOwnProperty(a) && e.tag(r[a], \"stem-\" + a, t);\n        }\n    });\n};\nconst Dn = [\n    \"Uncountable\",\n    \"Pronoun\",\n    \"Place\",\n    \"Value\",\n    \"Person\",\n    \"Month\",\n    \"WeekDay\",\n    \"Holiday\"\n], $n = {\n    isSingular: [\n        /(ax|test)is$/i,\n        /(octop|vir|radi|nucle|fung|cact|stimul)us$/i,\n        /(octop|vir)i$/i,\n        /(rl)f$/i,\n        /(alias|status)$/i,\n        /(bu)s$/i,\n        /(al|ad|at|er|et|ed|ad)o$/i,\n        /(ti)um$/i,\n        /(ti)a$/i,\n        /sis$/i,\n        /(?:(^f)fe|(lr)f)$/i,\n        /hive$/i,\n        /s[aeiou]+ns$/i,\n        /(^aeiouy|qu)y$/i,\n        /(x|ch|ss|sh|z)$/i,\n        /(matr|vert|ind|cort)(ix|ex)$/i,\n        /(m|l)ouse$/i,\n        /(m|l)ice$/i,\n        /(antenn|formul|nebul|vertebr|vit)a$/i,\n        /.sis$/i,\n        /^(?!talis|.*hu)(.*)man$/i\n    ],\n    isPlural: [\n        /(^v)ies$/i,\n        /ises$/i,\n        /ives$/i,\n        /(antenn|formul|nebul|vertebr|vit)ae$/i,\n        /(octop|vir|radi|nucle|fung|cact|stimul)i$/i,\n        /(buffal|tomat|tornad)oes$/i,\n        /(analy|ba|diagno|parenthe|progno|synop|the)ses$/i,\n        /(vert|ind|cort)ices$/i,\n        /(matr|append)ices$/i,\n        /(x|ch|ss|sh|s|z|o)es$/i,\n        /is$/i,\n        /men$/i,\n        /news$/i,\n        /.tia$/i,\n        /(^f)ves$/i,\n        /(lr)ves$/i,\n        /(^aeiouy|qu)ies$/i,\n        /(m|l)ice$/i,\n        /(cris|ax|test)es$/i,\n        /(alias|status)es$/i,\n        /ics$/i\n    ]\n}, Pn = [\n    /ss$/,\n    /sis$/,\n    /[^aeiou][uo]s$/,\n    /'s$/\n], En = [\n    /i$/,\n    /ae$/\n];\nvar Hn = function(e, t) {\n    if (e.tags.Noun && !e.tags.Acronym) {\n        let r = e.clean;\n        if (e.tags.Singular || e.tags.Plural) return;\n        if (r.length <= 3) return void e.tag(\"Singular\", \"short-singular\", t);\n        if (Dn.find((t)=>e.tags[t])) return;\n        if ($n.isPlural.find((e)=>e.test(r))) return void e.tag(\"Plural\", \"plural-rules\", t);\n        if ($n.isSingular.find((e)=>e.test(r))) return void e.tag(\"Singular\", \"singular-rules\", t);\n        if (!0 === /s$/.test(r)) {\n            if (Pn.find((e)=>e.test(r))) return;\n            return void e.tag(\"Plural\", \"plural-fallback\", t);\n        }\n        if (En.find((e)=>e.test(r))) return;\n        e.tag(\"Singular\", \"singular-fallback\", t);\n    }\n};\nlet jn = [\n    \"academy\",\n    \"administration\",\n    \"agence\",\n    \"agences\",\n    \"agencies\",\n    \"agency\",\n    \"airlines\",\n    \"airways\",\n    \"army\",\n    \"assoc\",\n    \"associates\",\n    \"association\",\n    \"assurance\",\n    \"authority\",\n    \"autorite\",\n    \"aviation\",\n    \"bank\",\n    \"banque\",\n    \"board\",\n    \"boys\",\n    \"brands\",\n    \"brewery\",\n    \"brotherhood\",\n    \"brothers\",\n    \"building society\",\n    \"bureau\",\n    \"cafe\",\n    \"caisse\",\n    \"capital\",\n    \"care\",\n    \"cathedral\",\n    \"center\",\n    \"central bank\",\n    \"centre\",\n    \"chemicals\",\n    \"choir\",\n    \"chronicle\",\n    \"church\",\n    \"circus\",\n    \"clinic\",\n    \"clinique\",\n    \"club\",\n    \"co\",\n    \"coalition\",\n    \"coffee\",\n    \"collective\",\n    \"college\",\n    \"commission\",\n    \"committee\",\n    \"communications\",\n    \"community\",\n    \"company\",\n    \"comprehensive\",\n    \"computers\",\n    \"confederation\",\n    \"conference\",\n    \"conseil\",\n    \"consulting\",\n    \"containers\",\n    \"corporation\",\n    \"corps\",\n    \"corp\",\n    \"council\",\n    \"crew\",\n    \"daily news\",\n    \"data\",\n    \"departement\",\n    \"department\",\n    \"department store\",\n    \"departments\",\n    \"design\",\n    \"development\",\n    \"directorate\",\n    \"division\",\n    \"drilling\",\n    \"education\",\n    \"eglise\",\n    \"electric\",\n    \"electricity\",\n    \"energy\",\n    \"ensemble\",\n    \"enterprise\",\n    \"enterprises\",\n    \"entertainment\",\n    \"estate\",\n    \"etat\",\n    \"evening news\",\n    \"faculty\",\n    \"federation\",\n    \"financial\",\n    \"fm\",\n    \"foundation\",\n    \"fund\",\n    \"gas\",\n    \"gazette\",\n    \"girls\",\n    \"government\",\n    \"group\",\n    \"guild\",\n    \"health authority\",\n    \"herald\",\n    \"holdings\",\n    \"hospital\",\n    \"hotel\",\n    \"hotels\",\n    \"inc\",\n    \"industries\",\n    \"institut\",\n    \"institute\",\n    \"institute of technology\",\n    \"institutes\",\n    \"insurance\",\n    \"international\",\n    \"interstate\",\n    \"investment\",\n    \"investments\",\n    \"investors\",\n    \"journal\",\n    \"laboratory\",\n    \"labs\",\n    \"liberation army\",\n    \"limited\",\n    \"local authority\",\n    \"local health authority\",\n    \"machines\",\n    \"magazine\",\n    \"management\",\n    \"marine\",\n    \"marketing\",\n    \"markets\",\n    \"media\",\n    \"memorial\",\n    \"mercantile exchange\",\n    \"ministere\",\n    \"ministry\",\n    \"military\",\n    \"mobile\",\n    \"motor\",\n    \"motors\",\n    \"musee\",\n    \"museum\",\n    \"news\",\n    \"news service\",\n    \"observatory\",\n    \"office\",\n    \"oil\",\n    \"optical\",\n    \"orchestra\",\n    \"organization\",\n    \"partners\",\n    \"partnership\",\n    \"people's party\",\n    \"petrol\",\n    \"petroleum\",\n    \"pharmacare\",\n    \"pharmaceutical\",\n    \"pharmaceuticals\",\n    \"pizza\",\n    \"plc\",\n    \"police\",\n    \"polytechnic\",\n    \"post\",\n    \"power\",\n    \"press\",\n    \"productions\",\n    \"quartet\",\n    \"radio\",\n    \"regional authority\",\n    \"regional health authority\",\n    \"reserve\",\n    \"resources\",\n    \"restaurant\",\n    \"restaurants\",\n    \"savings\",\n    \"school\",\n    \"securities\",\n    \"service\",\n    \"services\",\n    \"social club\",\n    \"societe\",\n    \"society\",\n    \"sons\",\n    \"standard\",\n    \"state police\",\n    \"state university\",\n    \"stock exchange\",\n    \"subcommittee\",\n    \"syndicat\",\n    \"systems\",\n    \"telecommunications\",\n    \"telegraph\",\n    \"television\",\n    \"times\",\n    \"tribunal\",\n    \"tv\",\n    \"union\",\n    \"university\",\n    \"utilities\",\n    \"workers\"\n].reduce(function(e, t) {\n    return e[t] = \"Noun\", e;\n}, {});\nconst Nn = function(e) {\n    return !!e.tags.Noun && !(e.tags.Pronoun || e.tags.Comma || e.tags.Possessive) && !!(e.tags.Organization || e.tags.Acronym || e.tags.Place || e.titleCase());\n};\nconst xn = /^[A-Z]('s|,)?$/, Fn = /([A-Z]\\.){2}[A-Z]?/i, Cn = {\n    I: !0,\n    A: !0\n};\nconst Bn = {\n    neighbours: fn,\n    case: vn,\n    stem: An,\n    plural: Hn,\n    organizations: function(e, t) {\n        for(let r = 0; r < e.length; r += 1){\n            let a = e[r];\n            if (void 0 !== jn[a.clean] && !0 === jn.hasOwnProperty(a.clean)) {\n                let n = e[r - 1];\n                if (void 0 !== n && !0 === Nn(n)) {\n                    n.tagSafe(\"Organization\", \"org-word-1\", t), a.tagSafe(\"Organization\", \"org-word-2\", t);\n                    continue;\n                }\n                let i = e[r + 1];\n                if (void 0 !== i && \"of\" === i.clean && e[r + 2] && Nn(e[r + 2])) {\n                    a.tagSafe(\"Organization\", \"org-of-word-1\", t), i.tagSafe(\"Organization\", \"org-of-word-2\", t), e[r + 2].tagSafe(\"Organization\", \"org-of-word-3\", t);\n                    continue;\n                }\n            }\n        }\n    },\n    acronyms: function(e, t) {\n        e.forEach((e)=>{\n            !0 !== e.tags.RomanNumeral && (!0 === Fn.test(e.text) && e.tag(\"Acronym\", \"period-acronym\", t), e.isUpperCase() && function(e, t) {\n                let r = e.reduced;\n                return !!e.tags.Acronym || !t.words[r] && !(r.length > 5) && e.isAcronym();\n            }(e, t) ? (e.tag(\"Acronym\", \"acronym-step\", t), e.tag(\"Noun\", \"acronym-infer\", t)) : !Cn.hasOwnProperty(e.text) && xn.test(e.text) && (e.tag(\"Acronym\", \"one-letter-acronym\", t), e.tag(\"Noun\", \"one-letter-infer\", t)), e.tags.Organization && e.text.length <= 3 && e.tag(\"Acronym\", \"acronym-org\", t), e.tags.Organization && e.isUpperCase() && e.text.length <= 6 && e.tag(\"Acronym\", \"acronym-org-case\", t));\n        });\n    }\n};\nvar Gn = function(e, t) {\n    let r = e.world;\n    return Bn.neighbours(t, r), Bn.case(e), Bn.stem(t, r), t.forEach((t)=>{\n        !1 === t.isKnown() && t.tag(\"Noun\", \"noun-fallback\", e.world);\n    }), Bn.organizations(t, r), Bn.acronyms(t, r), t.forEach((t)=>{\n        Bn.plural(t, e.world);\n    }), e;\n};\nconst zn = /n't$/, In = {\n    \"won't\": [\n        \"will\",\n        \"not\"\n    ],\n    wont: [\n        \"will\",\n        \"not\"\n    ],\n    \"can't\": [\n        \"can\",\n        \"not\"\n    ],\n    cant: [\n        \"can\",\n        \"not\"\n    ],\n    cannot: [\n        \"can\",\n        \"not\"\n    ],\n    \"shan't\": [\n        \"should\",\n        \"not\"\n    ],\n    dont: [\n        \"do\",\n        \"not\"\n    ],\n    dun: [\n        \"do\",\n        \"not\"\n    ]\n};\nconst On = /([a-z\\u00C0-\\u00FF]+)[\\u0027\\u0060\\u00B4\\u2018\\u2019\\u201A\\u201B\\u2032\\u2035\\u2039\\u203A]([a-z]{1,2})$/i, Tn = {\n    ll: \"will\",\n    ve: \"have\",\n    re: \"are\",\n    m: \"am\",\n    \"n't\": \"not\"\n};\nconst Vn = {\n    wanna: [\n        \"want\",\n        \"to\"\n    ],\n    gonna: [\n        \"going\",\n        \"to\"\n    ],\n    im: [\n        \"i\",\n        \"am\"\n    ],\n    alot: [\n        \"a\",\n        \"lot\"\n    ],\n    ive: [\n        \"i\",\n        \"have\"\n    ],\n    imma: [\n        \"I\",\n        \"will\"\n    ],\n    \"where'd\": [\n        \"where\",\n        \"did\"\n    ],\n    whered: [\n        \"where\",\n        \"did\"\n    ],\n    \"when'd\": [\n        \"when\",\n        \"did\"\n    ],\n    whend: [\n        \"when\",\n        \"did\"\n    ],\n    howd: [\n        \"how\",\n        \"did\"\n    ],\n    whatd: [\n        \"what\",\n        \"did\"\n    ],\n    dunno: [\n        \"do\",\n        \"not\",\n        \"know\"\n    ],\n    brb: [\n        \"be\",\n        \"right\",\n        \"back\"\n    ],\n    gtg: [\n        \"got\",\n        \"to\",\n        \"go\"\n    ],\n    irl: [\n        \"in\",\n        \"real\",\n        \"life\"\n    ],\n    tbh: [\n        \"to\",\n        \"be\",\n        \"honest\"\n    ],\n    imo: [\n        \"in\",\n        \"my\",\n        \"opinion\"\n    ],\n    til: [\n        \"today\",\n        \"i\",\n        \"learned\"\n    ],\n    rn: [\n        \"right\",\n        \"now\"\n    ],\n    twas: [\n        \"it\",\n        \"was\"\n    ],\n    \"@\": [\n        \"at\"\n    ]\n};\nconst Mn = /([a-z\\u00C0-\\u00FF]+)[\\u0027\\u0060\\u00B4\\u2018\\u2019\\u201A\\u201B\\u2032\\u2035\\u2039\\u203A]s$/i, Jn = {\n    that: !0,\n    there: !0\n}, Ln = {\n    here: !0,\n    there: !0,\n    everywhere: !0\n};\nconst Sn = /[a-z\\u00C0-\\u00FF]'d$/, _n = {\n    how: !0,\n    what: !0\n};\nconst Kn = /^([0-9.]{1,3}[a-z]{0,2}) ?[-–—] ?([0-9]{1,3}[a-z]{0,2})$/i, qn = /^([0-9][0-9]?(:[0-9][0-9])?(am|pm)?) ?[-–—] ?([0-9][0-9]?(:[0-9][0-9])?(am|pm)?)$/i;\nconst Wn = /^(l|c|d|j|m|n|qu|s|t)[\\u0027\\u0060\\u00B4\\u2018\\u2019\\u201A\\u201B\\u2032\\u2035\\u2039\\u203A]([a-z\\u00C0-\\u00FF]+)$/i, Rn = {\n    l: \"le\",\n    c: \"ce\",\n    d: \"de\",\n    j: \"je\",\n    m: \"me\",\n    n: \"ne\",\n    qu: \"que\",\n    s: \"se\",\n    t: \"tu\"\n};\nconst Un = Va, Qn = xt, Zn = function(e, t) {\n    if (!0 === In.hasOwnProperty(e.clean)) return In[e.clean];\n    if (\"ain't\" === e.clean || \"aint\" === e.clean) return function(e, t) {\n        let r = t.terms(), a = r.indexOf(e), n = r.slice(0, a).find((e)=>e.tags.Noun);\n        return n && n.tags.Plural ? [\n            \"are\",\n            \"not\"\n        ] : [\n            \"is\",\n            \"not\"\n        ];\n    }(e, t);\n    if (!0 === zn.test(e.clean)) {\n        return [\n            e.clean.replace(zn, \"\"),\n            \"not\"\n        ];\n    }\n    return null;\n}, Xn = function(e) {\n    let t = e.text.match(On);\n    return null === t ? null : Tn.hasOwnProperty(t[2]) ? [\n        t[1],\n        Tn[t[2]]\n    ] : null;\n}, Yn = function(e) {\n    return Vn.hasOwnProperty(e.clean) ? Vn[e.clean] : null;\n}, ei = function(e, t, r) {\n    let a = e.text.match(Mn);\n    if (null !== a) {\n        if (!0 === ((e, t)=>{\n            if (e.tags.Possessive) return !0;\n            if (e.tags.Pronoun || e.tags.QuestionWord) return !1;\n            if (Jn.hasOwnProperty(e.reduced)) return !1;\n            let r = t.get(e.next);\n            if (!r) return !0;\n            if (r.tags.Verb) return !!r.tags.Infinitive || !!r.tags.PresentTense;\n            if (r.tags.Noun) return !0 !== Ln.hasOwnProperty(r.reduced);\n            let a = t.get(r.next);\n            return !(!a || !a.tags.Noun || a.tags.Pronoun) || (r.tags.Adjective || r.tags.Adverb || r.tags.Verb, !1);\n        })(e, t.pool)) return e.tag(\"#Possessive\", \"isPossessive\", r), null;\n        if (null !== a) return ((e, t)=>{\n            let r = t.terms(), a = r.indexOf(e);\n            return r.slice(a + 1, a + 3).find((e)=>e.tags.PastTense);\n        })(e, t) ? [\n            a[1],\n            \"has\"\n        ] : [\n            a[1],\n            \"is\"\n        ];\n    }\n    return null;\n}, ti = function(e, t) {\n    if (Sn.test(e.clean)) {\n        let r = e.clean.replace(/'d$/, \"\"), a = t.terms(), n = a.indexOf(e), i = a.slice(n + 1, n + 4);\n        for(let e = 0; e < i.length; e++){\n            let t = i[e];\n            if (t.tags.Verb) return t.tags.PastTense ? [\n                r,\n                \"had\"\n            ] : !0 === _n[r] ? [\n                r,\n                \"did\"\n            ] : [\n                r,\n                \"would\"\n            ];\n        }\n        return [\n            r,\n            \"would\"\n        ];\n    }\n    return null;\n}, ri = function(e) {\n    if (!0 === e.tags.PhoneNumber) return null;\n    let t = e.text.match(Kn);\n    return null !== t ? [\n        t[1],\n        \"to\",\n        t[2]\n    ] : (t = e.text.match(qn), null !== t ? [\n        t[1],\n        \"to\",\n        t[4]\n    ] : null);\n}, ai = function(e) {\n    let t = e.text.match(Wn);\n    if (null === t || !1 === Rn.hasOwnProperty(t[1])) return null;\n    let r = [\n        Rn[t[1]],\n        t[2]\n    ];\n    return r[0] && r[1] ? r : null;\n}, ni = /^[0-9]+$/, ii = /^[0-9]+(st|nd|rd|th)$/, oi = /^[0-9:]+(am|pm)?$/, si = function(e, t) {\n    let r = Qn(e.join(\" \"), t.world, t.pool())[0], a = r.terms();\n    Un(a, t.world);\n    let n = a[0];\n    return ii.test(n.text) && a[2] ? (a[0].tag(\"Ordinal\", \"ord-range\", t.world), a[2].tag(\"Ordinal\", \"ord-range\", t.world)) : ni.test(n.text) && a[2] ? (a[0].tag(\"Cardinal\", \"num-range\", t.world), a[2].tag(\"Cardinal\", \"num-range\", t.world)) : oi.test(n.text) && a[1] && a[2] && (a[0].tag(\"Time\", \"time-range\", t.world), a[1].tag(\"Date\", \"time-range\", t.world), a[2].tag(\"Time\", \"time-range\", t.world)), a.forEach((e)=>{\n        e.implicit = e.text, e.text = \"\", e.clean = \"\", e.pre = \"\", e.post = \"\", 0 === Object.keys(e.tags).length && (e.tags.Noun = !0);\n    }), r;\n};\nvar li = function(e) {\n    let t = e.world;\n    return e.list.forEach((r)=>{\n        let a = r.terms();\n        for(let n = 0; n < a.length; n += 1){\n            let i = a[n], o = Zn(i, r);\n            if (o = o || Xn(i), o = o || Yn(i), o = o || ei(i, r, t), o = o || ti(i, r), o = o || ri(i), o = o || ai(i), null !== o) {\n                let t = si(o, e);\n                !0 === r.has(\"#NumberRange\") && e.buildFrom([\n                    t\n                ]).tag(\"NumberRange\"), t.terms(0).text = i.text, r.buildFrom(i.id, 1, e.pool()).replace(t, e, !0);\n            }\n        }\n    }), e;\n};\nconst ui = function(e, t) {\n    let r = e._cache.tags[t] || [];\n    return r = r.map((t)=>e.list[t]), e.buildFrom(r);\n};\nvar ci = function(e) {\n    let t = ui(e, \"Infinitive\");\n    return t.found && (t = t.ifNo(\"@hasQuestionMark\"), t = t.ifNo(\"(i|we|they)\"), t.not(\"will be\").match(\"[#Infinitive] (#Determiner|#Possessive) #Noun\").notIf(\"(our|their)\").match(\"#Infinitive\").tag(\"Imperative\", \"shut-the\"), t.match(\"^[#Infinitive] #Adverb?$\", 0).tag(\"Imperative\", \"go-fast\"), t.match(\"[(do && #Infinitive)] not? #Verb\", 0).tag(\"Imperative\", \"do-not\"), t.match(\"[#Infinitive] (it|some) (#Comparative|#Preposition|please|now|again)\", 0).tag(\"Imperative\", \"do-it\")), t = function(e, t) {\n        let r = e._cache.words[t] || [];\n        return r = r.map((t)=>e.list[t]), e.buildFrom(r);\n    }(e, \"like\"), t.match(\"#Adverb like\").notIf(\"(really|generally|typically|usually|sometimes|often|just) [like]\").tag(\"Adverb\", \"adverb-like\"), t = ui(e, \"Adjective\"), t.match(\"#Determiner #Adjective$\").notIf(\"(#Comparative|#Superlative)\").terms(1).tag(\"Noun\", \"the-adj-1\"), t = ui(e, \"FirstName\"), t.match(\"#FirstName (#Noun|@titleCase)\").ifNo(\"^#Possessive\").ifNo(\"(#Pronoun|#Plural)\").ifNo(\"@hasComma .\").lastTerm().tag(\"#LastName\", \"firstname-noun\"), t = ui(e, \"Value\"), t = t.match(\"#Value #PresentTense\").ifNo(\"#Copula\"), t.found && (!0 === t.has(\"(one|1)\") ? t.terms(1).tag(\"Singular\", \"one-presentTense\") : t.terms(1).tag(\"Plural\", \"value-presentTense\")), e.match(\"^(well|so|okay)\").tag(\"Expression\", \"well-\"), e.match(\"#Value [of a second]\", 0).unTag(\"Value\", \"of-a-second\"), e.match(\"#Value [seconds]\", 0).unTag(\"Value\", \"30-seconds\").tag([\n        \"Unit\",\n        \"Plural\"\n    ]), t = ui(e, \"Gerund\"), t.match(\"(be|been) (#Adverb|not)+? #Gerund\").not(\"#Verb$\").tag(\"Auxiliary\", \"be-walking\"), e.match(\"(try|use|attempt|build|make) #Verb\").ifNo(\"(@hasComma|#Negative|#PhrasalVerb|#Copula|will|be)\").lastTerm().tag(\"#Noun\", \"do-verb\"), t = ui(e, \"Possessive\"), t = t.match(\"#Possessive [#Infinitive]\", 0), t.lookBehind(\"(let|made|make|force|ask)\").found || t.tag(\"Noun\", \"her-match\"), e;\n};\nvar hi = function(e) {\n    let t = {};\n    for(let r = 0; r < e.length; r++)t[e[r]] = !0;\n    return Object.keys(t);\n};\nvar di = [\n    {\n        match: \"too much\",\n        tag: \"Adverb Adjective\",\n        reason: \"bit-4\"\n    },\n    {\n        match: \"u r\",\n        tag: \"Pronoun Copula\",\n        reason: \"u r\"\n    },\n    {\n        match: \"#Copula (pretty|dead|full|well|sure) (#Adjective|#Noun)\",\n        tag: \"#Copula #Adverb #Adjective\",\n        reason: \"sometimes-adverb\"\n    },\n    {\n        match: \"(#Pronoun|#Person) (had|#Adverb)? [better] #PresentTense\",\n        group: 0,\n        tag: \"Modal\",\n        reason: \"i-better\"\n    },\n    {\n        match: \"[#Gerund] #Adverb? not? #Copula\",\n        group: 0,\n        tag: \"Activity\",\n        reason: \"gerund-copula\"\n    },\n    {\n        match: \"[#Gerund] #Modal\",\n        group: 0,\n        tag: \"Activity\",\n        reason: \"gerund-modal\"\n    },\n    {\n        match: \"holy (shit|fuck|hell)\",\n        tag: \"Expression\",\n        reason: \"swears-expression\"\n    },\n    {\n        match: \"#Noun #Actor\",\n        tag: \"Actor\",\n        reason: \"thing-doer\"\n    },\n    {\n        match: \"#Conjunction [u]\",\n        group: 0,\n        tag: \"Pronoun\",\n        reason: \"u-pronoun-2\"\n    },\n    {\n        match: \"[u] #Verb\",\n        group: 0,\n        tag: \"Pronoun\",\n        reason: \"u-pronoun-1\"\n    },\n    {\n        match: \"#Noun [(who|whom)]\",\n        group: 0,\n        tag: \"Determiner\",\n        reason: \"captain-who\"\n    },\n    {\n        match: \"a bit much\",\n        tag: \"Determiner Adverb Adjective\",\n        reason: \"bit-3\"\n    },\n    {\n        match: \"#Verb #Adverb? #Noun [(that|which)]\",\n        group: 0,\n        tag: \"Preposition\",\n        reason: \"that-prep\"\n    },\n    {\n        match: \"@hasComma [which] (#Pronoun|#Verb)\",\n        group: 0,\n        tag: \"Preposition\",\n        reason: \"which-copula\"\n    },\n    {\n        match: \"#Copula just [like]\",\n        group: 0,\n        tag: \"Preposition\",\n        reason: \"like-preposition\"\n    },\n    {\n        match: \"#Noun [like] #Noun\",\n        group: 0,\n        tag: \"Preposition\",\n        reason: \"noun-like\"\n    },\n    {\n        match: \"[had] #Noun+ #PastTense\",\n        group: 0,\n        tag: \"Condition\",\n        reason: \"had-he\"\n    },\n    {\n        match: \"[were] #Noun+ to #Infinitive\",\n        group: 0,\n        tag: \"Condition\",\n        reason: \"were-he\"\n    },\n    {\n        match: \"^how\",\n        tag: \"QuestionWord\",\n        reason: \"how-question\"\n    },\n    {\n        match: \"[how] (#Determiner|#Copula|#Modal|#PastTense)\",\n        group: 0,\n        tag: \"QuestionWord\",\n        reason: \"how-is\"\n    },\n    {\n        match: \"^which\",\n        tag: \"QuestionWord\",\n        reason: \"which-question\"\n    },\n    {\n        match: \"[so] #Noun\",\n        group: 0,\n        tag: \"Conjunction\",\n        reason: \"so-conj\"\n    },\n    {\n        match: \"[(who|what|where|why|how|when)] #Noun #Copula #Adverb? (#Verb|#Adjective)\",\n        group: 0,\n        tag: \"Conjunction\",\n        reason: \"how-he-is-x\"\n    }\n], gi = {\n    adverbAdjective: [\n        \"dark\",\n        \"bright\",\n        \"flat\",\n        \"light\",\n        \"soft\",\n        \"pale\",\n        \"dead\",\n        \"dim\",\n        \"faux\",\n        \"little\",\n        \"wee\",\n        \"sheer\",\n        \"most\",\n        \"near\",\n        \"good\",\n        \"extra\",\n        \"all\"\n    ],\n    personDate: [\n        \"april\",\n        \"june\",\n        \"may\",\n        \"jan\",\n        \"august\",\n        \"eve\"\n    ],\n    personMonth: [\n        \"january\",\n        \"april\",\n        \"may\",\n        \"june\",\n        \"jan\",\n        \"sep\"\n    ],\n    personAdjective: [\n        \"misty\",\n        \"rusty\",\n        \"dusty\",\n        \"rich\",\n        \"randy\",\n        \"young\"\n    ],\n    personVerb: [\n        \"pat\",\n        \"wade\",\n        \"ollie\",\n        \"will\",\n        \"rob\",\n        \"buck\",\n        \"bob\",\n        \"mark\",\n        \"jack\"\n    ],\n    personPlace: [\n        \"darwin\",\n        \"hamilton\",\n        \"paris\",\n        \"alexandria\",\n        \"houston\",\n        \"kobe\",\n        \"santiago\",\n        \"salvador\",\n        \"sydney\",\n        \"victoria\"\n    ],\n    personNoun: [\n        \"art\",\n        \"baker\",\n        \"berg\",\n        \"bill\",\n        \"brown\",\n        \"charity\",\n        \"chin\",\n        \"christian\",\n        \"cliff\",\n        \"daisy\",\n        \"dawn\",\n        \"dick\",\n        \"dolly\",\n        \"faith\",\n        \"franco\",\n        \"gene\",\n        \"green\",\n        \"hall\",\n        \"hill\",\n        \"holly\",\n        \"hope\",\n        \"jean\",\n        \"jewel\",\n        \"joy\",\n        \"kelvin\",\n        \"king\",\n        \"kitty\",\n        \"lane\",\n        \"lily\",\n        \"melody\",\n        \"mercedes\",\n        \"miles\",\n        \"olive\",\n        \"penny\",\n        \"ray\",\n        \"reed\",\n        \"robin\",\n        \"rod\",\n        \"rose\",\n        \"sky\",\n        \"summer\",\n        \"trinity\",\n        \"van\",\n        \"viola\",\n        \"violet\",\n        \"wang\",\n        \"white\"\n    ]\n};\nconst pi = `(${gi.personDate.join(\"|\")})`;\nvar mi = [\n    {\n        match: \"#Holiday (day|eve)\",\n        tag: \"Holiday\",\n        reason: \"holiday-day\"\n    },\n    {\n        match: \"[sun] the #Ordinal\",\n        tag: \"WeekDay\",\n        reason: \"sun-the-5th\"\n    },\n    {\n        match: \"[sun] #Date\",\n        group: 0,\n        tag: \"WeekDay\",\n        reason: \"sun-feb\"\n    },\n    {\n        match: \"#Date (on|this|next|last|during)? [sun]\",\n        group: 0,\n        tag: \"WeekDay\",\n        reason: \"1pm-sun\"\n    },\n    {\n        match: \"(in|by|before|during|on|until|after|of|within|all) [sat]\",\n        group: 0,\n        tag: \"WeekDay\",\n        reason: \"sat\"\n    },\n    {\n        match: \"(in|by|before|during|on|until|after|of|within|all) [wed]\",\n        group: 0,\n        tag: \"WeekDay\",\n        reason: \"wed\"\n    },\n    {\n        match: \"(in|by|before|during|on|until|after|of|within|all) [march]\",\n        group: 0,\n        tag: \"Month\",\n        reason: \"march\"\n    },\n    {\n        match: \"[sat] #Date\",\n        group: 0,\n        tag: \"WeekDay\",\n        reason: \"sat-feb\"\n    },\n    {\n        match: \"#Preposition [(march|may)]\",\n        group: 0,\n        tag: \"Month\",\n        reason: \"in-month\"\n    },\n    {\n        match: \"this [(march|may)]\",\n        group: 0,\n        tag: \"Month\",\n        reason: \"this-month\"\n    },\n    {\n        match: \"next [(march|may)]\",\n        group: 0,\n        tag: \"Month\",\n        reason: \"this-month\"\n    },\n    {\n        match: \"last [(march|may)]\",\n        group: 0,\n        tag: \"Month\",\n        reason: \"this-month\"\n    },\n    {\n        match: \"[(march|may)] the? #Value\",\n        group: 0,\n        tag: \"Month\",\n        reason: \"march-5th\"\n    },\n    {\n        match: \"#Value of? [(march|may)]\",\n        group: 0,\n        tag: \"Month\",\n        reason: \"5th-of-march\"\n    },\n    {\n        match: \"[(march|may)] .? #Date\",\n        group: 0,\n        tag: \"Month\",\n        reason: \"march-and-feb\"\n    },\n    {\n        match: \"#Date .? [(march|may)]\",\n        group: 0,\n        tag: \"Month\",\n        reason: \"feb-and-march\"\n    },\n    {\n        match: \"#Adverb [(march|may)]\",\n        group: 0,\n        tag: \"Verb\",\n        reason: \"quickly-march\"\n    },\n    {\n        match: \"[(march|may)] #Adverb\",\n        group: 0,\n        tag: \"Verb\",\n        reason: \"march-quickly\"\n    },\n    {\n        match: \"#Value of #Month\",\n        tag: \"Date\",\n        reason: \"value-of-month\"\n    },\n    {\n        match: \"#Cardinal #Month\",\n        tag: \"Date\",\n        reason: \"cardinal-month\"\n    },\n    {\n        match: \"#Month #Value to #Value\",\n        tag: \"Date\",\n        reason: \"value-to-value\"\n    },\n    {\n        match: \"#Month the #Value\",\n        tag: \"Date\",\n        reason: \"month-the-value\"\n    },\n    {\n        match: \"(#WeekDay|#Month) #Value\",\n        tag: \"Date\",\n        reason: \"date-value\"\n    },\n    {\n        match: \"#Value (#WeekDay|#Month)\",\n        tag: \"Date\",\n        reason: \"value-date\"\n    },\n    {\n        match: \"(#TextValue && #Date) #TextValue\",\n        tag: \"Date\",\n        reason: \"textvalue-date\"\n    },\n    {\n        match: `in [${pi}]`,\n        group: 0,\n        tag: \"Date\",\n        reason: \"in-june\"\n    },\n    {\n        match: `during [${pi}]`,\n        group: 0,\n        tag: \"Date\",\n        reason: \"in-june\"\n    },\n    {\n        match: `on [${pi}]`,\n        group: 0,\n        tag: \"Date\",\n        reason: \"in-june\"\n    },\n    {\n        match: `by [${pi}]`,\n        group: 0,\n        tag: \"Date\",\n        reason: \"by-june\"\n    },\n    {\n        match: `after [${pi}]`,\n        group: 0,\n        tag: \"Date\",\n        reason: \"after-june\"\n    },\n    {\n        match: `#Date [${pi}]`,\n        group: 0,\n        tag: \"Date\",\n        reason: \"in-june\"\n    },\n    {\n        match: pi + \" #Value\",\n        tag: \"Date\",\n        reason: \"june-5th\"\n    },\n    {\n        match: pi + \" #Date\",\n        tag: \"Date\",\n        reason: \"june-5th\"\n    },\n    {\n        match: pi + \" #ProperNoun\",\n        tag: \"Person\",\n        reason: \"june-smith\",\n        safe: !0\n    },\n    {\n        match: pi + \" #Acronym? (#ProperNoun && !#Month)\",\n        tag: \"Person\",\n        reason: \"june-smith-jr\"\n    },\n    {\n        match: \"#Cardinal [second]\",\n        tag: \"Unit\",\n        reason: \"one-second\"\n    },\n    {\n        match: \"#Month #NumberRange\",\n        tag: \"Date\",\n        reason: \"aug 20-21\"\n    },\n    {\n        match: \"(#Place|#Demonmym|#Time) (standard|daylight|central|mountain)? time\",\n        tag: \"Timezone\",\n        reason: \"std-time\"\n    },\n    {\n        match: \"(eastern|mountain|pacific|central|atlantic) (standard|daylight|summer)? time\",\n        tag: \"Timezone\",\n        reason: \"eastern-time\"\n    },\n    {\n        match: \"#Time [(eastern|mountain|pacific|central|est|pst|gmt)]\",\n        group: 0,\n        tag: \"Timezone\",\n        reason: \"5pm-central\"\n    },\n    {\n        match: \"(central|western|eastern) european time\",\n        tag: \"Timezone\",\n        reason: \"cet\"\n    }\n];\nconst fi = `(${gi.personAdjective.join(\"|\")})`;\nvar bi = [\n    {\n        match: \"[all] #Determiner? #Noun\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"all-noun\"\n    },\n    {\n        match: `#Adverb [${fi}]`,\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"really-rich\"\n    },\n    {\n        match: fi + \" #Person\",\n        tag: \"Person\",\n        reason: \"randy-smith\"\n    },\n    {\n        match: fi + \" #Acronym? #ProperNoun\",\n        tag: \"Person\",\n        reason: \"rusty-smith\"\n    },\n    {\n        match: \"#Copula [(just|alone)]$\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"not-adverb\"\n    },\n    {\n        match: \"#Singular is #Adverb? [#PastTense$]\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"is-filled\"\n    },\n    {\n        match: \"[#PastTense] #Singular is\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"smoked-poutine\"\n    },\n    {\n        match: \"[#PastTense] #Plural are\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"baked-onions\"\n    },\n    {\n        match: \"well [#PastTense]\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"well-made\"\n    },\n    {\n        match: \"#Copula [fucked up?]\",\n        tag: \"Adjective\",\n        reason: \"swears-adjective\"\n    },\n    {\n        match: \"#Singular (seems|appears) #Adverb? [#PastTense$]\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"seems-filled\"\n    },\n    {\n        match: \"(a|an) [#Gerund]\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"a|an\"\n    },\n    {\n        match: \"as [#Gerund] as\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"as-gerund-as\"\n    },\n    {\n        match: \"more [#Gerund] than\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"more-gerund-than\"\n    },\n    {\n        match: \"(so|very|extremely) [#Gerund]\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"so-gerund\"\n    },\n    {\n        match: \"(it|he|she|everything|something) #Adverb? was #Adverb? [#Gerund]\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"it-was-gerund\"\n    },\n    {\n        match: \"(found|found) it #Adverb? [#Gerund]\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"found-it-gerund\"\n    },\n    {\n        match: \"a (little|bit|wee) bit? [#Gerund]\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"a-bit-gerund\"\n    },\n    {\n        match: \"#Copula #Adjective? [(out|in|through)]$\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"still-out\"\n    },\n    {\n        match: \"^[#Adjective] (the|your) #Noun\",\n        group: 0,\n        tag: \"Infinitive\",\n        reason: \"shut-the\"\n    },\n    {\n        match: \"the [said] #Noun\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"the-said-card\"\n    },\n    {\n        match: \"#Noun (that|which|whose) [#PastTense && !#Copula] #Noun\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"that-past-noun\"\n    }\n], yi = [\n    {\n        match: \"there (are|were) #Adjective? [#PresentTense]\",\n        group: 0,\n        tag: \"Plural\",\n        reason: \"there-are\"\n    },\n    {\n        match: \"#Determiner [sun]\",\n        group: 0,\n        tag: \"Singular\",\n        reason: \"the-sun\"\n    },\n    {\n        match: \"#Verb (a|an) [#Value]\",\n        group: 0,\n        tag: \"Singular\",\n        reason: \"did-a-value\"\n    },\n    {\n        match: \"the [(can|will|may)]\",\n        group: 0,\n        tag: \"Singular\",\n        reason: \"the can\"\n    },\n    {\n        match: \"#FirstName #Acronym? (#Possessive && #LastName)\",\n        tag: \"Possessive\",\n        reason: \"name-poss\"\n    },\n    {\n        match: \"#Organization+ #Possessive\",\n        tag: \"Possessive\",\n        reason: \"org-possessive\"\n    },\n    {\n        match: \"#Place+ #Possessive\",\n        tag: \"Possessive\",\n        reason: \"place-possessive\"\n    },\n    {\n        match: \"(#Verb && !#Modal) (all|every|each|most|some|no) [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"all-presentTense\"\n    },\n    {\n        match: \"#Determiner [#Adjective] #Copula\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"the-adj-is\"\n    },\n    {\n        match: \"#Adjective [#Adjective] #Copula\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"adj-adj-is\"\n    },\n    {\n        match: \"(had|have|#PastTense) #Adjective [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"adj-presentTense\"\n    },\n    {\n        match: \"^#Adjective [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"start adj-presentTense\"\n    },\n    {\n        match: \"#Value #Adjective [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"one-big-reason\"\n    },\n    {\n        match: \"#PastTense #Adjective+ [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"won-wide-support\"\n    },\n    {\n        match: \"(many|few|several|couple) [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"many-poses\"\n    },\n    {\n        match: \"#Adverb #Adjective [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"very-big-dream\"\n    },\n    {\n        match: \"#Adjective [#Infinitive] #Noun\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"good-wait-staff\"\n    },\n    {\n        match: \"#Adjective #Adjective [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"adorable-little-store\"\n    },\n    {\n        match: \"#Preposition #Adjective [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"of-basic-training\"\n    },\n    {\n        match: \"#Adjective [#Gerund]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"early-warning\"\n    },\n    {\n        match: \"#Gerund #Adverb? #Comparative [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"higher-costs\"\n    },\n    {\n        match: \"#Infinitive (this|that|the) [#Infinitive]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"do-this-dance\"\n    },\n    {\n        match: \"(his|her|its) [#Adjective]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"his-fine\"\n    },\n    {\n        match: \"some [#Verb] #Plural\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"determiner6\"\n    },\n    {\n        match: \"more #Noun\",\n        tag: \"Noun\",\n        reason: \"more-noun\"\n    },\n    {\n        match: \"(#Noun && @hasComma) #Noun (and|or) [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"noun-list\"\n    },\n    {\n        match: \"(right|rights) of .\",\n        tag: \"Noun\",\n        reason: \"right-of\"\n    },\n    {\n        match: \"a [bit]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"bit-2\"\n    },\n    {\n        match: \"#Possessive #Ordinal [#PastTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"first-thought\"\n    },\n    {\n        match: \"#Gerund #Determiner [#Infinitive]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"running-a-show\"\n    },\n    {\n        match: \"#Determiner #Adverb [#Infinitive]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"the-reason\"\n    },\n    {\n        match: \"(the|this|those|these) #Adjective [#Verb]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"the-adj-verb\"\n    },\n    {\n        match: \"(the|this|those|these) #Adverb #Adjective [#Verb]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"determiner4\"\n    },\n    {\n        match: \"#Determiner [#Adjective] (#Copula|#PastTense|#Auxiliary)\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"the-adj-2\"\n    },\n    {\n        match: \"(the|this|a|an) [#Infinitive] #Adverb? #Verb\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"determiner5\"\n    },\n    {\n        match: \"#Determiner [#Infinitive] #Noun\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"determiner7\"\n    },\n    {\n        match: \"#Determiner #Adjective #Adjective? [#Infinitive]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"a-nice-inf\"\n    },\n    {\n        match: \"the [#Verb] #Preposition .\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"determiner1\"\n    },\n    {\n        match: \"#Determiner [#Verb] of\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"the-verb-of\"\n    },\n    {\n        match: \"#Adjective #Noun+ [#Infinitive] #Copula\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"career-move\"\n    },\n    {\n        match: \"#Determiner #Noun of [#Verb]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"noun-of-noun\"\n    },\n    {\n        match: \"#Determiner [(western|eastern|northern|southern|central)] #Noun\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"western-line\"\n    },\n    {\n        match: \"#Possessive [#Gerund]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"her-polling\"\n    },\n    {\n        match: \"(his|her|its) [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"its-polling\"\n    },\n    {\n        match: \"(#Determiner|#Value) [(linear|binary|mobile|lexical|technical|computer|scientific|formal)] #Noun\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"technical-noun\"\n    },\n    {\n        match: \"(the|those|these|a|an) [#Participle] #Noun\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"blown-motor\"\n    },\n    {\n        match: \"(the|those|these|a|an) #Adjective? [#Infinitive]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"det-inf\"\n    },\n    {\n        match: \"(the|those|these|a|an) #Adjective? [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"det-pres\"\n    },\n    {\n        match: \"(the|those|these|a|an) #Adjective? [#PastTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"det-past\"\n    },\n    {\n        match: \"(this|that) [#Gerund]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"this-gerund\"\n    },\n    {\n        match: \"at some [#Infinitive]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"at-some-inf\"\n    },\n    {\n        match: \"(#Noun && @hasHyphen) #Verb\",\n        tag: \"Noun\",\n        reason: \"hyphen-verb\"\n    },\n    {\n        match: \"is no [#Verb]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"is-no-verb\"\n    },\n    {\n        match: \"[#Verb] than\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"correction\"\n    },\n    {\n        match: \"(go|goes|went) to [#Infinitive]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"goes-to-verb\"\n    },\n    {\n        match: \"(a|an) #Noun [#Infinitive] (#Preposition|#Noun)\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"a-noun-inf\"\n    },\n    {\n        match: \"(a|an) #Noun [#Infinitive]$\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"a-noun-inf2\"\n    },\n    {\n        match: \"do [so]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"so-noun\"\n    },\n    {\n        match: \"#Copula [#Infinitive] #Noun\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"is-pres-noun\"\n    },\n    {\n        match: \"#Determiner #Adverb? [close]\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"a-close\"\n    },\n    {\n        match: \"#Determiner [(shit|damn|hell)]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"swears-noun\"\n    },\n    {\n        match: \"(the|these) [#Singular] (were|are)\",\n        group: 0,\n        tag: \"Plural\",\n        reason: \"singular-were\"\n    },\n    {\n        match: \"#Gerund #Adjective? for [#Infinitive]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"running-for\"\n    },\n    {\n        match: \"#Gerund #Adjective to [#Infinitive]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"running-to\"\n    },\n    {\n        match: \"(many|any|some|several) [#PresentTense] for\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"any-verbs-for\"\n    },\n    {\n        match: \"(have|had) [#Adjective] #Preposition .\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"have-fun\"\n    },\n    {\n        match: \"co #Noun\",\n        tag: \"Actor\",\n        reason: \"co-noun\"\n    },\n    {\n        match: \"to #PresentTense #Noun [#PresentTense] #Preposition\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"gas-exchange\"\n    },\n    {\n        match: \"a #Noun+ or #Adverb+? [#Verb]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"noun-or-noun\"\n    },\n    {\n        match: \"[#Gerund] system\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"operating-system\"\n    },\n    {\n        match: \"#PastTense (until|as|through|without) [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"waited-until-release\"\n    },\n    {\n        match: \"#Gerund like #Adjective? [#PresentTense]\",\n        group: 0,\n        tag: \"Plural\",\n        reason: \"like-hot-cakes\"\n    },\n    {\n        match: \"some #Adjective [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"some-reason\"\n    },\n    {\n        match: \"for some [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"for-some-reason\"\n    },\n    {\n        match: \"(same|some|the|that|a) kind of [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"some-kind-of\"\n    },\n    {\n        match: \"(same|some|the|that|a) type of [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"some-type-of\"\n    },\n    {\n        match: \"#Gerund #Adjective #Preposition [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"doing-better-for-x\"\n    },\n    {\n        match: \"(get|got|have|had) #Comparative [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"got-better-aim\"\n    },\n    {\n        match: \"#Pronoun #Infinitive [#Gerund] #PresentTense\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"tipping-sucks\"\n    }\n];\nvar vi = [\n    {\n        match: \"[still] #Adjective\",\n        group: 0,\n        tag: \"Adverb\",\n        reason: \"still-advb\"\n    },\n    {\n        match: \"[still] #Verb\",\n        group: 0,\n        tag: \"Adverb\",\n        reason: \"still-verb\"\n    },\n    {\n        match: \"[so] #Adjective\",\n        group: 0,\n        tag: \"Adverb\",\n        reason: \"so-adv\"\n    },\n    {\n        match: \"[way] #Comparative\",\n        group: 0,\n        tag: \"Adverb\",\n        reason: \"way-adj\"\n    },\n    {\n        match: \"[way] #Adverb #Adjective\",\n        group: 0,\n        tag: \"Adverb\",\n        reason: \"way-too-adj\"\n    },\n    {\n        match: \"[all] #Verb\",\n        group: 0,\n        tag: \"Adverb\",\n        reason: \"all-verb\"\n    },\n    {\n        match: \"(#Verb && !#Modal) [like]\",\n        group: 0,\n        tag: \"Adverb\",\n        reason: \"verb-like\"\n    },\n    {\n        match: \"(barely|hardly) even\",\n        tag: \"Adverb\",\n        reason: \"barely-even\"\n    },\n    {\n        match: \"[even] #Verb\",\n        group: 0,\n        tag: \"Adverb\",\n        reason: \"even-walk\"\n    },\n    {\n        match: \"even left\",\n        tag: \"#Adverb #Verb\",\n        reason: \"even-left\"\n    },\n    {\n        match: \"(#PresentTense && !#Copula) [(hard|quick|long|bright|slow|fast|backwards|forwards)]\",\n        group: 0,\n        tag: \"Adverb\",\n        reason: \"lazy-ly\"\n    },\n    {\n        match: \"[much] #Adjective\",\n        group: 0,\n        tag: \"Adverb\",\n        reason: \"bit-1\"\n    },\n    {\n        match: \"#Copula [#Adverb]$\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"is-well\"\n    },\n    {\n        match: \"a [(little|bit|wee) bit?] #Adjective\",\n        group: 0,\n        tag: \"Adverb\",\n        reason: \"a-bit-cold\"\n    },\n    {\n        match: `[${`(${gi.adverbAdjective.join(\"|\")})`}] #Adjective`,\n        group: 0,\n        tag: \"Adverb\",\n        reason: \"dark-green\"\n    },\n    {\n        match: \"#Adverb [#Adverb]$\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"kinda-sparkly\"\n    },\n    {\n        match: \"#Adverb [#Adverb] (and|or|then)\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"kinda-sparkly-and\"\n    },\n    {\n        match: \"[super] #Adjective #Noun\",\n        group: 0,\n        tag: \"Adverb\",\n        reason: \"super-strong\"\n    }\n], wi = [\n    {\n        match: \"1 #Value #PhoneNumber\",\n        tag: \"PhoneNumber\",\n        reason: \"1-800-Value\"\n    },\n    {\n        match: \"#NumericValue #PhoneNumber\",\n        tag: \"PhoneNumber\",\n        reason: \"(800) PhoneNumber\"\n    },\n    {\n        match: \"#Demonym #Currency\",\n        tag: \"Currency\",\n        reason: \"demonym-currency\"\n    },\n    {\n        match: \"[second] #Noun\",\n        group: 0,\n        tag: \"Ordinal\",\n        reason: \"second-noun\"\n    },\n    {\n        match: \"#Value+ [#Currency]\",\n        group: 0,\n        tag: \"Unit\",\n        reason: \"5-yan\"\n    },\n    {\n        match: \"#Value [(foot|feet)]\",\n        group: 0,\n        tag: \"Unit\",\n        reason: \"foot-unit\"\n    },\n    {\n        match: \"(minus|negative) #Value\",\n        tag: \"Value\",\n        reason: \"minus-value\"\n    },\n    {\n        match: \"#Value [#Abbreviation]\",\n        group: 0,\n        tag: \"Unit\",\n        reason: \"value-abbr\"\n    },\n    {\n        match: \"#Value [k]\",\n        group: 0,\n        tag: \"Unit\",\n        reason: \"value-k\"\n    },\n    {\n        match: \"#Unit an hour\",\n        tag: \"Unit\",\n        reason: \"unit-an-hour\"\n    },\n    {\n        match: \"#Value (point|decimal) #Value\",\n        tag: \"Value\",\n        reason: \"value-point-value\"\n    },\n    {\n        match: \"(#Value|a) [(buck|bucks|grand)]\",\n        group: 0,\n        tag: \"Currency\",\n        reason: \"value-bucks\"\n    },\n    {\n        match: \"#Determiner [(half|quarter)] #Ordinal\",\n        group: 0,\n        tag: \"Value\",\n        reason: \"half-ordinal\"\n    },\n    {\n        match: \"a #Value\",\n        tag: \"Value\",\n        reason: \"a-value\"\n    },\n    {\n        match: \"[#Value+] #Currency\",\n        group: 0,\n        tag: \"Money\",\n        reason: \"15 usd\"\n    },\n    {\n        match: \"(hundred|thousand|million|billion|trillion|quadrillion)+ and #Value\",\n        tag: \"Value\",\n        reason: \"magnitude-and-value\"\n    },\n    {\n        match: \"!once [(a|an)] (#Duration|hundred|thousand|million|billion|trillion)\",\n        group: 0,\n        tag: \"Value\",\n        reason: \"a-is-one\"\n    }\n];\nconst ki = `(${gi.personVerb.join(\"|\")})`;\nvar Ai = [\n    {\n        match: \"[#Adjective] #Possessive #Noun\",\n        group: 0,\n        tag: \"Verb\",\n        reason: \"gerund-his-noun\"\n    },\n    {\n        match: \"[#Adjective] (us|you)\",\n        group: 0,\n        tag: \"Gerund\",\n        reason: \"loving-you\"\n    },\n    {\n        match: \"(slowly|quickly) [#Adjective]\",\n        group: 0,\n        tag: \"Gerund\",\n        reason: \"slowly-adj\"\n    },\n    {\n        match: \"(#Modal|i|they|we|do) not? [like]\",\n        group: 0,\n        tag: \"PresentTense\",\n        reason: \"modal-like\"\n    },\n    {\n        match: \"do (simply|just|really|not)+ [(#Adjective|like)]\",\n        group: 0,\n        tag: \"Verb\",\n        reason: \"do-simply-like\"\n    },\n    {\n        match: \"does (#Adverb|not)? [#Adjective]\",\n        group: 0,\n        tag: \"PresentTense\",\n        reason: \"does-mean\"\n    },\n    {\n        match: \"i (#Adverb|do)? not? [mean]\",\n        group: 0,\n        tag: \"PresentTense\",\n        reason: \"i-mean\"\n    },\n    {\n        match: \"#Noun #Adverb? [left]\",\n        group: 0,\n        tag: \"PastTense\",\n        reason: \"left-verb\"\n    },\n    {\n        match: \"(this|that) [#Plural]\",\n        group: 0,\n        tag: \"PresentTense\",\n        reason: \"this-verbs\"\n    },\n    {\n        match: \"[#Copula (#Adverb|not)+?] (#Gerund|#PastTense)\",\n        group: 0,\n        tag: \"Auxiliary\",\n        reason: \"copula-walking\"\n    },\n    {\n        match: \"[(has|had) (#Adverb|not)+?] #PastTense\",\n        group: 0,\n        tag: \"Auxiliary\",\n        reason: \"had-walked\"\n    },\n    {\n        match: \"#Adverb+? [(#Modal|did)+ (#Adverb|not)+?] #Verb\",\n        group: 0,\n        tag: \"Auxiliary\",\n        reason: \"modal-verb\"\n    },\n    {\n        match: \"[#Modal (#Adverb|not)+? have (#Adverb|not)+? had (#Adverb|not)+?] #Verb\",\n        group: 0,\n        tag: \"Auxiliary\",\n        reason: \"would-have\"\n    },\n    {\n        match: \"[(has|had) (#Adverb|not)+?] #PastTense\",\n        group: 0,\n        tag: \"Auxiliary\",\n        reason: \"had-walked\"\n    },\n    {\n        match: \"[(do|does|will|have|had)] (not|#Adverb)+? #Verb\",\n        group: 0,\n        tag: \"Auxiliary\",\n        reason: \"have-had\"\n    },\n    {\n        match: \"[about to] #Adverb? #Verb\",\n        group: 0,\n        tag: [\n            \"Auxiliary\",\n            \"Verb\"\n        ],\n        reason: \"about-to\"\n    },\n    {\n        match: \"#Modal (#Adverb|not)+? be (#Adverb|not)+? #Verb\",\n        group: 0,\n        tag: \"Auxiliary\",\n        reason: \"would-be\"\n    },\n    {\n        match: \"(were|was) being [#PresentTense]\",\n        group: 0,\n        tag: \"PastTense\",\n        reason: \"was-being\"\n    },\n    {\n        match: \"[#Modal (#Adverb|not)+? have (#Adverb|not)+? had (#Adverb|not)+?] #Verb\",\n        group: 0,\n        tag: \"Auxiliary\",\n        reason: \"would-have\"\n    },\n    {\n        match: \"(#Modal|had|has) (#Adverb|not)+? been (#Adverb|not)+? #Verb\",\n        group: 0,\n        tag: \"Auxiliary\",\n        reason: \"had-been\"\n    },\n    {\n        match: \"[(be|being|been)] #Participle\",\n        group: 0,\n        tag: \"Auxiliary\",\n        reason: \"being-foo\"\n    },\n    {\n        match: \"(#Verb && @hasHyphen) up\",\n        tag: \"PhrasalVerb\",\n        reason: \"foo-up\"\n    },\n    {\n        match: \"(#Verb && @hasHyphen) off\",\n        tag: \"PhrasalVerb\",\n        reason: \"foo-off\"\n    },\n    {\n        match: \"(#Verb && @hasHyphen) over\",\n        tag: \"PhrasalVerb\",\n        reason: \"foo-over\"\n    },\n    {\n        match: \"(#Verb && @hasHyphen) out\",\n        tag: \"PhrasalVerb\",\n        reason: \"foo-out\"\n    },\n    {\n        match: \"#PhrasalVerb [#PhrasalVerb]\",\n        group: 0,\n        tag: \"Particle\",\n        reason: \"phrasal-particle\"\n    },\n    {\n        match: \"(lived|went|crept|go) [on] for\",\n        group: 0,\n        tag: \"PhrasalVerb\",\n        reason: \"went-on\"\n    },\n    {\n        match: \"#Verb (him|her|it|us|himself|herself|itself|everything|something) [(up|down)]\",\n        group: 0,\n        tag: \"Adverb\",\n        reason: \"phrasal-pronoun-advb\"\n    },\n    {\n        match: \"[will #Adverb? not? #Adverb? be] #Gerund\",\n        group: 0,\n        tag: \"Copula\",\n        reason: \"will-be-copula\"\n    },\n    {\n        match: \"will #Adverb? not? #Adverb? [be] #Adjective\",\n        group: 0,\n        tag: \"Copula\",\n        reason: \"be-copula\"\n    },\n    {\n        match: \"[march] (up|down|back|to|toward)\",\n        group: 0,\n        tag: \"Infinitive\",\n        reason: \"march-to\"\n    },\n    {\n        match: \"#Modal [march]\",\n        group: 0,\n        tag: \"Infinitive\",\n        reason: \"must-march\"\n    },\n    {\n        match: \"(let|make|made) (him|her|it|#Person|#Place|#Organization)+ [#Singular] (a|an|the|it)\",\n        group: 0,\n        tag: \"Infinitive\",\n        reason: \"let-him-glue\"\n    },\n    {\n        match: \"will [#Adjective]\",\n        group: 0,\n        tag: \"Verb\",\n        reason: \"will-adj\"\n    },\n    {\n        match: \"#Pronoun [#Adjective] #Determiner #Adjective? #Noun\",\n        group: 0,\n        tag: \"Verb\",\n        reason: \"he-adj-the\"\n    },\n    {\n        match: \"#Copula [#Adjective] to #Verb\",\n        group: 0,\n        tag: \"Verb\",\n        reason: \"adj-to\"\n    },\n    {\n        match: \"[open] #Determiner\",\n        group: 0,\n        tag: \"Infinitive\",\n        reason: \"open-the\"\n    },\n    {\n        match: \"[#PresentTense] (are|were|was) #Adjective\",\n        group: 0,\n        tag: \"Plural\",\n        reason: \"compromises-are-possible\"\n    },\n    {\n        match: `#Modal [${ki}]`,\n        group: 0,\n        tag: \"Verb\",\n        reason: \"would-mark\"\n    },\n    {\n        match: `#Adverb [${ki}]`,\n        group: 0,\n        tag: \"Verb\",\n        reason: \"really-mark\"\n    },\n    {\n        match: \"(to|#Modal) [mark]\",\n        group: 0,\n        tag: \"PresentTense\",\n        reason: \"to-mark\"\n    },\n    {\n        match: \"^[#Infinitive] (is|was)\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"checkmate-is\"\n    },\n    {\n        match: ki + \" #Person\",\n        tag: \"Person\",\n        reason: \"rob-smith\"\n    },\n    {\n        match: ki + \" #Acronym #ProperNoun\",\n        tag: \"Person\",\n        reason: \"rob-a-smith\"\n    },\n    {\n        match: \"[shit] (#Determiner|#Possessive|them)\",\n        group: 0,\n        tag: \"Verb\",\n        reason: \"swear1-verb\"\n    },\n    {\n        match: \"[damn] (#Determiner|#Possessive|them)\",\n        group: 0,\n        tag: \"Verb\",\n        reason: \"swear2-verb\"\n    },\n    {\n        match: \"[fuck] (#Determiner|#Possessive|them)\",\n        group: 0,\n        tag: \"Verb\",\n        reason: \"swear3-verb\"\n    },\n    {\n        match: \"(become|fall|grow) #Adverb? [#PastTense]\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"overly-weakened\"\n    },\n    {\n        match: \"(a|an) #Adverb [#Participle] #Noun\",\n        group: 0,\n        tag: \"Adjective\",\n        reason: \"completely-beaten\"\n    },\n    {\n        match: \"whose [#PresentTense] #Copula\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"whos-name-was\"\n    },\n    {\n        match: \"#PhrasalVerb #PhrasalVerb #Preposition [#PresentTense]\",\n        group: 0,\n        tag: \"Noun\",\n        reason: \"given-up-on-x\"\n    }\n];\nvar Di = [\n    {\n        match: \"(west|north|south|east|western|northern|southern|eastern)+ #Place\",\n        tag: \"Region\",\n        reason: \"west-norfolk\"\n    },\n    {\n        match: \"#City [(al|ak|az|ar|ca|ct|dc|fl|ga|id|il|nv|nh|nj|ny|oh|pa|sc|tn|tx|ut|vt|pr)]\",\n        group: 0,\n        tag: \"Region\",\n        reason: \"us-state\"\n    },\n    {\n        match: \"portland [or]\",\n        group: 0,\n        tag: \"Region\",\n        reason: \"portland-or\"\n    },\n    {\n        match: \"#ProperNoun+ (district|region|province|county|prefecture|municipality|territory|burough|reservation)\",\n        tag: \"Region\",\n        reason: \"foo-district\"\n    },\n    {\n        match: \"(district|region|province|municipality|territory|burough|state) of #ProperNoun\",\n        tag: \"Region\",\n        reason: \"district-of-Foo\"\n    },\n    {\n        match: \"in [#ProperNoun] #Place\",\n        group: 0,\n        tag: \"Place\",\n        reason: \"propernoun-place\"\n    },\n    {\n        match: \"#Value #Noun (st|street|rd|road|crescent|cr|way|tr|terrace|avenue|ave)\",\n        tag: \"Address\",\n        reason: \"address-st\"\n    }\n];\nconst $i = gi, Pi = `(${$i.personNoun.join(\"|\")})`, Ei = `(${$i.personMonth.join(\"|\")})`;\nvar Hi = [\n    {\n        match: \"[(1st|2nd|first|second)] #Honorific\",\n        group: 0,\n        tag: \"Honorific\",\n        reason: \"ordinal-honorific\"\n    },\n    {\n        match: \"[(private|general|major|corporal|lord|lady|secretary|premier)] #Honorific? #Person\",\n        group: 0,\n        tag: \"Honorific\",\n        reason: \"ambg-honorifics\"\n    },\n    {\n        match: \"#Copula [(#Noun|#PresentTense)] #LastName\",\n        group: 0,\n        tag: \"FirstName\",\n        reason: \"copula-noun-lastname\"\n    },\n    {\n        match: \"(lady|queen|sister) #ProperNoun\",\n        tag: \"FemaleName\",\n        reason: \"lady-titlecase\",\n        safe: !0\n    },\n    {\n        match: \"(king|pope|father) #ProperNoun\",\n        tag: \"MaleName\",\n        reason: \"pope-titlecase\",\n        safe: !0\n    },\n    {\n        match: \"[(will|may|april|june|said|rob|wade|ray|rusty|drew|miles|jack|chuck|randy|jan|pat|cliff|bill)] #LastName\",\n        group: 0,\n        tag: \"FirstName\",\n        reason: \"maybe-lastname\"\n    },\n    {\n        match: \"#FirstName [#Determiner #Noun] #LastName\",\n        group: 0,\n        tag: \"NickName\",\n        reason: \"first-noun-last\"\n    },\n    {\n        match: \"#Possessive [#FirstName]\",\n        group: 0,\n        tag: \"Person\",\n        reason: \"possessive-name\"\n    },\n    {\n        match: \"#ProperNoun (b|c|d|e|f|g|h|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z) #ProperNoun\",\n        tag: \"Person\",\n        reason: \"titlecase-acronym-titlecase\",\n        safe: !0\n    },\n    {\n        match: \"#Acronym #LastName\",\n        tag: \"Person\",\n        reason: \"acronym-latname\",\n        safe: !0\n    },\n    {\n        match: \"#Person (jr|sr|md)\",\n        tag: \"Person\",\n        reason: \"person-honorific\"\n    },\n    {\n        match: \"#Person #Person the? #RomanNumeral\",\n        tag: \"Person\",\n        reason: \"roman-numeral\"\n    },\n    {\n        match: \"#FirstName [/^[^aiurck]$/]\",\n        group: 0,\n        tag: [\n            \"Acronym\",\n            \"Person\"\n        ],\n        reason: \"john-e\"\n    },\n    {\n        match: \"#Honorific #Person\",\n        tag: \"Person\",\n        reason: \"honorific-person\"\n    },\n    {\n        match: \"#Honorific #Acronym\",\n        tag: \"Person\",\n        reason: \"Honorific-TitleCase\"\n    },\n    {\n        match: \"#Noun van der? #Noun\",\n        tag: \"Person\",\n        reason: \"van der noun\",\n        safe: !0\n    },\n    {\n        match: \"(king|queen|prince|saint|lady) of #Noun\",\n        tag: \"Person\",\n        reason: \"king-of-noun\",\n        safe: !0\n    },\n    {\n        match: \"(prince|lady) #Place\",\n        tag: \"Person\",\n        reason: \"lady-place\"\n    },\n    {\n        match: \"(king|queen|prince|saint) #ProperNoun\",\n        tag: \"Person\",\n        reason: \"saint-foo\"\n    },\n    {\n        match: \"[#ProperNoun] #Person\",\n        group: 0,\n        tag: \"Person\",\n        reason: \"proper-person\",\n        safe: !0\n    },\n    {\n        match: \"al (#Person|#ProperNoun)\",\n        tag: \"Person\",\n        reason: \"al-borlen\",\n        safe: !0\n    },\n    {\n        match: \"#FirstName de #Noun\",\n        tag: \"Person\",\n        reason: \"bill-de-noun\"\n    },\n    {\n        match: \"#FirstName (bin|al) #Noun\",\n        tag: \"Person\",\n        reason: \"bill-al-noun\"\n    },\n    {\n        match: \"#FirstName #Acronym #ProperNoun\",\n        tag: \"Person\",\n        reason: \"bill-acronym-title\"\n    },\n    {\n        match: \"#FirstName #FirstName #ProperNoun\",\n        tag: \"Person\",\n        reason: \"bill-firstname-title\"\n    },\n    {\n        match: \"#Honorific #FirstName? #ProperNoun\",\n        tag: \"Person\",\n        reason: \"dr-john-Title\"\n    },\n    {\n        match: \"#FirstName the #Adjective\",\n        tag: \"Person\",\n        reason: \"name-the-great\"\n    },\n    {\n        match: \"#FirstName (green|white|brown|hall|young|king|hill|cook|gray|price)\",\n        tag: \"Person\",\n        reason: \"bill-green\"\n    },\n    {\n        match: Pi + \" #Person\",\n        tag: \"Person\",\n        reason: \"ray-smith\",\n        safe: !0\n    },\n    {\n        match: Pi + \" #Acronym? #ProperNoun\",\n        tag: \"Person\",\n        reason: \"ray-a-smith\",\n        safe: !0\n    },\n    {\n        match: `#Infinitive #Determiner? #Adjective? #Noun? (to|for) [${Ei}]`,\n        group: 0,\n        tag: \"Person\",\n        reason: \"ambig-person\"\n    },\n    {\n        match: `#Infinitive [${Ei}]`,\n        group: 0,\n        tag: \"Person\",\n        reason: \"infinitive-person\"\n    },\n    {\n        match: `[${Ei}] #Modal`,\n        group: 0,\n        tag: \"Person\",\n        reason: \"ambig-modal\"\n    },\n    {\n        match: \"[may] be\",\n        group: 0,\n        tag: \"Verb\",\n        reason: \"may-be\"\n    },\n    {\n        match: `#Modal [${Ei}]`,\n        group: 0,\n        tag: \"Person\",\n        reason: \"modal-ambig\"\n    },\n    {\n        match: `#Copula [${Ei}]`,\n        group: 0,\n        tag: \"Person\",\n        reason: \"is-may\"\n    },\n    {\n        match: `[${Ei}] #Copula`,\n        group: 0,\n        tag: \"Person\",\n        reason: \"may-is\"\n    },\n    {\n        match: `that [${Ei}]`,\n        group: 0,\n        tag: \"Person\",\n        reason: \"that-month\"\n    },\n    {\n        match: `with [${Ei}]`,\n        group: 0,\n        tag: \"Person\",\n        reason: \"with-month\"\n    },\n    {\n        match: `for [${Ei}]`,\n        group: 0,\n        tag: \"Person\",\n        reason: \"for-month\"\n    },\n    {\n        match: `this [${Ei}]`,\n        group: 0,\n        tag: \"Month\",\n        reason: \"this-may\"\n    },\n    {\n        match: `next [${Ei}]`,\n        group: 0,\n        tag: \"Month\",\n        reason: \"next-may\"\n    },\n    {\n        match: `last [${Ei}]`,\n        group: 0,\n        tag: \"Month\",\n        reason: \"last-may\"\n    },\n    {\n        match: `#Date [${Ei}]`,\n        group: 0,\n        tag: \"Month\",\n        reason: \"date-may\"\n    },\n    {\n        match: `[${Ei}] the? #Value`,\n        group: 0,\n        tag: \"Month\",\n        reason: \"may-5th\"\n    },\n    {\n        match: `#Value of [${Ei}]`,\n        group: 0,\n        tag: \"Month\",\n        reason: \"5th-of-may\"\n    },\n    {\n        match: \"#ProperNoun (van|al|bin) #ProperNoun\",\n        tag: \"Person\",\n        reason: \"title-van-title\",\n        safe: !0\n    },\n    {\n        match: \"#ProperNoun (de|du) la? #ProperNoun\",\n        tag: \"Person\",\n        reason: \"title-de-title\",\n        safe: !0\n    },\n    {\n        match: \"#Singular #Acronym #LastName\",\n        tag: \"#Person\",\n        reason: \"title-acro-noun\",\n        safe: !0\n    },\n    {\n        match: \"#FirstName (#Noun && #ProperNoun) #ProperNoun?\",\n        tag: \"Person\",\n        reason: \"firstname-titlecase\"\n    },\n    {\n        match: \"#FirstName #Acronym #Noun\",\n        tag: \"Person\",\n        reason: \"n-acro-noun\",\n        safe: !0\n    },\n    {\n        match: \"#FirstName [(de|di|du|van|von) #Person]\",\n        group: 0,\n        tag: \"LastName\",\n        reason: \"de-firstname\"\n    },\n    {\n        match: `[${`(${$i.personPlace.join(\"|\")})`}] (#ProperNoun && !#Place)`,\n        group: 0,\n        tag: \"FirstName\",\n        reason: \"place-firstname\"\n    }\n];\nconst ji = _e, Ni = hi;\nlet xi = [];\nxi = xi.concat(di), xi = xi.concat(mi), xi = xi.concat(bi), xi = xi.concat(yi), xi = xi.concat(vi), xi = xi.concat(wi), xi = xi.concat(Ai), xi = xi.concat(Di), xi = xi.concat([\n    {\n        match: \"#Noun (&|n) #Noun\",\n        tag: \"Organization\",\n        reason: \"Noun-&-Noun\"\n    },\n    {\n        match: \"#Organization of the? #ProperNoun\",\n        tag: \"Organization\",\n        reason: \"org-of-place\",\n        safe: !0\n    },\n    {\n        match: \"#Organization #Country\",\n        tag: \"Organization\",\n        reason: \"org-country\"\n    },\n    {\n        match: \"#ProperNoun #Organization\",\n        tag: \"Organization\",\n        reason: \"titlecase-org\"\n    },\n    {\n        match: \"#ProperNoun (ltd|co|inc|dept|assn|bros)\",\n        tag: \"Organization\",\n        reason: \"org-abbrv\"\n    },\n    {\n        match: \"the [#Acronym]\",\n        group: 0,\n        tag: \"Organization\",\n        reason: \"the-acronym\",\n        safe: !0\n    },\n    {\n        match: \"(world|global|international|national|#Demonym) #Organization\",\n        tag: \"Organization\",\n        reason: \"global-org\"\n    },\n    {\n        match: \"#Noun+ (public|private) school\",\n        tag: \"School\",\n        reason: \"noun-public-school\"\n    }\n]), xi = xi.concat(Hi);\nlet Fi = [];\nxi.forEach((e)=>{\n    e.reg = ji(e.match);\n    let t = function(e) {\n        let t = [];\n        if (1 === e.reg.filter((e)=>void 0 !== e.fastOr).length) {\n            let r = e.reg.findIndex((e)=>void 0 !== e.fastOr);\n            Object.keys(e.reg[r].fastOr).forEach((a)=>{\n                let n = Object.assign({}, e);\n                n.reg = n.reg.slice(0), n.reg[r] = Object.assign({}, n.reg[r]), n.reg[r].word = a, delete n.reg[r].operator, delete n.reg[r].fastOr, t.push(n);\n            });\n        }\n        return t;\n    }(e);\n    t.length > 0 ? Fi = Fi.concat(t) : Fi.push(e);\n}), Fi.forEach((e)=>(e.required = function(e) {\n        let t = [], r = [];\n        return e.forEach((e)=>{\n            !0 !== e.optional && !0 !== e.negative && (void 0 !== e.tag && t.push(e.tag), void 0 !== e.word && r.push(e.word));\n        }), {\n            tags: Ni(t),\n            words: Ni(r)\n        };\n    }(e.reg), e));\nconst Ci = Fi, Bi = hi;\nconst Gi = ci, zi = function(e) {\n    Ci.forEach((t)=>{\n        let r = [];\n        t.required.words.forEach((t)=>{\n            r.push(e._cache.words[t] || []);\n        }), t.required.tags.forEach((t)=>{\n            r.push(e._cache.tags[t] || []);\n        });\n        let a = function(e) {\n            if (0 === e.length) return [];\n            let t = {};\n            e.forEach((e)=>{\n                e = Bi(e);\n                for(let r = 0; r < e.length; r++)t[e[r]] = t[e[r]] || 0, t[e[r]] += 1;\n            });\n            let r = Object.keys(t);\n            return r = r.filter((r)=>t[r] === e.length), r = r.map((e)=>Number(e)), r;\n        }(r);\n        if (0 === a.length) return;\n        let n = a.map((t)=>e.list[t]), i = e.buildFrom(n).match(t.reg, t.group);\n        i.found && (!0 === t.safe ? i.tagSafe(t.tag, t.reason) : i.tag(t.tag, t.reason));\n    });\n};\nconst Ii = dn, Oi = Gn, Ti = li, Vi = function(e) {\n    return zi(e), Gi(e), e;\n};\nvar Mi = function(e) {\n    let t = e.termList();\n    return e = Ii(e, t), e = Oi(e, t), (e = Ti(e)).cache(), (e = Vi(e)).uncache(), e.world.taggers.forEach((t)=>{\n        t(e);\n    }), e;\n};\nvar Ji = function(e) {\n    class t extends e {\n        stripPeriods() {\n            return this.termList().forEach((e)=>{\n                !0 === e.tags.Abbreviation && e.next && (e.post = e.post.replace(/^\\./, \"\"));\n                let t = e.text.replace(/\\./, \"\");\n                e.set(t);\n            }), this;\n        }\n        addPeriods() {\n            return this.termList().forEach((e)=>{\n                e.post = e.post.replace(/^\\./, \"\"), e.post = \".\" + e.post;\n            }), this;\n        }\n    }\n    return t.prototype.unwrap = t.prototype.stripPeriods, e.prototype.abbreviations = function(e) {\n        let r = this.match(\"#Abbreviation\");\n        return \"number\" == typeof e && (r = r.get(e)), new t(r.list, this, this.world);\n    }, e;\n};\nconst Li = /\\./;\nvar Si = function(e) {\n    class t extends e {\n        stripPeriods() {\n            return this.termList().forEach((e)=>{\n                let t = e.text.replace(/\\./g, \"\");\n                e.set(t);\n            }), this;\n        }\n        addPeriods() {\n            return this.termList().forEach((e)=>{\n                let t = e.text.replace(/\\./g, \"\");\n                t = t.split(\"\").join(\".\"), !1 === Li.test(e.post) && (t += \".\"), e.set(t);\n            }), this;\n        }\n    }\n    return t.prototype.unwrap = t.prototype.stripPeriods, t.prototype.strip = t.prototype.stripPeriods, e.prototype.acronyms = function(e) {\n        let r = this.match(\"#Acronym\");\n        return \"number\" == typeof e && (r = r.get(e)), new t(r.list, this, this.world);\n    }, e;\n};\nvar _i = function(e) {\n    return e.prototype.clauses = function(t) {\n        let r = this.if(\"@hasComma\").notIf(\"@hasComma @hasComma\").notIf(\"@hasComma . .? (and|or) .\").notIf(\"(#City && @hasComma) #Country\").notIf(\"(#WeekDay && @hasComma) #Date\").notIf(\"(#Date && @hasComma) #Year\").notIf(\"@hasComma (too|also)$\").match(\"@hasComma\"), a = this.splitAfter(r), n = a.quotations();\n        a = a.splitOn(n);\n        let i = a.parentheses();\n        a = a.splitOn(i);\n        let o = a.if(\"#Copula #Adjective #Conjunction (#Pronoun|#Determiner) #Verb\").match(\"#Conjunction\");\n        a = a.splitBefore(o);\n        let s = a.if(\"if .{2,9} then .\").match(\"then\");\n        a = a.splitBefore(s), a = a.splitBefore(\"as well as .\"), a = a.splitBefore(\"such as .\"), a = a.splitBefore(\"in addition to .\"), a = a.splitAfter(\"@hasSemicolon\"), a = a.splitAfter(\"@hasDash\");\n        let l = a.filter((e)=>e.wordCount() > 5 && e.match(\"#Verb+\").length >= 2);\n        if (l.found) {\n            let e = l.splitAfter(\"#Noun .* #Verb .* #Noun+\");\n            a = a.splitOn(e.eq(0));\n        }\n        return \"number\" == typeof t && (a = a.get(t)), new e(a.list, this, this.world);\n    }, e;\n};\nvar Ki = function(e) {\n    class t extends e {\n        constructor(e, t, r){\n            super(e, t, r), this.contracted = null;\n        }\n        expand() {\n            return this.list.forEach((e)=>{\n                let t = e.terms(), r = t[0].isTitleCase();\n                t.forEach((e, r)=>{\n                    e.set(e.implicit || e.text), e.implicit = void 0, r < t.length - 1 && \"\" === e.post && (e.post += \" \");\n                }), r && t[0].toTitleCase();\n            }), this;\n        }\n    }\n    return e.prototype.contractions = function(e) {\n        let r = this.match(\"@hasContraction+\");\n        return \"number\" == typeof e && (r = r.get(e)), new t(r.list, this, this.world);\n    }, e.prototype.expanded = e.prototype.isExpanded, e.prototype.contracted = e.prototype.isContracted, e;\n};\nvar qi = function(e) {\n    const t = function(e) {\n        let t = e.splitAfter(\"@hasComma\").splitOn(\"(and|or) not?\").not(\"(and|or) not?\"), r = e.match(\"[.] (and|or)\", 0);\n        return {\n            things: t,\n            conjunction: e.match(\"(and|or) not?\"),\n            beforeLast: r,\n            hasOxford: r.has(\"@hasComma\")\n        };\n    };\n    class r extends e {\n        conjunctions() {\n            return this.match(\"(and|or)\");\n        }\n        parts() {\n            return this.splitAfter(\"@hasComma\").splitOn(\"(and|or) not?\");\n        }\n        items() {\n            return t(this).things;\n        }\n        add(e) {\n            return this.forEach((r)=>{\n                let a = t(r).beforeLast;\n                a.append(e), a.termList(0).addPunctuation(\",\");\n            }), this;\n        }\n        remove(e) {\n            return this.items().if(e).remove();\n        }\n        hasOxfordComma() {\n            return this.filter((e)=>t(e).hasOxford);\n        }\n        addOxfordComma() {\n            let e = this.items(), t = e.eq(e.length - 2);\n            return t.found && !1 === t.has(\"@hasComma\") && t.post(\", \"), this;\n        }\n        removeOxfordComma() {\n            let e = this.items(), t = e.eq(e.length - 2);\n            return t.found && !0 === t.has(\"@hasComma\") && t.post(\" \"), this;\n        }\n    }\n    return r.prototype.things = r.prototype.items, e.prototype.lists = function(e) {\n        let t = this.if(\"@hasComma+ .? (and|or) not? .\"), a = t.match(\"(#Noun|#Adjective|#Determiner|#Article)+ #Conjunction not? (#Article|#Determiner)? #Adjective? #Noun+\").if(\"#Noun\"), n = t.match(\"(#Adjective|#Adverb)+ #Conjunction not? #Adverb? #Adjective+\"), i = t.match(\"(#Verb|#Adverb)+ #Conjunction not? #Adverb? #Verb+\"), o = a.concat(n);\n        return o = o.concat(i), o = o.if(\"@hasComma\"), \"number\" == typeof e && (o = t.get(e)), new r(o.list, this, this.world);\n    }, e;\n};\nconst Wi = {\n    hour: \"an\",\n    heir: \"an\",\n    heirloom: \"an\",\n    honest: \"an\",\n    honour: \"an\",\n    honor: \"an\",\n    uber: \"an\"\n}, Ri = {\n    a: !0,\n    e: !0,\n    f: !0,\n    h: !0,\n    i: !0,\n    l: !0,\n    m: !0,\n    n: !0,\n    o: !0,\n    r: !0,\n    s: !0,\n    x: !0\n}, Ui = [\n    /^onc?e/i,\n    /^u[bcfhjkqrstn][aeiou]/i,\n    /^eul/i\n];\nconst Qi = {\n    isSingular: [\n        /(ax|test)is$/i,\n        /(octop|vir|radi|nucle|fung|cact|stimul)us$/i,\n        /(octop|vir)i$/i,\n        /(rl)f$/i,\n        /(alias|status)$/i,\n        /(bu)s$/i,\n        /(al|ad|at|er|et|ed|ad)o$/i,\n        /(ti)um$/i,\n        /(ti)a$/i,\n        /sis$/i,\n        /(?:(^f)fe|(lr)f)$/i,\n        /hive$/i,\n        /(^aeiouy|qu)y$/i,\n        /(x|ch|ss|sh|z)$/i,\n        /(matr|vert|ind|cort)(ix|ex)$/i,\n        /(m|l)ouse$/i,\n        /(m|l)ice$/i,\n        /(antenn|formul|nebul|vertebr|vit)a$/i,\n        /.sis$/i,\n        /^(?!talis|.*hu)(.*)man$/i\n    ],\n    isPlural: [\n        /(antenn|formul|nebul|vertebr|vit)ae$/i,\n        /(octop|vir|radi|nucle|fung|cact|stimul)i$/i,\n        /men$/i,\n        /.tia$/i,\n        /(m|l)ice$/i\n    ]\n}, Zi = /s$/;\nconst Xi = {\n    he: \"his\",\n    she: \"hers\",\n    they: \"theirs\",\n    we: \"ours\",\n    i: \"mine\",\n    you: \"yours\",\n    her: \"hers\",\n    their: \"theirs\",\n    our: \"ours\",\n    my: \"mine\",\n    your: \"yours\"\n};\nconst Yi = function(e) {\n    return !0 === e.has(\"#Plural\") || !0 !== e.has(\"(#Pronoun|#Place|#Value|#Person|#Uncountable|#Month|#WeekDay|#Holiday|#Possessive)\");\n}, eo = function(e) {\n    if (e.has(\"#Person\") || e.has(\"#Place\")) return \"\";\n    if (e.has(\"#Plural\")) return \"the\";\n    let t = e.text(\"normal\").trim();\n    if (Wi.hasOwnProperty(t)) return Wi[t];\n    let r = t.substr(0, 1);\n    if (e.has(\"^@isAcronym\") && Ri.hasOwnProperty(r)) return \"an\";\n    for(let e = 0; e < Ui.length; e++)if (Ui[e].test(t)) return \"a\";\n    return /^[aeiou]/i.test(t) ? \"an\" : \"a\";\n}, to = function(e) {\n    return !Qi.isSingular.find((t)=>t.test(e)) && (!0 === Zi.test(e) || !!Qi.isPlural.find((t)=>t.test(e)) || null);\n}, ro = function(e) {\n    let t = e.text(\"text\").trim();\n    return Xi.hasOwnProperty(t) ? (e.replaceWith(Xi[t], !0), void e.tag(\"Possessive\", \"toPossessive\")) : /s$/.test(t) ? (t += \"'\", e.replaceWith(t, !0), void e.tag(\"Possessive\", \"toPossessive\")) : (t += \"'s\", e.replaceWith(t, !0), void e.tag(\"Possessive\", \"toPossessive\"));\n}, ao = function(e) {\n    let t = {\n        main: e\n    };\n    if (e.has(\"#Noun (of|by|for) .\")) {\n        let r = e.splitAfter(\"[#Noun+]\", 0);\n        t.main = r.eq(0), t.post = r.eq(1);\n    }\n    return t;\n};\nconst no = {\n    json: function(e) {\n        let t = null;\n        \"number\" == typeof e && (t = e, e = null), e = e || {\n            text: !0,\n            normal: !0,\n            trim: !0,\n            terms: !0\n        };\n        let r = [];\n        return this.forEach((t)=>{\n            let a = t.json(e)[0];\n            a.article = eo(t), r.push(a);\n        }), null !== t ? r[t] : r;\n    },\n    adjectives: function() {\n        let e = this.lookAhead(\"^(that|who|which)? (was|is|will)? be? #Adverb? #Adjective+\");\n        return e = e.concat(this.lookBehind(\"#Adjective+ #Adverb?$\")), e = e.match(\"#Adjective\"), e.sort(\"index\");\n    },\n    isPlural: function() {\n        return this.if(\"#Plural\");\n    },\n    hasPlural: function() {\n        return this.filter((e)=>Yi(e));\n    },\n    toPlural: function(e) {\n        let t = this.world.transforms.toPlural;\n        return this.forEach((r)=>{\n            if (r.has(\"#Plural\") || !1 === Yi(r)) return;\n            let a = ao(r).main, n = a.text(\"reduced\");\n            if ((a.has(\"#Singular\") || !0 !== to(n)) && (n = t(n, this.world), a.replace(n).tag(\"#Plural\"), e)) {\n                let e = a.lookBefore(\"(an|a) #Adjective?$\").not(\"#Adjective\");\n                !0 === e.found && e.remove();\n            }\n        }), this;\n    },\n    toSingular: function(e) {\n        let t = this.world.transforms.toSingular;\n        return this.forEach((r)=>{\n            if (r.has(\"^#Singular+$\") || !1 === Yi(r)) return;\n            let a = ao(r).main, n = a.text(\"reduced\");\n            if ((a.has(\"#Plural\") || !0 === to(n)) && (n = t(n, this.world), a.replace(n).tag(\"#Singular\"), e)) {\n                let e = r, t = r.lookBefore(\"#Adjective\");\n                t.found && (e = t);\n                let a = eo(e);\n                e.insertBefore(a);\n            }\n        }), this;\n    },\n    toPossessive: function() {\n        return this.forEach((e)=>{\n            ro(e);\n        }), this;\n    }\n};\nvar io = function(e) {\n    class t extends e {\n    }\n    return Object.assign(t.prototype, no), e.prototype.nouns = function(e, r = {}) {\n        let a = this.match(\"(#City && @hasComma) (#Region|#Country)\"), n = this.not(a).splitAfter(\"@hasComma\");\n        n = n.concat(a);\n        let i = n.quotations();\n        return i.found && (n = n.splitOn(i.eq(0))), n = n.match(\"#Noun+ (of|by)? the? #Noun+?\"), !0 !== r.keep_anaphora && (n = n.not(\"#Pronoun\"), n = n.not(\"(there|these)\"), n = n.not(\"(#Month|#WeekDay)\"), n = n.not(\"(my|our|your|their|her|his)\")), n = n.not(\"(of|for|by|the)$\"), \"number\" == typeof e && (n = n.get(e)), new t(n.list, this, this.world);\n    }, e;\n};\nconst oo = /\\(/, so = /\\)/;\nvar lo = function(e) {\n    class t extends e {\n        unwrap() {\n            return this.list.forEach((e)=>{\n                let t = e.terms(0);\n                t.pre = t.pre.replace(oo, \"\");\n                let r = e.lastTerm();\n                r.post = r.post.replace(so, \"\");\n            }), this;\n        }\n    }\n    return e.prototype.parentheses = function(e) {\n        let r = [];\n        return this.list.forEach((e)=>{\n            let t = e.terms();\n            for(let a = 0; a < t.length; a += 1){\n                const n = t[a];\n                if (oo.test(n.pre)) {\n                    for(let i = a; i < t.length; i += 1)if (so.test(t[i].post)) {\n                        let t = i - a + 1;\n                        r.push(e.buildFrom(n.id, t)), a = i;\n                        break;\n                    }\n                }\n            }\n        }), \"number\" == typeof e ? (r = r[e] ? [\n            r[e]\n        ] : [], new t(r, this, this.world)) : new t(r, this, this.world);\n    }, e;\n};\nvar uo = function(e) {\n    class t extends e {\n        constructor(e, t, r){\n            super(e, t, r), this.contracted = null;\n        }\n        strip() {\n            return this.list.forEach((e)=>{\n                e.terms().forEach((e)=>{\n                    let t = e.text.replace(/'s$/, \"\");\n                    e.set(t || e.text);\n                });\n            }), this;\n        }\n    }\n    return e.prototype.possessives = function(e) {\n        let r = this.match(\"#Noun+? #Possessive\");\n        return \"number\" == typeof e && (r = r.get(e)), new t(r.list, this, this.world);\n    }, e;\n};\nconst co = {\n    '\"': '\"',\n    \"＂\": \"＂\",\n    \"'\": \"'\",\n    \"“\": \"”\",\n    \"‘\": \"’\",\n    \"‟\": \"”\",\n    \"‛\": \"’\",\n    \"„\": \"”\",\n    \"⹂\": \"”\",\n    \"‚\": \"’\",\n    \"\\xab\": \"\\xbb\",\n    \"‹\": \"›\",\n    \"‵\": \"′\",\n    \"‶\": \"″\",\n    \"‷\": \"‴\",\n    \"〝\": \"〞\",\n    \"`\": \"\\xb4\",\n    \"〟\": \"〞\"\n}, ho = RegExp(\"(\" + Object.keys(co).join(\"|\") + \")\");\nvar go = function(e) {\n    class t extends e {\n        unwrap() {\n            return this;\n        }\n    }\n    return e.prototype.quotations = function(e) {\n        let r = [];\n        return this.list.forEach((e)=>{\n            let t = e.terms();\n            for(let a = 0; a < t.length; a += 1){\n                const n = t[a];\n                if (ho.test(n.pre)) {\n                    let i = (n.pre.match(ho) || [])[0], o = co[i];\n                    for(let i = a; i < t.length; i += 1)if (-1 !== t[i].post.indexOf(o)) {\n                        let t = i - a + 1;\n                        r.push(e.buildFrom(n.id, t)), a = i;\n                        break;\n                    }\n                }\n            }\n        }), \"number\" == typeof e ? (r = r[e] ? [\n            r[e]\n        ] : [], new t(r, this, this.world)) : new t(r, this, this.world);\n    }, e.prototype.quotes = e.prototype.quotations, e;\n};\nvar po = function(e, t) {\n    let r = e.verb, a = r.text(\"reduced\");\n    if (r.has(\"#Infinitive\")) return a;\n    let n = null;\n    return r.has(\"#PastTense\") ? n = \"PastTense\" : r.has(\"#Gerund\") ? n = \"Gerund\" : r.has(\"#PresentTense\") ? n = \"PresentTense\" : r.has(\"#Participle\") ? n = \"Participle\" : r.has(\"#Actor\") && (n = \"Actor\"), t.transforms.toInfinitive(a, t, n);\n};\nvar mo = function(e) {\n    let t = e.verb;\n    if (t.has(\"(are|were|does)\") || e.auxiliary.has(\"(are|were|does)\")) return !0;\n    let r = function(e) {\n        return e.lookBehind(\"#Noun+\").last();\n    }(t);\n    return !r.has(\"(he|she|many|both)\") && (!!r.has(\"(we|they|you|i)\") || !r.has(\"#Person\") && (!!r.has(\"#Plural\") || !r.has(\"#Singular\") && !t.has(\"(is|am|do|was)\") && !(e.auxiliary.has(\"(is|am|do|was)\") && !e.negative.found) && null));\n};\nconst fo = po, bo = mo;\nvar yo = function(e) {\n    let t = e.lookBehind(), r = t.nouns(null, {\n        keep_anaphora: !0\n    }).last();\n    return r.found || (r = t.match(\"(that|this|each)\").last(), r = r.tag(\"#Noun\").nouns()), r;\n};\nconst vo = yo;\nconst wo = mo;\nconst ko = po, Ao = (e)=>{\n    let t = !1, r = wo(e), a = e.negative.found;\n    e.verb.lookBehind(\"i (#Adverb|#Verb)?$\").found && (t = !0);\n    let n = {\n        PastTense: \"was\",\n        PresentTense: \"is\",\n        FutureTense: \"will be\",\n        Infinitive: \"is\",\n        Gerund: \"being\",\n        Actor: \"\",\n        PerfectTense: \"been\",\n        Pluperfect: \"been\"\n    };\n    return r && (n.PastTense = \"were\", n.PresentTense = \"are\", n.Infinitive = \"are\"), !0 === t && (n.PastTense = \"was\", n.PresentTense = \"am\", n.Infinitive = \"am\"), a && (n.PastTense += \" not\", n.PresentTense += \" not\", n.FutureTense = \"will not be\", n.Infinitive += \" not\", n.PerfectTense = \"not \" + n.PerfectTense, n.Pluperfect = \"not \" + n.Pluperfect, n.Gerund = \"not \" + n.Gerund), n;\n}, Do = function(e) {\n    let t = e.verb.text();\n    return {\n        PastTense: t + \" have\",\n        PresentTense: t,\n        FutureTense: t,\n        Infinitive: t\n    };\n}, $o = mo;\nvar Po = function(e, t) {\n    let r = e.verb;\n    if (r.has(\"#Copula\") || \"be\" === r.out(\"normal\") && e.auxiliary.has(\"will\")) return Ao(e);\n    if (e.auxiliary.has(\"are\") && r.has(\"#Gerund\")) {\n        let r = e.original.clone(), a = r.clone().replace(\"are\", \"were\"), n = r.clone().replace(\"are\", \"will be\"), i = ko(e, t);\n        return {\n            PastTense: a.text(),\n            PresentTense: r.text(),\n            FutureTense: n.text(),\n            Infinitive: i\n        };\n    }\n    if (r.has(\"#Modal\")) return Do(e);\n    let a = ko(e, t);\n    if (!a) return {};\n    let n = t.transforms.conjugate(a, t);\n    n.Infinitive = a;\n    let i = $o(e);\n    !0 === i && (n.PresentTense = n.Infinitive);\n    let o = e.verb.termList(0).hasHyphen();\n    if (e.particle.found) {\n        let t = e.particle.text(), r = !0 === o ? \"-\" : \" \";\n        Object.keys(n).forEach((e)=>n[e] += r + t);\n    }\n    const s = e.negative.found;\n    return n.FutureTense = n.FutureTense || \"will \" + n.Infinitive, s && (n.PastTense = \"did not \" + n.Infinitive, n.FutureTense = \"will not \" + n.Infinitive, i ? (n.PresentTense = \"do not \" + n.Infinitive, n.Infinitive = \"do not \" + n.Infinitive) : (n.PresentTense = \"does not \" + n.Infinitive, n.Infinitive = \"does not \" + n.Infinitive), n.Gerund = \"not \" + n.Gerund), n;\n};\nconst Eo = Po;\nvar Ho = {\n    useParticiple: function(e) {\n        return !!e.auxiliary.has(\"(could|should|would|may|can|must)\") || !!e.auxiliary.has(\"am .+? being\") || !!e.auxiliary.has(\"had .+? been\");\n    },\n    toParticiple: function(e, t) {\n        if (e.auxiliary.has(\"(have|had)\") && e.verb.has(\"#Participle\")) return;\n        let r = Eo(e, t), a = r.Participle || r.PastTense;\n        a && e.verb.replaceWith(a, !1), e.auxiliary.has(\"am .+? being\") && (e.auxiliary.remove(\"am\"), e.auxiliary.replace(\"being\", \"have been\")), e.auxiliary.has(\"have\") || e.auxiliary.append(\"have\"), e.verb.tag(\"Participle\", \"toParticiple\"), e.auxiliary.replace(\"can\", \"could\"), e.auxiliary.replace(\"be have\", \"have been\"), e.auxiliary.replace(\"not have\", \"have not\"), e.auxiliary.tag(\"Auxiliary\");\n    }\n};\nconst jo = function(e, t) {\n    let r = e.verb;\n    if (!e.negative.found) {\n        if (e.auxiliary.found) return e.auxiliary.eq(0).append(\"not\"), void (e.auxiliary.has(\"#Modal have not\") && e.auxiliary.replace(\"have not\", \"not have\"));\n        if (r.has(\"(#Copula|will|has|had|do)\")) r.append(\"not\");\n        else {\n            if (r.has(\"#PastTense\")) {\n                let a = fo(e, t);\n                return r.replaceWith(a, !0), void r.prepend(\"did not\");\n            }\n            if (r.has(\"#PresentTense\")) {\n                let a = fo(e, t);\n                return r.replaceWith(a, !0), void (bo(e) ? r.prepend(\"do not\") : r.prepend(\"does not\"));\n            }\n            if (r.has(\"#Gerund\")) {\n                let a = fo(e, t);\n                return r.replaceWith(a, !0), void r.prepend(\"not\");\n            }\n            bo(e) ? r.prepend(\"does not\") : r.prepend(\"do not\");\n        }\n    }\n}, No = function(e) {\n    let t = {\n        adverb: e.match(\"#Adverb+\"),\n        negative: e.match(\"#Negative\"),\n        auxiliary: e.match(\"#Auxiliary+\").not(\"(#Negative|#Adverb)\"),\n        particle: e.match(\"#Particle\"),\n        verb: e.match(\"#Verb+\").not(\"(#Adverb|#Negative|#Auxiliary|#Particle)\"),\n        original: e,\n        subject: vo(e)\n    };\n    if (t.verb.has(\"(#PresentTense|#PastTense|#Infinitive) #Gerund$\") && (t.verb = t.verb.not(\"#Gerund$\")), !t.verb.found) return Object.keys(t).forEach((e)=>{\n        t[e] = t[e].not(\".\");\n    }), t.verb = e, t;\n    if (t.adverb && t.adverb.found) {\n        let r = t.adverb.text(\"reduced\") + \"$\";\n        e.has(r) && (t.adverbAfter = !0);\n    }\n    return t;\n}, xo = mo, Fo = yo, Co = Po, { toParticiple: Bo, useParticiple: Go } = Ho, zo = function(e) {\n    return e.auxiliary.remove(\"(will|are|am|being)\"), e.auxiliary.remove(\"(did|does)\"), e.auxiliary.remove(\"(had|has|have)\"), e.particle.remove(), e.negative.remove(), e;\n};\nconst Io = {\n    json: function(e) {\n        let t = null;\n        \"number\" == typeof e && (t = e, e = null), e = e || {\n            text: !0,\n            normal: !0,\n            trim: !0,\n            terms: !0\n        };\n        let r = [];\n        return this.forEach((t)=>{\n            let a = t.json(e)[0], n = No(t);\n            a.parts = {}, Object.keys(n).forEach((e)=>{\n                n[e] && \"Doc\" === n[e].isA ? a.parts[e] = n[e].text(\"normal\") : a.parts[e] = n[e];\n            }), a.isNegative = t.has(\"#Negative\"), a.conjugations = Co(n, this.world), r.push(a);\n        }), null !== t ? r[t] : r;\n    },\n    adverbs: function() {\n        let e = [];\n        this.forEach((t)=>{\n            let r = No(t).adverb;\n            r.found && (e = e.concat(r.list));\n        });\n        let t = this.lookBehind(\"#Adverb+$\");\n        return t.found && (e = t.list.concat(e)), t = this.lookAhead(\"^#Adverb+\"), t.found && (e = e.concat(t.list)), this.buildFrom(e);\n    },\n    isPlural: function() {\n        let e = [];\n        return this.forEach((t)=>{\n            let r = No(t);\n            !0 === xo(r, this.world) && e.push(t.list[0]);\n        }), this.buildFrom(e);\n    },\n    isSingular: function() {\n        let e = [];\n        return this.forEach((t)=>{\n            let r = No(t);\n            !1 === xo(r, this.world) && e.push(t.list[0]);\n        }), this.buildFrom(e);\n    },\n    conjugate: function() {\n        let e = [];\n        return this.forEach((t)=>{\n            let r = No(t), a = Co(r, this.world);\n            e.push(a);\n        }), e;\n    },\n    toPastTense: function() {\n        return this.forEach((e)=>{\n            let t = No(e);\n            if (Go(t)) return void Bo(t, this.world);\n            if (e.has(\"#Imperative\")) return;\n            if (e.has(\"be\") && e.lookBehind(\"to$\").found) return;\n            if (t.verb.has(\"#Gerund\") && t.auxiliary.has(\"(is|will|was)\")) return void e.replace(\"is\", \"was\");\n            let r = Co(t, this.world).PastTense;\n            r && (t = zo(t), t.verb.replaceWith(r, !1), t.auxiliary.remove(\"(do|did|will)\"));\n        }), this;\n    },\n    toPresentTense: function() {\n        return this.forEach((e)=>{\n            if (e.has(\"#Imperative\")) return;\n            let t = No(e), r = Co(t, this.world), a = r.PresentTense;\n            if (e.lookBehind(\"(i|we) (#Adverb|#Verb)?$\").found && (a = r.Infinitive), a) {\n                if (t.auxiliary.has(\"(have|had) been\")) return t.auxiliary.replace(\"(have|had) been\", \"am being\"), void (r.Particle && (a = r.Particle || r.PastTense));\n                t.verb.replaceWith(a, !1), t.verb.tag(\"PresentTense\"), t = zo(t), t.auxiliary.remove(\"#Modal\"), t.auxiliary.remove(\"(do|did|will)\");\n            }\n        }), this;\n    },\n    toFutureTense: function() {\n        return this.forEach((e)=>{\n            let t = No(e);\n            if (Go(t)) return;\n            if (e.has(\"#Imperative\")) return;\n            let r = Co(t, this.world).FutureTense;\n            r && (t = zo(t), t.auxiliary.remove(\"#Modal\"), t.verb.replaceWith(r, !1), t.verb.tag(\"FutureTense\"), t.auxiliary.remove(\"(do|did|will)\"));\n        }), this;\n    },\n    toInfinitive: function() {\n        return this.forEach((e)=>{\n            let t = No(e), r = Co(t, this.world).Infinitive;\n            r && (e.replaceWith(r, !1), e.tag(\"Infinitive\"));\n        }), this;\n    },\n    toGerund: function() {\n        return this.forEach((e)=>{\n            let t = No(e), r = Co(t, this.world).Gerund;\n            r && (e.replaceWith(r, !1), e.tag(\"Gerund\"));\n        }), this;\n    },\n    toParticiple: function() {\n        return this.forEach((e)=>{\n            let t = No(e), r = !t.auxiliary.found;\n            Bo(t, this.world), r && (t.verb.prepend(t.auxiliary.text()), t.auxiliary.remove());\n        }), this;\n    },\n    isNegative: function() {\n        return this.if(\"#Negative\");\n    },\n    isPositive: function() {\n        return this.ifNo(\"#Negative\");\n    },\n    isImperative: function() {\n        return this.if(\"#Imperative\");\n    },\n    toNegative: function() {\n        return this.list.forEach((e)=>{\n            let t = this.buildFrom([\n                e\n            ]), r = No(t);\n            jo(r, t.world);\n        }), this;\n    },\n    toPositive: function() {\n        let e = this.match(\"do not #Verb\");\n        return e.found && e.remove(\"do not\"), this.remove(\"#Negative\");\n    },\n    subject: function() {\n        let e = [];\n        return this.forEach((t)=>{\n            let r = Fo(t);\n            r.list[0] && e.push(r.list[0]);\n        }), this.buildFrom(e);\n    }\n};\nconst Oo = Ia, To = [\n    Ji,\n    Si,\n    _i,\n    Ki,\n    qi,\n    io,\n    lo,\n    uo,\n    go,\n    function(e) {\n        class t extends e {\n        }\n        return Object.assign(t.prototype, Io), t.prototype.negate = t.prototype.toNegative, e.prototype.verbs = function(e) {\n            let r = this.match(\"(#Adverb|#Auxiliary|#Verb|#Negative|#Particle)+\");\n            r = r.not(\"^#Adverb+\"), r = r.not(\"#Adverb+$\");\n            let a = r.match(\"(#Adverb && @hasComma) #Adverb\"), n = r.not(a).splitAfter(\"@hasComma\");\n            return n = n.concat(a), n.sort(\"index\"), n = n.if(\"#Verb\"), n.has(\"(is|was)$\") && (n = n.splitBefore(\"(is|was)$\")), n.has(\"#PresentTense #Adverb #PresentTense\") && (n = n.splitBefore(\"#Adverb #PresentTense\")), \"number\" == typeof e && (n = n.get(e)), new t(n.list, this, this.world);\n        }, e;\n    },\n    function(e) {\n        class t extends e {\n        }\n        return e.prototype.people = function(e) {\n            let r = this.splitAfter(\"@hasComma\");\n            return r = r.match(\"#Person+\"), \"number\" == typeof e && (r = r.get(e)), new t(r.list, this, this.world);\n        }, e;\n    }\n];\nconst Vo = {\n    misc: Ga,\n    selections: Ia\n}, Mo = Mi, Jo = xt, Lo = function(e) {\n    return Object.keys(Oo).forEach((t)=>e.prototype[t] = Oo[t]), To.forEach((t)=>t(e)), e;\n};\nclass So {\n    constructor(e, t, r){\n        this.list = e, Object.defineProperty(this, \"from\", {\n            enumerable: !1,\n            value: t,\n            writable: !0\n        }), void 0 === r && void 0 !== t && (r = t.world), Object.defineProperty(this, \"world\", {\n            enumerable: !1,\n            value: r,\n            writable: !0\n        }), Object.defineProperty(this, \"_cache\", {\n            enumerable: !1,\n            writable: !0,\n            value: {}\n        }), Object.defineProperty(this, \"found\", {\n            get: ()=>this.list.length > 0\n        }), Object.defineProperty(this, \"length\", {\n            get: ()=>this.list.length\n        }), Object.defineProperty(this, \"isA\", {\n            get: ()=>\"Doc\"\n        });\n    }\n    tagger() {\n        return Mo(this);\n    }\n    pool() {\n        return this.list.length > 0 ? this.list[0].pool : this.all().list[0].pool;\n    }\n}\nSo.prototype.buildFrom = function(e) {\n    return e = e.map((e)=>e.clone(!0)), new So(e, this, this.world);\n}, So.prototype.fromText = function(e) {\n    let t = Jo(e, this.world, this.pool());\n    return this.buildFrom(t);\n}, Object.assign(So.prototype, Vo.misc), Object.assign(So.prototype, Vo.selections), Lo(So);\nconst _o = {\n    untag: \"unTag\",\n    and: \"match\",\n    notIf: \"ifNo\",\n    only: \"if\",\n    onlyIf: \"if\"\n};\nObject.keys(_o).forEach((e)=>So.prototype[e] = So.prototype[_o[e]]);\nconst Ko = Va;\nconst qo = xt, Wo = zt, Ro = So, Uo = nt, Qo = ne, Zo = ot, Xo = function(e) {\n    let t = e.termList();\n    return Ko(t, e.world), e.world.taggers.forEach((t)=>{\n        t(e);\n    }), e;\n}, Yo = _e;\nvar es = function e(t) {\n    let r = t;\n    const a = function(e = \"\", t) {\n        t && r.addWords(t);\n        let a = qo(e, r), n = new Ro(a, null, r);\n        return n.tagger(), n;\n    };\n    return a.tokenize = function(e = \"\", t) {\n        let a = r;\n        t && (a = a.clone(), a.words = {}, a.addWords(t));\n        let n = qo(e, a), i = new Ro(n, null, a);\n        return (t || i.world.taggers.length > 0) && Xo(i), i;\n    }, a.extend = function(e) {\n        return e(Ro, r, this, Uo, Qo, Zo), this;\n    }, a.fromJSON = function(e) {\n        let t = Wo(e, r);\n        return new Ro(t, null, r);\n    }, a.clone = function() {\n        return e(r.clone());\n    }, a.verbose = function(e = !0) {\n        return r.verbose(e), this;\n    }, a.world = function() {\n        return r;\n    }, a.parseMatch = function(e, t) {\n        return Yo(e, t);\n    }, a.version = \"13.11.4\", a.import = a.load, a.plugin = a.extend, a;\n}(new Rr);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (es);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/compromise/builds/compromise.mjs\n");

/***/ })

};
;
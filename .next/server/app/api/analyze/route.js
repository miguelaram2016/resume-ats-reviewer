"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analyze/route";
exports.ids = ["app/api/analyze/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5Cmigue%5COneDrive%5CDocuments%5CGitHub%5Cresume-ats-reviewer%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmigue%5COneDrive%5CDocuments%5CGitHub%5Cresume-ats-reviewer&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5Cmigue%5COneDrive%5CDocuments%5CGitHub%5Cresume-ats-reviewer%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmigue%5COneDrive%5CDocuments%5CGitHub%5Cresume-ats-reviewer&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_migue_OneDrive_Documents_GitHub_resume_ats_reviewer_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/analyze/route.ts */ \"(rsc)/./app/api/analyze/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analyze/route\",\n        pathname: \"/api/analyze\",\n        filename: \"route\",\n        bundlePath: \"app/api/analyze/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\migue\\\\OneDrive\\\\Documents\\\\GitHub\\\\resume-ats-reviewer\\\\app\\\\api\\\\analyze\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_migue_OneDrive_Documents_GitHub_resume_ats_reviewer_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/analyze/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhbmFseXplJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhbmFseXplJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYW5hbHl6ZSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNtaWd1ZSU1Q09uZURyaXZlJTVDRG9jdW1lbnRzJTVDR2l0SHViJTVDcmVzdW1lLWF0cy1yZXZpZXdlciU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDbWlndWUlNUNPbmVEcml2ZSU1Q0RvY3VtZW50cyU1Q0dpdEh1YiU1Q3Jlc3VtZS1hdHMtcmV2aWV3ZXImaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDK0M7QUFDNUg7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1R0FBdUc7QUFDL0c7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUM2Sjs7QUFFN0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZXN1bWUtYXRzLXJldmlld2VyLz8yNGZiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXG1pZ3VlXFxcXE9uZURyaXZlXFxcXERvY3VtZW50c1xcXFxHaXRIdWJcXFxccmVzdW1lLWF0cy1yZXZpZXdlclxcXFxhcHBcXFxcYXBpXFxcXGFuYWx5emVcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2FuYWx5emUvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hbmFseXplXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9hbmFseXplL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcbWlndWVcXFxcT25lRHJpdmVcXFxcRG9jdW1lbnRzXFxcXEdpdEh1YlxcXFxyZXN1bWUtYXRzLXJldmlld2VyXFxcXGFwcFxcXFxhcGlcXFxcYW5hbHl6ZVxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9hbmFseXplL3JvdXRlXCI7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHNlcnZlckhvb2tzLFxuICAgICAgICBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCwgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5Cmigue%5COneDrive%5CDocuments%5CGitHub%5Cresume-ats-reviewer%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmigue%5COneDrive%5CDocuments%5CGitHub%5Cresume-ats-reviewer&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/analyze/route.ts":
/*!**********************************!*\
  !*** ./app/api/analyze/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   dynamic: () => (/* binding */ dynamic),\n/* harmony export */   runtime: () => (/* binding */ runtime)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _lib_analyze__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/analyze */ \"(rsc)/./lib/analyze.ts\");\n// app/api/analyze/route.ts\n\n\nconst runtime = \"nodejs\";\nconst dynamic = \"force-dynamic\";\n/* ------------------------------ utils ------------------------------ */ function json(status1, body1) {\n    return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json(body1, {\n        status: status1\n    });\n}\n/** Pure Node PDF text extraction (no workers/canvas). */ async function extractPdfText(ab) {\n    const data = ab instanceof Uint8Array ? ab : new Uint8Array(ab);\n    try {\n        // Load pdf-parse at runtime so Next never bundles it (avoids ENOENT/test fixture issues)\n        // eslint-disable-next-line no-eval\n        const req = eval(\"require\");\n        const pdfParseMod = req(\"pdf-parse\");\n        const pdfParse = pdfParseMod.default ?? pdfParseMod;\n        const out = await pdfParse(Buffer.from(data));\n        const text = typeof out?.text === \"string\" ? out.text : \"\";\n        if (text) return text;\n    } catch (err) {\n    // Quietly fall through to UTF-8 decode; no noisy warnings during dev\n    }\n    // Last resort: naive UTF-8 decode\n    return new TextDecoder().decode(data);\n}\n/** Read File|string|null -> UTF-8 text; parse PDFs when appropriate */ async function fileToTextSmart(v1) {\n    if (!v1) return {\n        text: \"\"\n    };\n    if (typeof v1 === \"string\") return {\n        text: v1\n    };\n    // @ts-ignore - Next's File polyfill\n    const name1 = v1?.name;\n    // @ts-ignore\n    const type1 = v1?.type;\n    const looksPdf1 = type1 && type1.includes(\"application/pdf\") || name1 && name1.toLowerCase().endsWith(\".pdf\");\n    // Prefer arrayBuffer (works with Next File polyfill)\n    // @ts-ignore\n    if (typeof v1.arrayBuffer === \"function\") {\n        // @ts-ignore\n        const ab1 = await v1.arrayBuffer();\n        const byteLen1 = ab1?.byteLength ?? 0;\n        if (looksPdf1 && byteLen1 > 0) {\n            const text1 = await extractPdfText(ab1);\n            return {\n                text: text1,\n                name: name1,\n                type: type1\n            };\n        }\n        const decoded1 = byteLen1 > 0 ? new TextDecoder().decode(ab1) : \"\";\n        return {\n            text: decoded1,\n            name: name1,\n            type: type1\n        };\n    }\n    // Fallback to .text()\n    // @ts-ignore\n    if (typeof v1.text === \"function\") {\n        // @ts-ignore\n        const t1 = await v1.text();\n        return {\n            text: t1,\n            name: name1,\n            type: type1\n        };\n    }\n    return {\n        text: \"\",\n        name: name1,\n        type: type1\n    };\n}\nasync function readForm(req1) {\n    const form1 = await req1.formData();\n    const resumeTextField1 = form1.get(\"resume_text\") || \"\";\n    const jdTextField1 = form1.get(\"jd_text\") || \"\";\n    const resumeVal1 = form1.get(\"resume\");\n    const jdVal1 = form1.get(\"jd\");\n    const { text: resumeAuto1 } = await fileToTextSmart(resumeVal1);\n    const { text: jdAuto1 } = await fileToTextSmart(jdVal1);\n    const resumeText1 = resumeTextField1 || resumeAuto1 || \"\";\n    const jd1 = jdTextField1 || jdAuto1 || \"\";\n    const weightsRaw1 = form1.get(\"weights\") || \"\";\n    const redactPII1 = String(form1.get(\"redact_pii\") ?? \"false\").toLowerCase() === \"true\";\n    let weights1;\n    if (weightsRaw1) {\n        try {\n            weights1 = JSON.parse(weightsRaw1);\n        } catch  {}\n    }\n    return {\n        resumeText: resumeText1,\n        jd: jd1,\n        weights: weights1,\n        redactPII: redactPII1\n    };\n}\nasync function readJson(req1) {\n    const body1 = await req1.json().catch(()=>({}));\n    const resumeText1 = body1?.resumeText ?? body1?.resume ?? \"\";\n    const jd1 = body1?.jd ?? body1?.jobDescription ?? \"\";\n    const weights1 = body1?.weights;\n    const redactPII1 = Boolean(body1?.redactPII ?? body1?.redact_pii ?? false);\n    return {\n        resumeText: resumeText1,\n        jd: jd1,\n        weights: weights1,\n        redactPII: redactPII1\n    };\n}\n/* ------------------------------ handlers ------------------------------ */ async function OPTIONS() {\n    return new Response(null, {\n        status: 204,\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"POST,OPTIONS\",\n            \"Access-Control-Allow-Headers\": \"Content-Type, Authorization\"\n        }\n    });\n}\nasync function POST(req1) {\n    try {\n        const ct1 = req1.headers.get(\"content-type\") ?? \"\";\n        let resumeText1 = \"\", jd1 = \"\";\n        let weights1;\n        let redactPII1 = false;\n        if (ct1.includes(\"multipart/form-data\")) {\n            ({ resumeText: resumeText1, jd: jd1, weights: weights1, redactPII: redactPII1 } = await readForm(req1));\n        } else if (ct1.includes(\"application/json\")) {\n            ({ resumeText: resumeText1, jd: jd1, weights: weights1, redactPII: redactPII1 } = await readJson(req1));\n        } else if (ct1.includes(\"text/plain\")) {\n            const text1 = await req1.text();\n            const [resPart1, jdPart1] = text1.split(/\\n---+\\n/);\n            resumeText1 = resPart1?.trim() || \"\";\n            jd1 = jdPart1?.trim() || \"\";\n        } else {\n            try {\n                ({ resumeText: resumeText1, jd: jd1, weights: weights1, redactPII: redactPII1 } = await readForm(req1));\n            } catch  {\n                ({ resumeText: resumeText1, jd: jd1, weights: weights1, redactPII: redactPII1 } = await readJson(req1));\n            }\n        }\n        // Optional single-field smoke test: { text }\n        if (!resumeText1 && !jd1) {\n            try {\n                const b1 = await req1.json();\n                if (typeof b1?.text === \"string\" && b1.text.trim()) {\n                    resumeText1 = b1.text;\n                    jd1 = b1.text;\n                }\n            } catch  {}\n        }\n        if (!resumeText1 || !jd1) {\n            return json(400, {\n                error: \"Provide both resume and JD (text or file).\"\n            });\n        }\n        const mergedWeights1 = {\n            ats: weights1?.ats ?? 0.3,\n            keyword_match: weights1?.keyword_match ?? 0.35,\n            impact: weights1?.impact ?? 0.2,\n            clarity: weights1?.clarity ?? 0.15\n        };\n        const input1 = {\n            resumeText: resumeText1,\n            jd: jd1,\n            weights: mergedWeights1,\n            redactPII: redactPII1\n        };\n        const out1 = (0,_lib_analyze__WEBPACK_IMPORTED_MODULE_1__.analyze)(input1);\n        return json(200, out1);\n    } catch (err1) {\n        console.error(\"Fatal error in /api/analyze\", err1);\n        return json(500, {\n            error: \"Internal error in /api/analyze\",\n            detail: String(err1?.message || err1)\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/analyze/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/analyze.ts":
/*!************************!*\
  !*** ./lib/analyze.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyze: () => (/* binding */ analyze),\n/* harmony export */   normalize: () => (/* binding */ normalize),\n/* harmony export */   toSet: () => (/* binding */ toSet),\n/* harmony export */   tokenize: () => (/* binding */ tokenize)\n/* harmony export */ });\n// lib/analyze.ts\n// =========== Public types ===========\n// =========== Analysis ===========\nfunction analyze(input) {\n    const { redactPII = false } = input;\n    const weights = withDefaultWeights(input.weights);\n    // Normalize both sides BEFORE tokenization; keep originals for rewrites/summary.\n    const resumeN = normalize(input.resumeText);\n    const jdN = normalize(input.jd);\n    // Extract “terms” (tokens + phrases)\n    const resumeTokens = tokenize(resumeN);\n    const jdTokens = tokenize(jdN);\n    const resumeSet = toSet(resumeTokens);\n    const jdSet = toSet(jdTokens);\n    // Mine candidate keywords from JD (bigrams+unigrams, filtered)\n    const jdKeyPhrases = extractKeyPhrases(jdTokens);\n    const resKeyPhrases = extractKeyPhrases(resumeTokens);\n    // Match phrases first, then fall back to tokens with fuzzy credit\n    const { matched, missing } = matchKeywords(jdKeyPhrases, resKeyPhrases, jdSet, resumeSet);\n    // Heuristic scoring buckets (industry-agnostic)\n    const atsScore = scoreATS(input.resumeText);\n    const impactScore = scoreImpact(input.resumeText);\n    const clarityScore = scoreClarity(input.resumeText);\n    const keywordScore = Math.round(matched.length / Math.max(1, matched.length + missing.length) * 100);\n    const overall = weighted([\n        [\n            atsScore,\n            weights.ats\n        ],\n        [\n            keywordScore,\n            weights.keyword_match\n        ],\n        [\n            impactScore,\n            weights.impact\n        ],\n        [\n            clarityScore,\n            weights.clarity\n        ]\n    ]);\n    // Flags & fixes\n    const flags = buildFlags(input.resumeText);\n    const fix_list = flags.map((f)=>`Fix: ${f}`);\n    // Suggested rewrites (transform some lines into stronger bullets)\n    const suggested_rewrites = suggestRewrites(input.resumeText);\n    // Tailored summary aligned to JD\n    const tailored_summary = buildSummary(input.resumeText, input.jd, keywordScore, matched.length);\n    // Redact PII AFTER analysis so it doesn’t break matching\n    const postProcess = (s)=>redactPII ? redact(s) : s;\n    return {\n        scores: {\n            overall,\n            ats: atsScore,\n            keyword_match: keywordScore,\n            impact: impactScore,\n            clarity: clarityScore\n        },\n        matched_keywords: matched.map(postProcess),\n        missing_keywords: missing.map(postProcess),\n        flags: flags.map(postProcess),\n        fix_list: fix_list.map(postProcess),\n        suggested_rewrites: suggested_rewrites.map(postProcess),\n        tailored_summary: postProcess(tailored_summary)\n    };\n}\n// =========== Normalization & tokenization ===========\nfunction normalize(raw) {\n    return raw.normalize(\"NFKC\").replace(/[\\u2010-\\u2015]/g, \"-\") // dashes\n    .replace(/[“”„‟]/g, '\"') // quotes\n    .replace(/[‘’‚‛]/g, \"'\") // apostrophes\n    .replace(/\\u00A0/g, \" \") // NBSP\n    .replace(/[|•·●▪▶►]/g, \" \") // bullets\n    .replace(/[()]/g, \" \").replace(/[-_/\\\\]/g, \" \") // separators\n    .replace(/\\.(js|ts|tsx|jsx)\\b/g, \" $1 \").toLowerCase().normalize(\"NFKD\").replace(/[\\u0300-\\u036f]/g, \"\") // accents\n    .replace(/\\s+/g, \" \").trim();\n}\nconst STOP = new Set([\n    \"and\",\n    \"or\",\n    \"the\",\n    \"a\",\n    \"an\",\n    \"for\",\n    \"of\",\n    \"to\",\n    \"with\",\n    \"in\",\n    \"on\",\n    \"at\",\n    \"by\",\n    \"from\",\n    \"as\",\n    \"is\",\n    \"are\",\n    \"be\",\n    \"our\",\n    \"we\",\n    \"you\",\n    \"their\",\n    \"they\",\n    \"i\",\n    \"company\",\n    \"role\",\n    \"position\",\n    \"candidate\",\n    \"seeking\",\n    \"opportunity\",\n    \"responsibilities\",\n    \"requirements\",\n    \"skills\",\n    \"experience\"\n]);\n// Aliases across industries (extensible)\nconst ALIAS = {\n    // tech\n    \"nextjs\": \"next.js\",\n    \"next\": \"next.js\",\n    \"node\": \"node.js\",\n    \"nodejs\": \"node.js\",\n    \"typescript\": \"ts\",\n    \"javascript\": \"js\",\n    \"tailwindcss\": \"tailwind\",\n    \"reactjs\": \"react\",\n    \"mssql\": \"sql server\",\n    \"ms sql\": \"sql server\",\n    \"aws s3\": \"s3\",\n    // ops/finance/health/etc.\n    \"ap/ar\": \"ap ar\",\n    \"a/p\": \"ap\",\n    \"a/r\": \"ar\",\n    \"ehr\": \"electronic health record\",\n    \"hipaa\": \"hipaa\",\n    \"gaap\": \"gaap\"\n};\nfunction alias(tok) {\n    return ALIAS[tok] ?? tok;\n}\nfunction tokenize(nrm) {\n    const words = nrm.split(\" \").map(alias).filter((w)=>w && w.length > 1 && !STOP.has(w));\n    // generate bigrams for phrase sensitivity\n    const bigrams = [];\n    for(let i = 0; i < words.length - 1; i++){\n        bigrams.push(`${words[i]} ${words[i + 1]}`);\n    }\n    return [\n        ...words,\n        ...bigrams\n    ];\n}\nfunction toSet(tokens) {\n    const s = new Set();\n    for (const t of tokens){\n        const base = t.replace(/(ing|ed|es|s)$/, \"\");\n        if (base.length > 1) s.add(base);\n    }\n    return s;\n}\n// Phrase extraction: prefer nouns/skills-ish tokens by crude filters\nfunction extractKeyPhrases(tokens) {\n    const phrases = new Set();\n    for (const t of tokens){\n        if (t.includes(\" \")) {\n            // take bigrams that look like skills/terms\n            if (!/^(and|the|for|with|from|over|under|into|onto)\\b/.test(t)) {\n                phrases.add(t);\n            }\n        } else {\n            // keep singles that look like domain terms (letters+digits allowed)\n            if (/^[a-z0-9.+#-]{2,}$/.test(t) && !STOP.has(t)) {\n                phrases.add(t);\n            }\n        }\n    }\n    return [\n        ...phrases\n    ];\n}\n// Fuzzy match helper (cheap char-level distance)\nfunction near(a, b) {\n    if (a === b) return true;\n    const la = a.length, lb = b.length;\n    if (Math.abs(la - lb) > 1) return false;\n    let diff = 0, i = 0, j = 0;\n    while(i < la && j < lb){\n        if (a[i] === b[j]) {\n            i++;\n            j++;\n            continue;\n        }\n        diff++;\n        if (diff > 1) return false;\n        if (la > lb) i++;\n        else if (lb > la) j++;\n        else {\n            i++;\n            j++;\n        }\n    }\n    return true;\n}\nfunction matchKeywords(jdPhrases, resPhrases, jdSet, resSet) {\n    const matched = [];\n    const missing = [];\n    const resPhraseSet = new Set(resPhrases);\n    // 1) phrase-level exact or near matches\n    for (const p of jdPhrases){\n        const base = p.replace(/(ing|ed|es|s)$/, \"\");\n        const found = resPhraseSet.has(p) || [\n            ...resPhraseSet\n        ].some((q)=>near(q, p)) || resSet.has(base);\n        if (found) matched.push(p);\n        else missing.push(p);\n    }\n    // 2) token-level: add any tokens present in JD but not in resume\n    for (const tok of jdSet){\n        if (!resSet.has(tok)) missing.push(tok);\n        else matched.push(tok);\n    }\n    // Dedup & keep concise\n    const uniq = (arr)=>Array.from(new Set(arr)).slice(0, 200);\n    return {\n        matched: uniq(matched),\n        missing: uniq(missing.filter((m)=>!matched.includes(m)))\n    };\n}\n// =========== Scoring heuristics (industry-agnostic) ===========\nfunction scoreATS(resumeRaw) {\n    // proxy for structure: presence of common sections + bullet usage + contact block\n    const r = resumeRaw.toLowerCase();\n    let pts = 0;\n    if (/\\bsummary|objective\\b/.test(r)) pts += 15;\n    if (/\\beducation\\b/.test(r)) pts += 15;\n    if (/\\bexperience|employment|work history\\b/.test(r)) pts += 20;\n    if (/\\bskills\\b/.test(r)) pts += 15;\n    if (/[-*•▪●]/.test(resumeRaw)) pts += 10; // bullets\n    if (/\\b[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}\\b/.test(r)) pts += 10; // email\n    if (/\\b\\d{3}[- .]?\\d{3}[- .]?\\d{4}\\b/.test(r)) pts += 5; // phone\n    if (/\\bgithub|linkedin|portfolio|http/.test(r)) pts += 10;\n    return clamp(Math.round(pts), 0, 100);\n}\nfunction scoreImpact(resumeRaw) {\n    // reward quantified bullets and action verbs\n    const lower = resumeRaw.toLowerCase();\n    const actionVerbs = [\n        \"built\",\n        \"led\",\n        \"reduced\",\n        \"increased\",\n        \"optimized\",\n        \"designed\",\n        \"developed\",\n        \"deployed\",\n        \"automated\",\n        \"delivered\",\n        \"launched\",\n        \"implemented\",\n        \"streamlined\",\n        \"improved\",\n        \"created\",\n        \"managed\"\n    ];\n    const verbHits = actionVerbs.reduce((acc, v)=>acc + (lower.includes(v) ? 1 : 0), 0);\n    const metricsHits = (resumeRaw.match(/\\b\\d+(\\.\\d+)?%|\\b\\d{2,}(?:k|m)?\\b/gi) || []).length; // % or big numbers\n    const bullets = (resumeRaw.match(/[-*•▪●]/g) || []).length;\n    const raw = 30 + Math.min(40, metricsHits * 6) + Math.min(20, verbHits * 4) + Math.min(10, Math.floor(bullets / 5) * 2);\n    return clamp(raw, 0, 100);\n}\nfunction scoreClarity(resumeRaw) {\n    // simplistic readability proxy: sentence length & passive voice hints\n    const text = resumeRaw.replace(/\\s+/g, \" \").trim();\n    const sentences = text.split(/[.!?]\\s/).filter(Boolean);\n    const avgLen = sentences.length ? text.split(/\\s+/).length / sentences.length : 18;\n    let score = 100;\n    if (avgLen > 28) score -= Math.min(40, (avgLen - 28) * 2);\n    const passive = (text.match(/\\b(was|were|been|being|be)\\b\\s+\\w+ed\\b/gi) || []).length;\n    score -= Math.min(30, passive * 3);\n    return clamp(Math.round(score), 0, 100);\n}\nfunction weighted(pairs) {\n    const sumW = pairs.reduce((a, [, w])=>a + w, 0) || 1;\n    const v = pairs.reduce((a, [s, w])=>a + s * w, 0) / sumW;\n    return clamp(Math.round(v), 0, 100);\n}\nfunction clamp(n, lo, hi) {\n    return Math.max(lo, Math.min(hi, n));\n}\n// =========== Flags, fixes, rewrites, summary ===========\nfunction buildFlags(raw) {\n    const flags = [];\n    const r = raw.toLowerCase();\n    if (!/\\bsummary|objective\\b/.test(r)) flags.push(\"Add a brief Professional Summary (2–3 lines).\");\n    if (!/\\beducation\\b/.test(r)) flags.push(\"Add an Education section.\");\n    if (!/\\bexperience|employment|work history\\b/.test(r)) flags.push(\"Add an Experience section.\");\n    if (!/\\bskills\\b/.test(r)) flags.push(\"Add a Skills section.\");\n    const bullets = (raw.match(/[-*•▪●]/g) || []).length;\n    if (bullets < 6) flags.push(\"Use bullet points for readability and scannability.\");\n    if (!/\\b\\d{3}[- .]?\\d{3}[- .]?\\d{4}\\b/.test(r) && !/\\b[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}\\b/.test(r)) {\n        flags.push(\"Ensure contact info (email/phone) is present and selectable.\");\n    }\n    return flags.slice(0, 10);\n}\nfunction suggestRewrites(raw) {\n    // Transform some lines into metric-led, verb-first bullets\n    const lines = raw.split(/\\r?\\n/).map((s)=>s.trim()).filter(Boolean);\n    const out = [];\n    for (const line of lines){\n        if (line.length < 40 || out.length >= 6) continue;\n        const rewritten = rewriteLine(line);\n        if (rewritten) out.push(rewritten);\n    }\n    return out;\n}\nfunction rewriteLine(line) {\n    // If line lacks a metric, add a metric prompt\n    const startsPassive = /\\b(was|were|been|being|be)\\b/i.test(line);\n    const hasMetric = /\\b\\d+(\\.\\d+)?%|\\b\\d{2,}(?:k|m)?\\b/i.test(line);\n    let base = line.replace(/^[-*•▪●]\\s*/, \"\").trim();\n    if (startsPassive) base = base.replace(/\\b(was|were|been|being|be)\\b\\s*/i, \"\");\n    const tmpl = `• ${capitalize(firstVerb(base))} ${restAfterFirstVerb(base)}${hasMetric ? \"\" : \" — quantify impact (%, $, time, or volume).\"}`.replace(/\\s+/g, \" \").trim();\n    return tmpl.length > 40 ? tmpl : null;\n}\nfunction firstVerb(s) {\n    const words = s.split(/\\s+/);\n    const w = words[0] || \"Delivered\";\n    return capitalize(w.replace(/[^\\w-]/g, \"\"));\n}\nfunction restAfterFirstVerb(s) {\n    return s.split(/\\s+/).slice(1).join(\" \") || \"measurable outcomes for stakeholders.\";\n}\nfunction capitalize(s) {\n    return s ? s[0].toUpperCase() + s.slice(1) : s;\n}\nfunction buildSummary(resumeRaw, jdRaw, kwScore, matchedCount) {\n    const focus = kwScore >= 60 ? \"strong alignment\" : kwScore >= 35 ? \"partial alignment\" : \"foundational alignment\";\n    return `Results-driven professional with ${focus} to the role; matched ${matchedCount} JD terms. Emphasize quantified outcomes and the most relevant tools/frameworks referenced in the job description.`;\n}\n// =========== PII Redaction (post-analysis) ===========\nfunction redact(s) {\n    return s.replace(/\\b[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,}\\b/gi, \"[REDACTED_EMAIL]\").replace(/\\b(?:\\+?1[-.\\s]?)?\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}\\b/g, \"[REDACTED_PHONE]\").replace(/\\bhttps?:\\/\\/\\S+\\b/gi, \"[REDACTED_URL]\");\n}\nfunction withDefaultWeights(w) {\n    return {\n        ats: w?.ats ?? 0.3,\n        keyword_match: w?.keyword_match ?? 0.35,\n        impact: w?.impact ?? 0.2,\n        clarity: w?.clarity ?? 0.15\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/analyze.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CUsers%5Cmigue%5COneDrive%5CDocuments%5CGitHub%5Cresume-ats-reviewer%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cmigue%5COneDrive%5CDocuments%5CGitHub%5Cresume-ats-reviewer&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();